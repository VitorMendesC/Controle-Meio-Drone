
Projeto Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af3c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000868  0800b0e0  0800b0e0  0001b0e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b948  0800b948  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b948  0800b948  0001b948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b950  0800b950  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b950  0800b950  0001b950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b954  0800b954  0001b954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800b958  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  200001e8  0800bb40  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  0800bb40  00020434  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ef75  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000213e  00000000  00000000  0002f1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e30  00000000  00000000  00031310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b19  00000000  00000000  00032140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001861c  00000000  00000000  00032c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010279  00000000  00000000  0004b275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b676  00000000  00000000  0005b4ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005554  00000000  00000000  000f6b64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000fc0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b0c4 	.word	0x0800b0c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800b0c4 	.word	0x0800b0c4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN PV */
uint8_t flag_user = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B1_Pin)
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001010:	d102      	bne.n	8001018 <HAL_GPIO_EXTI_Callback+0x18>
	{
		flag_user = 1;
 8001012:	4b04      	ldr	r3, [pc, #16]	; (8001024 <HAL_GPIO_EXTI_Callback+0x24>)
 8001014:	2201      	movs	r2, #1
 8001016:	701a      	strb	r2, [r3, #0]
	}
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	200002d8 	.word	0x200002d8

08001028 <blink_led>:

void blink_led(int repetitions)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	for(int i=0; i< repetitions; i++)
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	e009      	b.n	800104a <blink_led+0x22>
	{
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001036:	2120      	movs	r1, #32
 8001038:	4808      	ldr	r0, [pc, #32]	; (800105c <blink_led+0x34>)
 800103a:	f002 f816 	bl	800306a <HAL_GPIO_TogglePin>
	  HAL_Delay(20);
 800103e:	2014      	movs	r0, #20
 8001040:	f001 f8e4 	bl	800220c <HAL_Delay>
	for(int i=0; i< repetitions; i++)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3301      	adds	r3, #1
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	429a      	cmp	r2, r3
 8001050:	dbf1      	blt.n	8001036 <blink_led+0xe>
	}
}
 8001052:	bf00      	nop
 8001054:	bf00      	nop
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40020000 	.word	0x40020000

08001060 <wait_user>:
void wait_user()
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	while(!flag_user)
 8001064:	e002      	b.n	800106c <wait_user+0xc>
	{
		HAL_Delay(10);
 8001066:	200a      	movs	r0, #10
 8001068:	f001 f8d0 	bl	800220c <HAL_Delay>
	while(!flag_user)
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <wait_user+0x20>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d0f8      	beq.n	8001066 <wait_user+0x6>
	}
	flag_user = 0;
 8001074:	4b02      	ldr	r3, [pc, #8]	; (8001080 <wait_user+0x20>)
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200002d8 	.word	0x200002d8

08001084 <HAL_ADC_ConvCpltCallback>:

uint8_t dataready = 0;
uint32_t angle_in_bits = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
    // Read & Update The ADC Result
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800108c:	2120      	movs	r1, #32
 800108e:	4809      	ldr	r0, [pc, #36]	; (80010b4 <HAL_ADC_ConvCpltCallback+0x30>)
 8001090:	f001 ffeb 	bl	800306a <HAL_GPIO_TogglePin>
	angle_in_bits = HAL_ADC_GetValue(hadc);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f001 faef 	bl	8002678 <HAL_ADC_GetValue>
 800109a:	4603      	mov	r3, r0
 800109c:	4a06      	ldr	r2, [pc, #24]	; (80010b8 <HAL_ADC_ConvCpltCallback+0x34>)
 800109e:	6013      	str	r3, [r2, #0]
	dataready=1;
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_ADC_ConvCpltCallback+0x38>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	701a      	strb	r2, [r3, #0]
	HAL_ADC_Start_IT(&hadc1);
 80010a6:	4806      	ldr	r0, [pc, #24]	; (80010c0 <HAL_ADC_ConvCpltCallback+0x3c>)
 80010a8:	f001 f918 	bl	80022dc <HAL_ADC_Start_IT>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40020000 	.word	0x40020000
 80010b8:	200002dc 	.word	0x200002dc
 80010bc:	200002d9 	.word	0x200002d9
 80010c0:	20000204 	.word	0x20000204

080010c4 <clip>:

uint32_t clip(int16_t action, int16_t min, int16_t max)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	80fb      	strh	r3, [r7, #6]
 80010ce:	460b      	mov	r3, r1
 80010d0:	80bb      	strh	r3, [r7, #4]
 80010d2:	4613      	mov	r3, r2
 80010d4:	807b      	strh	r3, [r7, #2]
	uint32_t normalizedU = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]

	if (action < min)
 80010da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80010de:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	da01      	bge.n	80010ea <clip+0x26>
	{
		action = min;
 80010e6:	88bb      	ldrh	r3, [r7, #4]
 80010e8:	80fb      	strh	r3, [r7, #6]
	}
	if (action > max)
 80010ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80010ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	dd01      	ble.n	80010fa <clip+0x36>
	{
		action = max;
 80010f6:	887b      	ldrh	r3, [r7, #2]
 80010f8:	80fb      	strh	r3, [r7, #6]
	}
	normalizedU = (uint32_t)(action);
 80010fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010fe:	60fb      	str	r3, [r7, #12]
	return normalizedU;
 8001100:	68fb      	ldr	r3, [r7, #12]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <PWM_setCombinedValue>:

void PWM_setCombinedValue(TIM_HandleTypeDef* htim, int16_t left_actionx10, int16_t right_actionx10)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b084      	sub	sp, #16
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	460b      	mov	r3, r1
 8001118:	807b      	strh	r3, [r7, #2]
 800111a:	4613      	mov	r3, r2
 800111c:	803b      	strh	r3, [r7, #0]
	// 1 ms => 0%
	// 2 ms => 100%
	// ARR = 20000
	//PSC = 83
	//Clk = 84 Mhz
	uint32_t norm_U_dir = clip(right_actionx10, 0, 1000);
 800111e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001122:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ffcb 	bl	80010c4 <clip>
 800112e:	60f8      	str	r0, [r7, #12]
	uint32_t norm_U_esq = clip(left_actionx10, 0, 1000);
 8001130:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001134:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ffc2 	bl	80010c4 <clip>
 8001140:	60b8      	str	r0, [r7, #8]
	norm_U_dir = 1000+norm_U_dir;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001148:	60fb      	str	r3, [r7, #12]
	norm_U_esq = 1000+norm_U_esq;
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001150:	60bb      	str	r3, [r7, #8]
	htim->Instance->CCR1 = norm_U_esq;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	635a      	str	r2, [r3, #52]	; 0x34
	htim->Instance->CCR2 = norm_U_dir;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	0000      	movs	r0, r0
 800116c:	0000      	movs	r0, r0
	...

08001170 <ADC_to_rad>:

///////////////////////////////////////////////////////////////////////////////    ADDED FUNCTIONS    ////
float ADC_to_rad(uint32_t ADC_value){
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	return 0.0005*ADC_value - 1.1874;
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff f9cb 	bl	8000514 <__aeabi_ui2d>
 800117e:	a30e      	add	r3, pc, #56	; (adr r3, 80011b8 <ADC_to_rad+0x48>)
 8001180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001184:	f7ff fa40 	bl	8000608 <__aeabi_dmul>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4610      	mov	r0, r2
 800118e:	4619      	mov	r1, r3
 8001190:	a30b      	add	r3, pc, #44	; (adr r3, 80011c0 <ADC_to_rad+0x50>)
 8001192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001196:	f7ff f87f 	bl	8000298 <__aeabi_dsub>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	f7ff fd29 	bl	8000bf8 <__aeabi_d2f>
 80011a6:	4603      	mov	r3, r0
 80011a8:	ee07 3a90 	vmov	s15, r3
}
 80011ac:	eeb0 0a67 	vmov.f32	s0, s15
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80011bc:	3f40624d 	.word	0x3f40624d
 80011c0:	2474538f 	.word	0x2474538f
 80011c4:	3ff2ff97 	.word	0x3ff2ff97

080011c8 <trapezoid_area>:

float trapezoid_area(float current_value, float anterior_value){
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80011d2:	edc7 0a00 	vstr	s1, [r7]
	return TS*((anterior_value+current_value)/2);
 80011d6:	ed97 7a00 	vldr	s14, [r7]
 80011da:	edd7 7a01 	vldr	s15, [r7, #4]
 80011de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011e2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80011e6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011ea:	ee16 0a90 	vmov	r0, s13
 80011ee:	f7ff f9b3 	bl	8000558 <__aeabi_f2d>
 80011f2:	a309      	add	r3, pc, #36	; (adr r3, 8001218 <trapezoid_area+0x50>)
 80011f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f8:	f7ff fa06 	bl	8000608 <__aeabi_dmul>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4610      	mov	r0, r2
 8001202:	4619      	mov	r1, r3
 8001204:	f7ff fcf8 	bl	8000bf8 <__aeabi_d2f>
 8001208:	4603      	mov	r3, r0
 800120a:	ee07 3a90 	vmov	s15, r3
}
 800120e:	eeb0 0a67 	vmov.f32	s0, s15
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	47ae147b 	.word	0x47ae147b
 800121c:	3f947ae1 	.word	0x3f947ae1

08001220 <f_to_pwm_rigth>:

float f_to_pwm_rigth(float f){
 8001220:	b5b0      	push	{r4, r5, r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	ed87 0a01 	vstr	s0, [r7, #4]
    return -7.5039*pow(f,2) + 51.102*f + 7.8998;
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff f994 	bl	8000558 <__aeabi_f2d>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 80012a0 <f_to_pwm_rigth+0x80>
 8001238:	ec43 2b10 	vmov	d0, r2, r3
 800123c:	f008 fad0 	bl	80097e0 <pow>
 8001240:	ec51 0b10 	vmov	r0, r1, d0
 8001244:	a318      	add	r3, pc, #96	; (adr r3, 80012a8 <f_to_pwm_rigth+0x88>)
 8001246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124a:	f7ff f9dd 	bl	8000608 <__aeabi_dmul>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4614      	mov	r4, r2
 8001254:	461d      	mov	r5, r3
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff f97e 	bl	8000558 <__aeabi_f2d>
 800125c:	a314      	add	r3, pc, #80	; (adr r3, 80012b0 <f_to_pwm_rigth+0x90>)
 800125e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001262:	f7ff f9d1 	bl	8000608 <__aeabi_dmul>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4620      	mov	r0, r4
 800126c:	4629      	mov	r1, r5
 800126e:	f7ff f815 	bl	800029c <__adddf3>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4610      	mov	r0, r2
 8001278:	4619      	mov	r1, r3
 800127a:	a30f      	add	r3, pc, #60	; (adr r3, 80012b8 <f_to_pwm_rigth+0x98>)
 800127c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001280:	f7ff f80c 	bl	800029c <__adddf3>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	f7ff fcb4 	bl	8000bf8 <__aeabi_d2f>
 8001290:	4603      	mov	r3, r0
 8001292:	ee07 3a90 	vmov	s15, r3
}
 8001296:	eeb0 0a67 	vmov.f32	s0, s15
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bdb0      	pop	{r4, r5, r7, pc}
 80012a0:	00000000 	.word	0x00000000
 80012a4:	40000000 	.word	0x40000000
 80012a8:	5c91d14e 	.word	0x5c91d14e
 80012ac:	c01e03fe 	.word	0xc01e03fe
 80012b0:	56041893 	.word	0x56041893
 80012b4:	40498d0e 	.word	0x40498d0e
 80012b8:	2bd3c361 	.word	0x2bd3c361
 80012bc:	401f9965 	.word	0x401f9965

080012c0 <f_to_pwm_left>:

float f_to_pwm_left(float f){
 80012c0:	b5b0      	push	{r4, r5, r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	ed87 0a01 	vstr	s0, [r7, #4]
    return -6.7909*pow(f,2) + 48.729*f + 7.6053;
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff f944 	bl	8000558 <__aeabi_f2d>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8001340 <f_to_pwm_left+0x80>
 80012d8:	ec43 2b10 	vmov	d0, r2, r3
 80012dc:	f008 fa80 	bl	80097e0 <pow>
 80012e0:	ec51 0b10 	vmov	r0, r1, d0
 80012e4:	a318      	add	r3, pc, #96	; (adr r3, 8001348 <f_to_pwm_left+0x88>)
 80012e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ea:	f7ff f98d 	bl	8000608 <__aeabi_dmul>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4614      	mov	r4, r2
 80012f4:	461d      	mov	r5, r3
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff f92e 	bl	8000558 <__aeabi_f2d>
 80012fc:	a314      	add	r3, pc, #80	; (adr r3, 8001350 <f_to_pwm_left+0x90>)
 80012fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001302:	f7ff f981 	bl	8000608 <__aeabi_dmul>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4620      	mov	r0, r4
 800130c:	4629      	mov	r1, r5
 800130e:	f7fe ffc5 	bl	800029c <__adddf3>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
 800131a:	a30f      	add	r3, pc, #60	; (adr r3, 8001358 <f_to_pwm_left+0x98>)
 800131c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001320:	f7fe ffbc 	bl	800029c <__adddf3>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4610      	mov	r0, r2
 800132a:	4619      	mov	r1, r3
 800132c:	f7ff fc64 	bl	8000bf8 <__aeabi_d2f>
 8001330:	4603      	mov	r3, r0
 8001332:	ee07 3a90 	vmov	s15, r3
}
 8001336:	eeb0 0a67 	vmov.f32	s0, s15
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bdb0      	pop	{r4, r5, r7, pc}
 8001340:	00000000 	.word	0x00000000
 8001344:	40000000 	.word	0x40000000
 8001348:	b089a027 	.word	0xb089a027
 800134c:	c01b29e1 	.word	0xc01b29e1
 8001350:	df3b645a 	.word	0xdf3b645a
 8001354:	40485d4f 	.word	0x40485d4f
 8001358:	c3611340 	.word	0xc3611340
 800135c:	401e6bd3 	.word	0x401e6bd3

08001360 <set_route_struct>:

void set_route_struct(route_data *d, float start_pos, float set_point, uint32_t time_constant_rad_ms){
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	ed87 0a02 	vstr	s0, [r7, #8]
 800136c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]

    float slope_rad_ms;

    if(set_point-start_pos >= 0.){
 8001372:	ed97 7a01 	vldr	s14, [r7, #4]
 8001376:	edd7 7a02 	vldr	s15, [r7, #8]
 800137a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800137e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001386:	db02      	blt.n	800138e <set_route_struct+0x2e>
        slope_rad_ms = MAX_SLOPE_RAD_MS;
 8001388:	4b20      	ldr	r3, [pc, #128]	; (800140c <set_route_struct+0xac>)
 800138a:	617b      	str	r3, [r7, #20]
 800138c:	e001      	b.n	8001392 <set_route_struct+0x32>
    }
    else{
        slope_rad_ms = -MAX_SLOPE_RAD_MS;
 800138e:	4b20      	ldr	r3, [pc, #128]	; (8001410 <set_route_struct+0xb0>)
 8001390:	617b      	str	r3, [r7, #20]
    }

    d->slope_rad_ms = slope_rad_ms;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	697a      	ldr	r2, [r7, #20]
 8001396:	601a      	str	r2, [r3, #0]
    d->start_pos = start_pos;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	68ba      	ldr	r2, [r7, #8]
 800139c:	605a      	str	r2, [r3, #4]
    d->set_point = set_point;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	609a      	str	r2, [r3, #8]

    d->t0 = HAL_GetTick();
 80013a4:	f000 ff26 	bl	80021f4 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	60da      	str	r2, [r3, #12]
    d->t1 = (uint32_t) ((set_point-start_pos)/slope_rad_ms);
 80013ae:	ed97 7a01 	vldr	s14, [r7, #4]
 80013b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80013b6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80013ba:	ed97 7a05 	vldr	s14, [r7, #20]
 80013be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013c6:	ee17 2a90 	vmov	r2, s15
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	611a      	str	r2, [r3, #16]
    d->t2 = d->t1 + time_constant_rad_ms;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	691a      	ldr	r2, [r3, #16]
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	441a      	add	r2, r3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	615a      	str	r2, [r3, #20]
    d->t3 = d->t2 + 2*d->t1;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	695a      	ldr	r2, [r3, #20]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	441a      	add	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	619a      	str	r2, [r3, #24]
    d->t4 = d->t3 + time_constant_rad_ms;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	699a      	ldr	r2, [r3, #24]
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	441a      	add	r2, r3
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	61da      	str	r2, [r3, #28]
    d->t5 = d->t4 + d->t1;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	69da      	ldr	r2, [r3, #28]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	441a      	add	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	621a      	str	r2, [r3, #32]
    return;
 8001404:	bf00      	nop
}
 8001406:	3718      	adds	r7, #24
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	38d1b717 	.word	0x38d1b717
 8001410:	b8d1b717 	.word	0xb8d1b717

08001414 <route_planner>:

float route_planner(route_data *d){
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
    uint32_t t = HAL_GetTick() - d->t0;
 800141c:	f000 feea 	bl	80021f4 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	60bb      	str	r3, [r7, #8]
    float relative_set_point = 0;
 800142a:	f04f 0300 	mov.w	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]

    if(t >= 0 && t < d->t1){
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	691b      	ldr	r3, [r3, #16]
 8001434:	68ba      	ldr	r2, [r7, #8]
 8001436:	429a      	cmp	r2, r3
 8001438:	d211      	bcs.n	800145e <route_planner+0x4a>
        relative_set_point = d->start_pos + d->slope_rad_ms*t;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	edd3 6a00 	vldr	s13, [r3]
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	ee07 3a90 	vmov	s15, r3
 800144c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001450:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001454:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001458:	edc7 7a03 	vstr	s15, [r7, #12]
 800145c:	e06c      	b.n	8001538 <route_planner+0x124>
    }
    else if(t >= d->t1 && t <d->t2){
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	429a      	cmp	r2, r3
 8001466:	d308      	bcc.n	800147a <route_planner+0x66>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	695b      	ldr	r3, [r3, #20]
 800146c:	68ba      	ldr	r2, [r7, #8]
 800146e:	429a      	cmp	r2, r3
 8001470:	d203      	bcs.n	800147a <route_planner+0x66>
        relative_set_point = d->set_point;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	e05e      	b.n	8001538 <route_planner+0x124>
    }
    else if(t >= d->t2 && t < d->t3){
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	429a      	cmp	r2, r3
 8001482:	d319      	bcc.n	80014b8 <route_planner+0xa4>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	68ba      	ldr	r2, [r7, #8]
 800148a:	429a      	cmp	r2, r3
 800148c:	d214      	bcs.n	80014b8 <route_planner+0xa4>
        relative_set_point = d->set_point - d->slope_rad_ms*(t - d->t2);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	ed93 7a02 	vldr	s14, [r3, #8]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	edd3 6a00 	vldr	s13, [r3]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	ee07 3a90 	vmov	s15, r3
 80014a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014b2:	edc7 7a03 	vstr	s15, [r7, #12]
 80014b6:	e03f      	b.n	8001538 <route_planner+0x124>
    }
    else if (t >= d->t3 && t < d->t4){
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	68ba      	ldr	r2, [r7, #8]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d311      	bcc.n	80014e6 <route_planner+0xd2>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d20c      	bcs.n	80014e6 <route_planner+0xd2>
        relative_set_point = 2*d->start_pos - d->set_point;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80014d2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80014dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e0:	edc7 7a03 	vstr	s15, [r7, #12]
 80014e4:	e028      	b.n	8001538 <route_planner+0x124>
    }
    else if (t >= d->t4 && t < d->t5){
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d320      	bcc.n	8001532 <route_planner+0x11e>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	68ba      	ldr	r2, [r7, #8]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d21b      	bcs.n	8001532 <route_planner+0x11e>
        relative_set_point = 2*d->start_pos - d->set_point + d->slope_rad_ms*(t - d->t4);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001500:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	edd3 7a02 	vldr	s15, [r3, #8]
 800150a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	edd3 6a00 	vldr	s13, [r3]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	69db      	ldr	r3, [r3, #28]
 8001518:	68ba      	ldr	r2, [r7, #8]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	ee07 3a90 	vmov	s15, r3
 8001520:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001524:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001528:	ee77 7a27 	vadd.f32	s15, s14, s15
 800152c:	edc7 7a03 	vstr	s15, [r7, #12]
 8001530:	e002      	b.n	8001538 <route_planner+0x124>
    }
    else{
        relative_set_point = d->start_pos;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	60fb      	str	r3, [r7, #12]
    }
    
    return relative_set_point;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	ee07 3a90 	vmov	s15, r3
}
 800153e:	eeb0 0a67 	vmov.f32	s0, s15
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001548:	b5b0      	push	{r4, r5, r7, lr}
 800154a:	b09c      	sub	sp, #112	; 0x70
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800154e:	f000 fdeb 	bl	8002128 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001552:	f000 f99d 	bl	8001890 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001556:	f000 fb05 	bl	8001b64 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800155a:	f000 fad9 	bl	8001b10 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800155e:	f000 fa03 	bl	8001968 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001562:	f000 fa53 	bl	8001a0c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  blink_led(50);
 8001566:	2032      	movs	r0, #50	; 0x32
 8001568:	f7ff fd5e 	bl	8001028 <blink_led>
  wait_user();
 800156c:	f7ff fd78 	bl	8001060 <wait_user>
  HAL_UART_Transmit(&huart2, "Programa com controle!\r\n", 24, 10000);
 8001570:	f242 7310 	movw	r3, #10000	; 0x2710
 8001574:	2218      	movs	r2, #24
 8001576:	49bc      	ldr	r1, [pc, #752]	; (8001868 <main+0x320>)
 8001578:	48bc      	ldr	r0, [pc, #752]	; (800186c <main+0x324>)
 800157a:	f003 f9f8 	bl	800496e <HAL_UART_Transmit>
  HAL_TIM_PWM_Init(&htim3);
 800157e:	48bc      	ldr	r0, [pc, #752]	; (8001870 <main+0x328>)
 8001580:	f002 fa8d 	bl	8003a9e <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001584:	2100      	movs	r1, #0
 8001586:	48ba      	ldr	r0, [pc, #744]	; (8001870 <main+0x328>)
 8001588:	f002 fae2 	bl	8003b50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800158c:	2104      	movs	r1, #4
 800158e:	48b8      	ldr	r0, [pc, #736]	; (8001870 <main+0x328>)
 8001590:	f002 fade 	bl	8003b50 <HAL_TIM_PWM_Start>
  HAL_Delay(2000);
 8001594:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001598:	f000 fe38 	bl	800220c <HAL_Delay>
  //Motor1 é esquerdo
  PWM_setCombinedValue(&htim3,0,0);
 800159c:	2200      	movs	r2, #0
 800159e:	2100      	movs	r1, #0
 80015a0:	48b3      	ldr	r0, [pc, #716]	; (8001870 <main+0x328>)
 80015a2:	f7ff fdb4 	bl	800110e <PWM_setCombinedValue>
  HAL_Delay(5000);
 80015a6:	f241 3088 	movw	r0, #5000	; 0x1388
 80015aa:	f000 fe2f 	bl	800220c <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_Delay(100);
 80015ae:	2064      	movs	r0, #100	; 0x64
 80015b0:	f000 fe2c 	bl	800220c <HAL_Delay>
  HAL_ADC_Start_IT(&hadc1);
 80015b4:	48af      	ldr	r0, [pc, #700]	; (8001874 <main+0x32c>)
 80015b6:	f000 fe91 	bl	80022dc <HAL_ADC_Start_IT>
  /* DEFINA AQUI AS PARTES DO CONTROLADOR - COMEÇO 1*/

  float angle_rad = 0;
 80015ba:	f04f 0300 	mov.w	r3, #0
 80015be:	65bb      	str	r3, [r7, #88]	; 0x58
  float angle_rad_setpoint = 0;
 80015c0:	f04f 0300 	mov.w	r3, #0
 80015c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  float angle_rad_error = 0;
 80015c6:	f04f 0300 	mov.w	r3, #0
 80015ca:	657b      	str	r3, [r7, #84]	; 0x54
  float anterior_angle_rad_error = 0;
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	66bb      	str	r3, [r7, #104]	; 0x68
  uint8_t pData[16];

  float Kp = 0.112731*7;
 80015d2:	4ba9      	ldr	r3, [pc, #676]	; (8001878 <main+0x330>)
 80015d4:	653b      	str	r3, [r7, #80]	; 0x50
  float Ti = 16.862/2;
 80015d6:	4ba9      	ldr	r3, [pc, #676]	; (800187c <main+0x334>)
 80015d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  float Td = 2.16241/30;
 80015da:	4ba9      	ldr	r3, [pc, #676]	; (8001880 <main+0x338>)
 80015dc:	64bb      	str	r3, [r7, #72]	; 0x48

  float integral = 0;		// Do I need to limit the integral sum? by how much? (CAPPED)
 80015de:	f04f 0300 	mov.w	r3, #0
 80015e2:	667b      	str	r3, [r7, #100]	; 0x64
  float derivate = 0;
 80015e4:	f04f 0300 	mov.w	r3, #0
 80015e8:	647b      	str	r3, [r7, #68]	; 0x44
  float u = 0;
 80015ea:	f04f 0300 	mov.w	r3, #0
 80015ee:	643b      	str	r3, [r7, #64]	; 0x40


  float pwm_l = 0;
 80015f0:	f04f 0300 	mov.w	r3, #0
 80015f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  float pwm_r = 0;
 80015f6:	f04f 0300 	mov.w	r3, #0
 80015fa:	63bb      	str	r3, [r7, #56]	; 0x38

  route_data route_d;
  float true_set_point = 0.5;
 80015fc:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001600:	637b      	str	r3, [r7, #52]	; 0x34

  int first_execution = 1;
 8001602:	2301      	movs	r3, #1
 8001604:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t loop_counter = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	65fb      	str	r3, [r7, #92]	; 0x5c
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(dataready)
 800160a:	4b9e      	ldr	r3, [pc, #632]	; (8001884 <main+0x33c>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0fb      	beq.n	800160a <main+0xc2>
	{
		dataready=0;
 8001612:	4b9c      	ldr	r3, [pc, #624]	; (8001884 <main+0x33c>)
 8001614:	2200      	movs	r2, #0
 8001616:	701a      	strb	r2, [r3, #0]
		angle_rad = ADC_to_rad(angle_in_bits);
 8001618:	4b9b      	ldr	r3, [pc, #620]	; (8001888 <main+0x340>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fda7 	bl	8001170 <ADC_to_rad>
 8001622:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58

		/* DEFINA AQUI AS PARTES DO CONTROLADOR - COMEÇO 2*/
		angle_rad_error = angle_rad_setpoint - angle_rad;
 8001626:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800162a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800162e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001632:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

		integral += trapezoid_area(angle_rad_error, anterior_angle_rad_error);	// Updates integral value
 8001636:	edd7 0a1a 	vldr	s1, [r7, #104]	; 0x68
 800163a:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 800163e:	f7ff fdc3 	bl	80011c8 <trapezoid_area>
 8001642:	eeb0 7a40 	vmov.f32	s14, s0
 8001646:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800164a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800164e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		derivate = (angle_rad_error - anterior_angle_rad_error)/TS;
 8001652:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001656:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800165a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800165e:	ee17 0a90 	vmov	r0, s15
 8001662:	f7fe ff79 	bl	8000558 <__aeabi_f2d>
 8001666:	a37c      	add	r3, pc, #496	; (adr r3, 8001858 <main+0x310>)
 8001668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166c:	f7ff f8f6 	bl	800085c <__aeabi_ddiv>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4610      	mov	r0, r2
 8001676:	4619      	mov	r1, r3
 8001678:	f7ff fabe 	bl	8000bf8 <__aeabi_d2f>
 800167c:	4603      	mov	r3, r0
 800167e:	647b      	str	r3, [r7, #68]	; 0x44

		u = Kp * (angle_rad_error + 1/Ti * integral + Td * derivate);				// saida do controlador em NEWTON
 8001680:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001684:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001688:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800168c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001690:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001694:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001698:	ee37 7a27 	vadd.f32	s14, s14, s15
 800169c:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80016a0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80016a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ac:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80016b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

		pwm_r = f_to_pwm_rigth(M*G/(4*cosf(angle_rad)) + u/2);
 80016b8:	ed97 0a16 	vldr	s0, [r7, #88]	; 0x58
 80016bc:	f008 f900 	bl	80098c0 <cosf>
 80016c0:	eef0 7a40 	vmov.f32	s15, s0
 80016c4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80016c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016cc:	ee17 0a90 	vmov	r0, s15
 80016d0:	f7fe ff42 	bl	8000558 <__aeabi_f2d>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	a161      	add	r1, pc, #388	; (adr r1, 8001860 <main+0x318>)
 80016da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80016de:	f7ff f8bd 	bl	800085c <__aeabi_ddiv>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	4614      	mov	r4, r2
 80016e8:	461d      	mov	r5, r3
 80016ea:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80016ee:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80016f2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80016f6:	ee16 0a90 	vmov	r0, s13
 80016fa:	f7fe ff2d 	bl	8000558 <__aeabi_f2d>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4620      	mov	r0, r4
 8001704:	4629      	mov	r1, r5
 8001706:	f7fe fdc9 	bl	800029c <__adddf3>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4610      	mov	r0, r2
 8001710:	4619      	mov	r1, r3
 8001712:	f7ff fa71 	bl	8000bf8 <__aeabi_d2f>
 8001716:	4603      	mov	r3, r0
 8001718:	ee00 3a10 	vmov	s0, r3
 800171c:	f7ff fd80 	bl	8001220 <f_to_pwm_rigth>
 8001720:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
		pwm_l = f_to_pwm_left(M*G/(4*cosf(angle_rad)) - u/2);
 8001724:	ed97 0a16 	vldr	s0, [r7, #88]	; 0x58
 8001728:	f008 f8ca 	bl	80098c0 <cosf>
 800172c:	eef0 7a40 	vmov.f32	s15, s0
 8001730:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001734:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001738:	ee17 0a90 	vmov	r0, s15
 800173c:	f7fe ff0c 	bl	8000558 <__aeabi_f2d>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	a146      	add	r1, pc, #280	; (adr r1, 8001860 <main+0x318>)
 8001746:	e9d1 0100 	ldrd	r0, r1, [r1]
 800174a:	f7ff f887 	bl	800085c <__aeabi_ddiv>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4614      	mov	r4, r2
 8001754:	461d      	mov	r5, r3
 8001756:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800175a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800175e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001762:	ee16 0a90 	vmov	r0, s13
 8001766:	f7fe fef7 	bl	8000558 <__aeabi_f2d>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4620      	mov	r0, r4
 8001770:	4629      	mov	r1, r5
 8001772:	f7fe fd91 	bl	8000298 <__aeabi_dsub>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4610      	mov	r0, r2
 800177c:	4619      	mov	r1, r3
 800177e:	f7ff fa3b 	bl	8000bf8 <__aeabi_d2f>
 8001782:	4603      	mov	r3, r0
 8001784:	ee00 3a10 	vmov	s0, r3
 8001788:	f7ff fd9a 	bl	80012c0 <f_to_pwm_left>
 800178c:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c

		PWM_setCombinedValue(&htim3, clip((int16_t) (10*pwm_l), 50, 950)
 8001790:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001794:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001798:	ee67 7a87 	vmul.f32	s15, s15, s14
 800179c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017a0:	ee17 3a90 	vmov	r3, s15
 80017a4:	b21b      	sxth	r3, r3
 80017a6:	f240 32b6 	movw	r2, #950	; 0x3b6
 80017aa:	2132      	movs	r1, #50	; 0x32
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fc89 	bl	80010c4 <clip>
 80017b2:	4603      	mov	r3, r0
 80017b4:	b21c      	sxth	r4, r3
				, clip((int16_t) (10*pwm_r), 50, 950));
 80017b6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80017ba:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80017be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017c6:	ee17 3a90 	vmov	r3, s15
 80017ca:	b21b      	sxth	r3, r3
 80017cc:	f240 32b6 	movw	r2, #950	; 0x3b6
 80017d0:	2132      	movs	r1, #50	; 0x32
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff fc76 	bl	80010c4 <clip>
 80017d8:	4603      	mov	r3, r0
		PWM_setCombinedValue(&htim3, clip((int16_t) (10*pwm_l), 50, 950)
 80017da:	b21b      	sxth	r3, r3
 80017dc:	461a      	mov	r2, r3
 80017de:	4621      	mov	r1, r4
 80017e0:	4823      	ldr	r0, [pc, #140]	; (8001870 <main+0x328>)
 80017e2:	f7ff fc94 	bl	800110e <PWM_setCombinedValue>
//		HAL_UART_Transmit(&huart2, pData, 16, 50);
//
//		sprintf(pData, "D[%%] = %.4f \n\r\n\r", pwm_r);
//		HAL_UART_Transmit(&huart2, pData, 16, 50);

		sprintf(pData, "%1.4f \n\r", angle_rad);
 80017e6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80017e8:	f7fe feb6 	bl	8000558 <__aeabi_f2d>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80017f4:	4925      	ldr	r1, [pc, #148]	; (800188c <main+0x344>)
 80017f6:	f004 fb55 	bl	8005ea4 <siprintf>
		HAL_UART_Transmit(&huart2, pData, 16, 50);
 80017fa:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80017fe:	2332      	movs	r3, #50	; 0x32
 8001800:	2210      	movs	r2, #16
 8001802:	481a      	ldr	r0, [pc, #104]	; (800186c <main+0x324>)
 8001804:	f003 f8b3 	bl	800496e <HAL_UART_Transmit>

/////////////////////////////////////////////////////////////////////    END OF DEBUGING    ////

		anterior_angle_rad_error = angle_rad_error;
 8001808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800180a:	66bb      	str	r3, [r7, #104]	; 0x68

		loop_counter += 1;
 800180c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800180e:	3301      	adds	r3, #1
 8001810:	65fb      	str	r3, [r7, #92]	; 0x5c

		if(loop_counter*20 > START_ROUTE_DELAY_MS){
 8001812:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	461a      	mov	r2, r3
 800181e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001822:	429a      	cmp	r2, r3
 8001824:	f67f aef1 	bls.w	800160a <main+0xc2>
			if(first_execution){
 8001828:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00b      	beq.n	8001846 <main+0x2fe>
				set_route_struct(&route_d, angle_rad, true_set_point, 2000);
 800182e:	463b      	mov	r3, r7
 8001830:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001834:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 8001838:	ed97 0a16 	vldr	s0, [r7, #88]	; 0x58
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fd8f 	bl	8001360 <set_route_struct>
				first_execution = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	663b      	str	r3, [r7, #96]	; 0x60
			}
			angle_rad_setpoint = route_planner(&route_d);	// Relative set point
 8001846:	463b      	mov	r3, r7
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fde3 	bl	8001414 <route_planner>
 800184e:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
	if(dataready)
 8001852:	e6da      	b.n	800160a <main+0xc2>
 8001854:	f3af 8000 	nop.w
 8001858:	47ae147b 	.word	0x47ae147b
 800185c:	3f947ae1 	.word	0x3f947ae1
 8001860:	9999999a 	.word	0x9999999a
 8001864:	40039999 	.word	0x40039999
 8001868:	0800b0e0 	.word	0x0800b0e0
 800186c:	20000294 	.word	0x20000294
 8001870:	2000024c 	.word	0x2000024c
 8001874:	20000204 	.word	0x20000204
 8001878:	3f4a0392 	.word	0x3f4a0392
 800187c:	4106e560 	.word	0x4106e560
 8001880:	3d939edb 	.word	0x3d939edb
 8001884:	200002d9 	.word	0x200002d9
 8001888:	200002dc 	.word	0x200002dc
 800188c:	0800b0fc 	.word	0x0800b0fc

08001890 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b094      	sub	sp, #80	; 0x50
 8001894:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001896:	f107 0320 	add.w	r3, r7, #32
 800189a:	2230      	movs	r2, #48	; 0x30
 800189c:	2100      	movs	r1, #0
 800189e:	4618      	mov	r0, r3
 80018a0:	f004 fb63 	bl	8005f6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018a4:	f107 030c 	add.w	r3, r7, #12
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b4:	2300      	movs	r3, #0
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	4b29      	ldr	r3, [pc, #164]	; (8001960 <SystemClock_Config+0xd0>)
 80018ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018bc:	4a28      	ldr	r2, [pc, #160]	; (8001960 <SystemClock_Config+0xd0>)
 80018be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c2:	6413      	str	r3, [r2, #64]	; 0x40
 80018c4:	4b26      	ldr	r3, [pc, #152]	; (8001960 <SystemClock_Config+0xd0>)
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80018d0:	2300      	movs	r3, #0
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	4b23      	ldr	r3, [pc, #140]	; (8001964 <SystemClock_Config+0xd4>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018dc:	4a21      	ldr	r2, [pc, #132]	; (8001964 <SystemClock_Config+0xd4>)
 80018de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018e2:	6013      	str	r3, [r2, #0]
 80018e4:	4b1f      	ldr	r3, [pc, #124]	; (8001964 <SystemClock_Config+0xd4>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018f0:	2302      	movs	r3, #2
 80018f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018f4:	2301      	movs	r3, #1
 80018f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018f8:	2310      	movs	r3, #16
 80018fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018fc:	2302      	movs	r3, #2
 80018fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001900:	2300      	movs	r3, #0
 8001902:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001904:	2310      	movs	r3, #16
 8001906:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001908:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800190c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800190e:	2304      	movs	r3, #4
 8001910:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001912:	2307      	movs	r3, #7
 8001914:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001916:	f107 0320 	add.w	r3, r7, #32
 800191a:	4618      	mov	r0, r3
 800191c:	f001 fbd8 	bl	80030d0 <HAL_RCC_OscConfig>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001926:	f000 f993 	bl	8001c50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800192a:	230f      	movs	r3, #15
 800192c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800192e:	2302      	movs	r3, #2
 8001930:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800193a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800193c:	2300      	movs	r3, #0
 800193e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001940:	f107 030c 	add.w	r3, r7, #12
 8001944:	2102      	movs	r1, #2
 8001946:	4618      	mov	r0, r3
 8001948:	f001 fe3a 	bl	80035c0 <HAL_RCC_ClockConfig>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001952:	f000 f97d 	bl	8001c50 <Error_Handler>
  }
}
 8001956:	bf00      	nop
 8001958:	3750      	adds	r7, #80	; 0x50
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800
 8001964:	40007000 	.word	0x40007000

08001968 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800196e:	463b      	mov	r3, r7
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800197a:	4b22      	ldr	r3, [pc, #136]	; (8001a04 <MX_ADC1_Init+0x9c>)
 800197c:	4a22      	ldr	r2, [pc, #136]	; (8001a08 <MX_ADC1_Init+0xa0>)
 800197e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001980:	4b20      	ldr	r3, [pc, #128]	; (8001a04 <MX_ADC1_Init+0x9c>)
 8001982:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001986:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001988:	4b1e      	ldr	r3, [pc, #120]	; (8001a04 <MX_ADC1_Init+0x9c>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800198e:	4b1d      	ldr	r3, [pc, #116]	; (8001a04 <MX_ADC1_Init+0x9c>)
 8001990:	2200      	movs	r2, #0
 8001992:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001994:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <MX_ADC1_Init+0x9c>)
 8001996:	2201      	movs	r2, #1
 8001998:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800199a:	4b1a      	ldr	r3, [pc, #104]	; (8001a04 <MX_ADC1_Init+0x9c>)
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80019a2:	4b18      	ldr	r3, [pc, #96]	; (8001a04 <MX_ADC1_Init+0x9c>)
 80019a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80019aa:	4b16      	ldr	r3, [pc, #88]	; (8001a04 <MX_ADC1_Init+0x9c>)
 80019ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019b2:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <MX_ADC1_Init+0x9c>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <MX_ADC1_Init+0x9c>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019be:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <MX_ADC1_Init+0x9c>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019c6:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <MX_ADC1_Init+0x9c>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019cc:	480d      	ldr	r0, [pc, #52]	; (8001a04 <MX_ADC1_Init+0x9c>)
 80019ce:	f000 fc41 	bl	8002254 <HAL_ADC_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80019d8:	f000 f93a 	bl	8001c50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80019dc:	2301      	movs	r3, #1
 80019de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80019e0:	2301      	movs	r3, #1
 80019e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80019e4:	2302      	movs	r3, #2
 80019e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019e8:	463b      	mov	r3, r7
 80019ea:	4619      	mov	r1, r3
 80019ec:	4805      	ldr	r0, [pc, #20]	; (8001a04 <MX_ADC1_Init+0x9c>)
 80019ee:	f000 fe65 	bl	80026bc <HAL_ADC_ConfigChannel>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80019f8:	f000 f92a 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019fc:	bf00      	nop
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000204 	.word	0x20000204
 8001a08:	40012000 	.word	0x40012000

08001a0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08e      	sub	sp, #56	; 0x38
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a20:	f107 0320 	add.w	r3, r7, #32
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
 8001a38:	615a      	str	r2, [r3, #20]
 8001a3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a3c:	4b32      	ldr	r3, [pc, #200]	; (8001b08 <MX_TIM3_Init+0xfc>)
 8001a3e:	4a33      	ldr	r2, [pc, #204]	; (8001b0c <MX_TIM3_Init+0x100>)
 8001a40:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001a42:	4b31      	ldr	r3, [pc, #196]	; (8001b08 <MX_TIM3_Init+0xfc>)
 8001a44:	2253      	movs	r2, #83	; 0x53
 8001a46:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a48:	4b2f      	ldr	r3, [pc, #188]	; (8001b08 <MX_TIM3_Init+0xfc>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8001a4e:	4b2e      	ldr	r3, [pc, #184]	; (8001b08 <MX_TIM3_Init+0xfc>)
 8001a50:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001a54:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a56:	4b2c      	ldr	r3, [pc, #176]	; (8001b08 <MX_TIM3_Init+0xfc>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a5c:	4b2a      	ldr	r3, [pc, #168]	; (8001b08 <MX_TIM3_Init+0xfc>)
 8001a5e:	2280      	movs	r2, #128	; 0x80
 8001a60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a62:	4829      	ldr	r0, [pc, #164]	; (8001b08 <MX_TIM3_Init+0xfc>)
 8001a64:	f001 ffcc 	bl	8003a00 <HAL_TIM_Base_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001a6e:	f000 f8ef 	bl	8001c50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a76:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4822      	ldr	r0, [pc, #136]	; (8001b08 <MX_TIM3_Init+0xfc>)
 8001a80:	f002 fae0 	bl	8004044 <HAL_TIM_ConfigClockSource>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001a8a:	f000 f8e1 	bl	8001c50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a8e:	481e      	ldr	r0, [pc, #120]	; (8001b08 <MX_TIM3_Init+0xfc>)
 8001a90:	f002 f805 	bl	8003a9e <HAL_TIM_PWM_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001a9a:	f000 f8d9 	bl	8001c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a9e:	2320      	movs	r3, #32
 8001aa0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001aa6:	f107 0320 	add.w	r3, r7, #32
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4816      	ldr	r0, [pc, #88]	; (8001b08 <MX_TIM3_Init+0xfc>)
 8001aae:	f002 fe8f 	bl	80047d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001ab8:	f000 f8ca 	bl	8001c50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001abc:	2360      	movs	r3, #96	; 0x60
 8001abe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	2200      	movs	r2, #0
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	480d      	ldr	r0, [pc, #52]	; (8001b08 <MX_TIM3_Init+0xfc>)
 8001ad4:	f002 f9f4 	bl	8003ec0 <HAL_TIM_PWM_ConfigChannel>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001ade:	f000 f8b7 	bl	8001c50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ae2:	1d3b      	adds	r3, r7, #4
 8001ae4:	2204      	movs	r2, #4
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4807      	ldr	r0, [pc, #28]	; (8001b08 <MX_TIM3_Init+0xfc>)
 8001aea:	f002 f9e9 	bl	8003ec0 <HAL_TIM_PWM_ConfigChannel>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001af4:	f000 f8ac 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001af8:	4803      	ldr	r0, [pc, #12]	; (8001b08 <MX_TIM3_Init+0xfc>)
 8001afa:	f000 f94b 	bl	8001d94 <HAL_TIM_MspPostInit>

}
 8001afe:	bf00      	nop
 8001b00:	3738      	adds	r7, #56	; 0x38
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	2000024c 	.word	0x2000024c
 8001b0c:	40000400 	.word	0x40000400

08001b10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b14:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <MX_USART2_UART_Init+0x4c>)
 8001b16:	4a12      	ldr	r2, [pc, #72]	; (8001b60 <MX_USART2_UART_Init+0x50>)
 8001b18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b1a:	4b10      	ldr	r3, [pc, #64]	; (8001b5c <MX_USART2_UART_Init+0x4c>)
 8001b1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b22:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <MX_USART2_UART_Init+0x4c>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <MX_USART2_UART_Init+0x4c>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <MX_USART2_UART_Init+0x4c>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b34:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <MX_USART2_UART_Init+0x4c>)
 8001b36:	220c      	movs	r2, #12
 8001b38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b3a:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <MX_USART2_UART_Init+0x4c>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b40:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <MX_USART2_UART_Init+0x4c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b46:	4805      	ldr	r0, [pc, #20]	; (8001b5c <MX_USART2_UART_Init+0x4c>)
 8001b48:	f002 fec4 	bl	80048d4 <HAL_UART_Init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b52:	f000 f87d 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000294 	.word	0x20000294
 8001b60:	40004400 	.word	0x40004400

08001b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08a      	sub	sp, #40	; 0x28
 8001b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6a:	f107 0314 	add.w	r3, r7, #20
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	609a      	str	r2, [r3, #8]
 8001b76:	60da      	str	r2, [r3, #12]
 8001b78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	4b31      	ldr	r3, [pc, #196]	; (8001c44 <MX_GPIO_Init+0xe0>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	4a30      	ldr	r2, [pc, #192]	; (8001c44 <MX_GPIO_Init+0xe0>)
 8001b84:	f043 0304 	orr.w	r3, r3, #4
 8001b88:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8a:	4b2e      	ldr	r3, [pc, #184]	; (8001c44 <MX_GPIO_Init+0xe0>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f003 0304 	and.w	r3, r3, #4
 8001b92:	613b      	str	r3, [r7, #16]
 8001b94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	4b2a      	ldr	r3, [pc, #168]	; (8001c44 <MX_GPIO_Init+0xe0>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	4a29      	ldr	r2, [pc, #164]	; (8001c44 <MX_GPIO_Init+0xe0>)
 8001ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba6:	4b27      	ldr	r3, [pc, #156]	; (8001c44 <MX_GPIO_Init+0xe0>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	4b23      	ldr	r3, [pc, #140]	; (8001c44 <MX_GPIO_Init+0xe0>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	4a22      	ldr	r2, [pc, #136]	; (8001c44 <MX_GPIO_Init+0xe0>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc2:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <MX_GPIO_Init+0xe0>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	607b      	str	r3, [r7, #4]
 8001bd2:	4b1c      	ldr	r3, [pc, #112]	; (8001c44 <MX_GPIO_Init+0xe0>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	4a1b      	ldr	r2, [pc, #108]	; (8001c44 <MX_GPIO_Init+0xe0>)
 8001bd8:	f043 0302 	orr.w	r3, r3, #2
 8001bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bde:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <MX_GPIO_Init+0xe0>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	607b      	str	r3, [r7, #4]
 8001be8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001bea:	2200      	movs	r2, #0
 8001bec:	2120      	movs	r1, #32
 8001bee:	4816      	ldr	r0, [pc, #88]	; (8001c48 <MX_GPIO_Init+0xe4>)
 8001bf0:	f001 fa22 	bl	8003038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001bf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bfa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001bfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4810      	ldr	r0, [pc, #64]	; (8001c4c <MX_GPIO_Init+0xe8>)
 8001c0c:	f001 f890 	bl	8002d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001c10:	2320      	movs	r3, #32
 8001c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c14:	2301      	movs	r3, #1
 8001c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	4619      	mov	r1, r3
 8001c26:	4808      	ldr	r0, [pc, #32]	; (8001c48 <MX_GPIO_Init+0xe4>)
 8001c28:	f001 f882 	bl	8002d30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2100      	movs	r1, #0
 8001c30:	2028      	movs	r0, #40	; 0x28
 8001c32:	f001 f846 	bl	8002cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c36:	2028      	movs	r0, #40	; 0x28
 8001c38:	f001 f85f 	bl	8002cfa <HAL_NVIC_EnableIRQ>

}
 8001c3c:	bf00      	nop
 8001c3e:	3728      	adds	r7, #40	; 0x28
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40020000 	.word	0x40020000
 8001c4c:	40020800 	.word	0x40020800

08001c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c54:	b672      	cpsid	i
}
 8001c56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <Error_Handler+0x8>
	...

08001c5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	607b      	str	r3, [r7, #4]
 8001c66:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <HAL_MspInit+0x4c>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6a:	4a0f      	ldr	r2, [pc, #60]	; (8001ca8 <HAL_MspInit+0x4c>)
 8001c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c70:	6453      	str	r3, [r2, #68]	; 0x44
 8001c72:	4b0d      	ldr	r3, [pc, #52]	; (8001ca8 <HAL_MspInit+0x4c>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c7a:	607b      	str	r3, [r7, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	603b      	str	r3, [r7, #0]
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <HAL_MspInit+0x4c>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	4a08      	ldr	r2, [pc, #32]	; (8001ca8 <HAL_MspInit+0x4c>)
 8001c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_MspInit+0x4c>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c96:	603b      	str	r3, [r7, #0]
 8001c98:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c9a:	2007      	movs	r0, #7
 8001c9c:	f001 f806 	bl	8002cac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ca0:	bf00      	nop
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40023800 	.word	0x40023800

08001cac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08a      	sub	sp, #40	; 0x28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a1b      	ldr	r2, [pc, #108]	; (8001d38 <HAL_ADC_MspInit+0x8c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d12f      	bne.n	8001d2e <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <HAL_ADC_MspInit+0x90>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	4a19      	ldr	r2, [pc, #100]	; (8001d3c <HAL_ADC_MspInit+0x90>)
 8001cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cde:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <HAL_ADC_MspInit+0x90>)
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <HAL_ADC_MspInit+0x90>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	4a12      	ldr	r2, [pc, #72]	; (8001d3c <HAL_ADC_MspInit+0x90>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfa:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <HAL_ADC_MspInit+0x90>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = sensor_Pin;
 8001d06:	2302      	movs	r3, #2
 8001d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(sensor_GPIO_Port, &GPIO_InitStruct);
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	4619      	mov	r1, r3
 8001d18:	4809      	ldr	r0, [pc, #36]	; (8001d40 <HAL_ADC_MspInit+0x94>)
 8001d1a:	f001 f809 	bl	8002d30 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2100      	movs	r1, #0
 8001d22:	2012      	movs	r0, #18
 8001d24:	f000 ffcd 	bl	8002cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001d28:	2012      	movs	r0, #18
 8001d2a:	f000 ffe6 	bl	8002cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d2e:	bf00      	nop
 8001d30:	3728      	adds	r7, #40	; 0x28
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40012000 	.word	0x40012000
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40020000 	.word	0x40020000

08001d44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a0e      	ldr	r2, [pc, #56]	; (8001d8c <HAL_TIM_Base_MspInit+0x48>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d115      	bne.n	8001d82 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <HAL_TIM_Base_MspInit+0x4c>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	4a0c      	ldr	r2, [pc, #48]	; (8001d90 <HAL_TIM_Base_MspInit+0x4c>)
 8001d60:	f043 0302 	orr.w	r3, r3, #2
 8001d64:	6413      	str	r3, [r2, #64]	; 0x40
 8001d66:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <HAL_TIM_Base_MspInit+0x4c>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2100      	movs	r1, #0
 8001d76:	201d      	movs	r0, #29
 8001d78:	f000 ffa3 	bl	8002cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d7c:	201d      	movs	r0, #29
 8001d7e:	f000 ffbc 	bl	8002cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d82:	bf00      	nop
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40000400 	.word	0x40000400
 8001d90:	40023800 	.word	0x40023800

08001d94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 030c 	add.w	r3, r7, #12
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a12      	ldr	r2, [pc, #72]	; (8001dfc <HAL_TIM_MspPostInit+0x68>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d11d      	bne.n	8001df2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <HAL_TIM_MspPostInit+0x6c>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	4a10      	ldr	r2, [pc, #64]	; (8001e00 <HAL_TIM_MspPostInit+0x6c>)
 8001dc0:	f043 0302 	orr.w	r3, r3, #2
 8001dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc6:	4b0e      	ldr	r3, [pc, #56]	; (8001e00 <HAL_TIM_MspPostInit+0x6c>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = motor_esq_Pin|motor_dir_Pin;
 8001dd2:	2330      	movs	r3, #48	; 0x30
 8001dd4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dde:	2300      	movs	r3, #0
 8001de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001de2:	2302      	movs	r3, #2
 8001de4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de6:	f107 030c 	add.w	r3, r7, #12
 8001dea:	4619      	mov	r1, r3
 8001dec:	4805      	ldr	r0, [pc, #20]	; (8001e04 <HAL_TIM_MspPostInit+0x70>)
 8001dee:	f000 ff9f 	bl	8002d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001df2:	bf00      	nop
 8001df4:	3720      	adds	r7, #32
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40000400 	.word	0x40000400
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40020400 	.word	0x40020400

08001e08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08a      	sub	sp, #40	; 0x28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e10:	f107 0314 	add.w	r3, r7, #20
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a19      	ldr	r2, [pc, #100]	; (8001e8c <HAL_UART_MspInit+0x84>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d12b      	bne.n	8001e82 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]
 8001e2e:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <HAL_UART_MspInit+0x88>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	4a17      	ldr	r2, [pc, #92]	; (8001e90 <HAL_UART_MspInit+0x88>)
 8001e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e38:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3a:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <HAL_UART_MspInit+0x88>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e42:	613b      	str	r3, [r7, #16]
 8001e44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <HAL_UART_MspInit+0x88>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	4a10      	ldr	r2, [pc, #64]	; (8001e90 <HAL_UART_MspInit+0x88>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	6313      	str	r3, [r2, #48]	; 0x30
 8001e56:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <HAL_UART_MspInit+0x88>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e62:	230c      	movs	r3, #12
 8001e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e66:	2302      	movs	r3, #2
 8001e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e72:	2307      	movs	r3, #7
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e76:	f107 0314 	add.w	r3, r7, #20
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4805      	ldr	r0, [pc, #20]	; (8001e94 <HAL_UART_MspInit+0x8c>)
 8001e7e:	f000 ff57 	bl	8002d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e82:	bf00      	nop
 8001e84:	3728      	adds	r7, #40	; 0x28
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40004400 	.word	0x40004400
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40020000 	.word	0x40020000

08001e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e9c:	e7fe      	b.n	8001e9c <NMI_Handler+0x4>

08001e9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ea2:	e7fe      	b.n	8001ea2 <HardFault_Handler+0x4>

08001ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ea8:	e7fe      	b.n	8001ea8 <MemManage_Handler+0x4>

08001eaa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eae:	e7fe      	b.n	8001eae <BusFault_Handler+0x4>

08001eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eb4:	e7fe      	b.n	8001eb4 <UsageFault_Handler+0x4>

08001eb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ee4:	f000 f972 	bl	80021cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ee8:	bf00      	nop
 8001eea:	bd80      	pop	{r7, pc}

08001eec <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001ef0:	4802      	ldr	r0, [pc, #8]	; (8001efc <ADC_IRQHandler+0x10>)
 8001ef2:	f000 fab1 	bl	8002458 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000204 	.word	0x20000204

08001f00 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f04:	4802      	ldr	r0, [pc, #8]	; (8001f10 <TIM3_IRQHandler+0x10>)
 8001f06:	f001 fed3 	bl	8003cb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	2000024c 	.word	0x2000024c

08001f14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001f18:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f1c:	f001 f8c0 	bl	80030a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return 1;
 8001f28:	2301      	movs	r3, #1
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <_kill>:

int _kill(int pid, int sig)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f3e:	f004 f867 	bl	8006010 <__errno>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2216      	movs	r2, #22
 8001f46:	601a      	str	r2, [r3, #0]
  return -1;
 8001f48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <_exit>:

void _exit (int status)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7ff ffe7 	bl	8001f34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f66:	e7fe      	b.n	8001f66 <_exit+0x12>

08001f68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]
 8001f78:	e00a      	b.n	8001f90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f7a:	f3af 8000 	nop.w
 8001f7e:	4601      	mov	r1, r0
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	1c5a      	adds	r2, r3, #1
 8001f84:	60ba      	str	r2, [r7, #8]
 8001f86:	b2ca      	uxtb	r2, r1
 8001f88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	dbf0      	blt.n	8001f7a <_read+0x12>
  }

  return len;
 8001f98:	687b      	ldr	r3, [r7, #4]
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3718      	adds	r7, #24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b086      	sub	sp, #24
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	60f8      	str	r0, [r7, #12]
 8001faa:	60b9      	str	r1, [r7, #8]
 8001fac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
 8001fb2:	e009      	b.n	8001fc8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	1c5a      	adds	r2, r3, #1
 8001fb8:	60ba      	str	r2, [r7, #8]
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	617b      	str	r3, [r7, #20]
 8001fc8:	697a      	ldr	r2, [r7, #20]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	dbf1      	blt.n	8001fb4 <_write+0x12>
  }
  return len;
 8001fd0:	687b      	ldr	r3, [r7, #4]
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3718      	adds	r7, #24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <_close>:

int _close(int file)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fe2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002002:	605a      	str	r2, [r3, #4]
  return 0;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <_isatty>:

int _isatty(int file)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800201a:	2301      	movs	r3, #1
}
 800201c:	4618      	mov	r0, r3
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
	...

08002044 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800204c:	4a14      	ldr	r2, [pc, #80]	; (80020a0 <_sbrk+0x5c>)
 800204e:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <_sbrk+0x60>)
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002058:	4b13      	ldr	r3, [pc, #76]	; (80020a8 <_sbrk+0x64>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d102      	bne.n	8002066 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002060:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <_sbrk+0x64>)
 8002062:	4a12      	ldr	r2, [pc, #72]	; (80020ac <_sbrk+0x68>)
 8002064:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002066:	4b10      	ldr	r3, [pc, #64]	; (80020a8 <_sbrk+0x64>)
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4413      	add	r3, r2
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	429a      	cmp	r2, r3
 8002072:	d207      	bcs.n	8002084 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002074:	f003 ffcc 	bl	8006010 <__errno>
 8002078:	4603      	mov	r3, r0
 800207a:	220c      	movs	r2, #12
 800207c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800207e:	f04f 33ff 	mov.w	r3, #4294967295
 8002082:	e009      	b.n	8002098 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002084:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <_sbrk+0x64>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800208a:	4b07      	ldr	r3, [pc, #28]	; (80020a8 <_sbrk+0x64>)
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4413      	add	r3, r2
 8002092:	4a05      	ldr	r2, [pc, #20]	; (80020a8 <_sbrk+0x64>)
 8002094:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002096:	68fb      	ldr	r3, [r7, #12]
}
 8002098:	4618      	mov	r0, r3
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	20018000 	.word	0x20018000
 80020a4:	00000400 	.word	0x00000400
 80020a8:	200002e0 	.word	0x200002e0
 80020ac:	20000438 	.word	0x20000438

080020b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020b4:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <SystemInit+0x20>)
 80020b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ba:	4a05      	ldr	r2, [pc, #20]	; (80020d0 <SystemInit+0x20>)
 80020bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	e000ed00 	.word	0xe000ed00

080020d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800210c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020d8:	480d      	ldr	r0, [pc, #52]	; (8002110 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020da:	490e      	ldr	r1, [pc, #56]	; (8002114 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020dc:	4a0e      	ldr	r2, [pc, #56]	; (8002118 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020e0:	e002      	b.n	80020e8 <LoopCopyDataInit>

080020e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020e6:	3304      	adds	r3, #4

080020e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020ec:	d3f9      	bcc.n	80020e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ee:	4a0b      	ldr	r2, [pc, #44]	; (800211c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020f0:	4c0b      	ldr	r4, [pc, #44]	; (8002120 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020f4:	e001      	b.n	80020fa <LoopFillZerobss>

080020f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020f8:	3204      	adds	r2, #4

080020fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020fc:	d3fb      	bcc.n	80020f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020fe:	f7ff ffd7 	bl	80020b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002102:	f003 ff8b 	bl	800601c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002106:	f7ff fa1f 	bl	8001548 <main>
  bx  lr    
 800210a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800210c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002114:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002118:	0800b958 	.word	0x0800b958
  ldr r2, =_sbss
 800211c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002120:	20000434 	.word	0x20000434

08002124 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002124:	e7fe      	b.n	8002124 <DMA1_Stream0_IRQHandler>
	...

08002128 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800212c:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <HAL_Init+0x40>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a0d      	ldr	r2, [pc, #52]	; (8002168 <HAL_Init+0x40>)
 8002132:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002136:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002138:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <HAL_Init+0x40>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a0a      	ldr	r2, [pc, #40]	; (8002168 <HAL_Init+0x40>)
 800213e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002142:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002144:	4b08      	ldr	r3, [pc, #32]	; (8002168 <HAL_Init+0x40>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a07      	ldr	r2, [pc, #28]	; (8002168 <HAL_Init+0x40>)
 800214a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800214e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002150:	2003      	movs	r0, #3
 8002152:	f000 fdab 	bl	8002cac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002156:	2000      	movs	r0, #0
 8002158:	f000 f808 	bl	800216c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800215c:	f7ff fd7e 	bl	8001c5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40023c00 	.word	0x40023c00

0800216c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002174:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <HAL_InitTick+0x54>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <HAL_InitTick+0x58>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	4619      	mov	r1, r3
 800217e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002182:	fbb3 f3f1 	udiv	r3, r3, r1
 8002186:	fbb2 f3f3 	udiv	r3, r2, r3
 800218a:	4618      	mov	r0, r3
 800218c:	f000 fdc3 	bl	8002d16 <HAL_SYSTICK_Config>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e00e      	b.n	80021b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b0f      	cmp	r3, #15
 800219e:	d80a      	bhi.n	80021b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021a0:	2200      	movs	r2, #0
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	f04f 30ff 	mov.w	r0, #4294967295
 80021a8:	f000 fd8b 	bl	8002cc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021ac:	4a06      	ldr	r2, [pc, #24]	; (80021c8 <HAL_InitTick+0x5c>)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
 80021b4:	e000      	b.n	80021b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20000000 	.word	0x20000000
 80021c4:	20000008 	.word	0x20000008
 80021c8:	20000004 	.word	0x20000004

080021cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <HAL_IncTick+0x20>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	461a      	mov	r2, r3
 80021d6:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <HAL_IncTick+0x24>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4413      	add	r3, r2
 80021dc:	4a04      	ldr	r2, [pc, #16]	; (80021f0 <HAL_IncTick+0x24>)
 80021de:	6013      	str	r3, [r2, #0]
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	20000008 	.word	0x20000008
 80021f0:	200002e4 	.word	0x200002e4

080021f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  return uwTick;
 80021f8:	4b03      	ldr	r3, [pc, #12]	; (8002208 <HAL_GetTick+0x14>)
 80021fa:	681b      	ldr	r3, [r3, #0]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	200002e4 	.word	0x200002e4

0800220c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002214:	f7ff ffee 	bl	80021f4 <HAL_GetTick>
 8002218:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002224:	d005      	beq.n	8002232 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002226:	4b0a      	ldr	r3, [pc, #40]	; (8002250 <HAL_Delay+0x44>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	461a      	mov	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4413      	add	r3, r2
 8002230:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002232:	bf00      	nop
 8002234:	f7ff ffde 	bl	80021f4 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	429a      	cmp	r2, r3
 8002242:	d8f7      	bhi.n	8002234 <HAL_Delay+0x28>
  {
  }
}
 8002244:	bf00      	nop
 8002246:	bf00      	nop
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20000008 	.word	0x20000008

08002254 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800225c:	2300      	movs	r3, #0
 800225e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e033      	b.n	80022d2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	2b00      	cmp	r3, #0
 8002270:	d109      	bne.n	8002286 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7ff fd1a 	bl	8001cac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	f003 0310 	and.w	r3, r3, #16
 800228e:	2b00      	cmp	r3, #0
 8002290:	d118      	bne.n	80022c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800229a:	f023 0302 	bic.w	r3, r3, #2
 800229e:	f043 0202 	orr.w	r2, r3, #2
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 fb2a 	bl	8002900 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	f023 0303 	bic.w	r3, r3, #3
 80022ba:	f043 0201 	orr.w	r2, r3, #1
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	641a      	str	r2, [r3, #64]	; 0x40
 80022c2:	e001      	b.n	80022c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
	...

080022dc <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d101      	bne.n	80022f6 <HAL_ADC_Start_IT+0x1a>
 80022f2:	2302      	movs	r3, #2
 80022f4:	e0a1      	b.n	800243a <HAL_ADC_Start_IT+0x15e>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b01      	cmp	r3, #1
 800230a:	d018      	beq.n	800233e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f042 0201 	orr.w	r2, r2, #1
 800231a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800231c:	4b4a      	ldr	r3, [pc, #296]	; (8002448 <HAL_ADC_Start_IT+0x16c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a4a      	ldr	r2, [pc, #296]	; (800244c <HAL_ADC_Start_IT+0x170>)
 8002322:	fba2 2303 	umull	r2, r3, r2, r3
 8002326:	0c9a      	lsrs	r2, r3, #18
 8002328:	4613      	mov	r3, r2
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	4413      	add	r3, r2
 800232e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002330:	e002      	b.n	8002338 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	3b01      	subs	r3, #1
 8002336:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f9      	bne.n	8002332 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b01      	cmp	r3, #1
 800234a:	d169      	bne.n	8002420 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002350:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002354:	f023 0301 	bic.w	r3, r3, #1
 8002358:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800236a:	2b00      	cmp	r3, #0
 800236c:	d007      	beq.n	800237e <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002376:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800238a:	d106      	bne.n	800239a <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002390:	f023 0206 	bic.w	r2, r3, #6
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	645a      	str	r2, [r3, #68]	; 0x44
 8002398:	e002      	b.n	80023a0 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023a8:	4b29      	ldr	r3, [pc, #164]	; (8002450 <HAL_ADC_Start_IT+0x174>)
 80023aa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80023b4:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023c4:	f043 0320 	orr.w	r3, r3, #32
 80023c8:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f003 031f 	and.w	r3, r3, #31
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10f      	bne.n	80023f6 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d129      	bne.n	8002438 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80023f2:	609a      	str	r2, [r3, #8]
 80023f4:	e020      	b.n	8002438 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a16      	ldr	r2, [pc, #88]	; (8002454 <HAL_ADC_Start_IT+0x178>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d11b      	bne.n	8002438 <HAL_ADC_Start_IT+0x15c>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d114      	bne.n	8002438 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800241c:	609a      	str	r2, [r3, #8]
 800241e:	e00b      	b.n	8002438 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002424:	f043 0210 	orr.w	r2, r3, #16
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002430:	f043 0201 	orr.w	r2, r3, #1
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	20000000 	.word	0x20000000
 800244c:	431bde83 	.word	0x431bde83
 8002450:	40012300 	.word	0x40012300
 8002454:	40012000 	.word	0x40012000

08002458 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	2300      	movs	r3, #0
 8002466:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	f003 0320 	and.w	r3, r3, #32
 8002486:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d049      	beq.n	8002522 <HAL_ADC_IRQHandler+0xca>
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d046      	beq.n	8002522 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	f003 0310 	and.w	r3, r3, #16
 800249c:	2b00      	cmp	r3, #0
 800249e:	d105      	bne.n	80024ac <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d12b      	bne.n	8002512 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d127      	bne.n	8002512 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d006      	beq.n	80024de <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d119      	bne.n	8002512 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0220 	bic.w	r2, r2, #32
 80024ec:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d105      	bne.n	8002512 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	f043 0201 	orr.w	r2, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7fe fdb6 	bl	8001084 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f06f 0212 	mvn.w	r2, #18
 8002520:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002530:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d057      	beq.n	80025e8 <HAL_ADC_IRQHandler+0x190>
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d054      	beq.n	80025e8 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	f003 0310 	and.w	r3, r3, #16
 8002546:	2b00      	cmp	r3, #0
 8002548:	d105      	bne.n	8002556 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d139      	bne.n	80025d8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800256e:	2b00      	cmp	r3, #0
 8002570:	d006      	beq.n	8002580 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800257c:	2b00      	cmp	r3, #0
 800257e:	d12b      	bne.n	80025d8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800258a:	2b00      	cmp	r3, #0
 800258c:	d124      	bne.n	80025d8 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002598:	2b00      	cmp	r3, #0
 800259a:	d11d      	bne.n	80025d8 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d119      	bne.n	80025d8 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025b2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d105      	bne.n	80025d8 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	f043 0201 	orr.w	r2, r3, #1
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 fa8d 	bl	8002af8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f06f 020c 	mvn.w	r2, #12
 80025e6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f6:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d017      	beq.n	800262e <HAL_ADC_IRQHandler+0x1d6>
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d014      	beq.n	800262e <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b01      	cmp	r3, #1
 8002610:	d10d      	bne.n	800262e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f837 	bl	8002692 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f06f 0201 	mvn.w	r2, #1
 800262c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f003 0320 	and.w	r3, r3, #32
 8002634:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800263c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d015      	beq.n	8002670 <HAL_ADC_IRQHandler+0x218>
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d012      	beq.n	8002670 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	f043 0202 	orr.w	r2, r3, #2
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f06f 0220 	mvn.w	r2, #32
 800265e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 f820 	bl	80026a6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f06f 0220 	mvn.w	r2, #32
 800266e:	601a      	str	r2, [r3, #0]
  }
}
 8002670:	bf00      	nop
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002686:	4618      	mov	r0, r3
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
	...

080026bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026c6:	2300      	movs	r3, #0
 80026c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d101      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x1c>
 80026d4:	2302      	movs	r3, #2
 80026d6:	e105      	b.n	80028e4 <HAL_ADC_ConfigChannel+0x228>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b09      	cmp	r3, #9
 80026e6:	d925      	bls.n	8002734 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68d9      	ldr	r1, [r3, #12]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	461a      	mov	r2, r3
 80026f6:	4613      	mov	r3, r2
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	4413      	add	r3, r2
 80026fc:	3b1e      	subs	r3, #30
 80026fe:	2207      	movs	r2, #7
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	43da      	mvns	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	400a      	ands	r2, r1
 800270c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68d9      	ldr	r1, [r3, #12]
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	b29b      	uxth	r3, r3
 800271e:	4618      	mov	r0, r3
 8002720:	4603      	mov	r3, r0
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	4403      	add	r3, r0
 8002726:	3b1e      	subs	r3, #30
 8002728:	409a      	lsls	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	60da      	str	r2, [r3, #12]
 8002732:	e022      	b.n	800277a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6919      	ldr	r1, [r3, #16]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	b29b      	uxth	r3, r3
 8002740:	461a      	mov	r2, r3
 8002742:	4613      	mov	r3, r2
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	4413      	add	r3, r2
 8002748:	2207      	movs	r2, #7
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	43da      	mvns	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	400a      	ands	r2, r1
 8002756:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6919      	ldr	r1, [r3, #16]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	689a      	ldr	r2, [r3, #8]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	b29b      	uxth	r3, r3
 8002768:	4618      	mov	r0, r3
 800276a:	4603      	mov	r3, r0
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	4403      	add	r3, r0
 8002770:	409a      	lsls	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	430a      	orrs	r2, r1
 8002778:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b06      	cmp	r3, #6
 8002780:	d824      	bhi.n	80027cc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	4613      	mov	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	3b05      	subs	r3, #5
 8002794:	221f      	movs	r2, #31
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43da      	mvns	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	400a      	ands	r2, r1
 80027a2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	4618      	mov	r0, r3
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	3b05      	subs	r3, #5
 80027be:	fa00 f203 	lsl.w	r2, r0, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	635a      	str	r2, [r3, #52]	; 0x34
 80027ca:	e04c      	b.n	8002866 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	2b0c      	cmp	r3, #12
 80027d2:	d824      	bhi.n	800281e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	4613      	mov	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4413      	add	r3, r2
 80027e4:	3b23      	subs	r3, #35	; 0x23
 80027e6:	221f      	movs	r2, #31
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	43da      	mvns	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	400a      	ands	r2, r1
 80027f4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	b29b      	uxth	r3, r3
 8002802:	4618      	mov	r0, r3
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	3b23      	subs	r3, #35	; 0x23
 8002810:	fa00 f203 	lsl.w	r2, r0, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	631a      	str	r2, [r3, #48]	; 0x30
 800281c:	e023      	b.n	8002866 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	4613      	mov	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	3b41      	subs	r3, #65	; 0x41
 8002830:	221f      	movs	r2, #31
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43da      	mvns	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	400a      	ands	r2, r1
 800283e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	b29b      	uxth	r3, r3
 800284c:	4618      	mov	r0, r3
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	4613      	mov	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	3b41      	subs	r3, #65	; 0x41
 800285a:	fa00 f203 	lsl.w	r2, r0, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	430a      	orrs	r2, r1
 8002864:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002866:	4b22      	ldr	r3, [pc, #136]	; (80028f0 <HAL_ADC_ConfigChannel+0x234>)
 8002868:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a21      	ldr	r2, [pc, #132]	; (80028f4 <HAL_ADC_ConfigChannel+0x238>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d109      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x1cc>
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2b12      	cmp	r3, #18
 800287a:	d105      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a19      	ldr	r2, [pc, #100]	; (80028f4 <HAL_ADC_ConfigChannel+0x238>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d123      	bne.n	80028da <HAL_ADC_ConfigChannel+0x21e>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2b10      	cmp	r3, #16
 8002898:	d003      	beq.n	80028a2 <HAL_ADC_ConfigChannel+0x1e6>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b11      	cmp	r3, #17
 80028a0:	d11b      	bne.n	80028da <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b10      	cmp	r3, #16
 80028b4:	d111      	bne.n	80028da <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028b6:	4b10      	ldr	r3, [pc, #64]	; (80028f8 <HAL_ADC_ConfigChannel+0x23c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a10      	ldr	r2, [pc, #64]	; (80028fc <HAL_ADC_ConfigChannel+0x240>)
 80028bc:	fba2 2303 	umull	r2, r3, r2, r3
 80028c0:	0c9a      	lsrs	r2, r3, #18
 80028c2:	4613      	mov	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028cc:	e002      	b.n	80028d4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	3b01      	subs	r3, #1
 80028d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f9      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	40012300 	.word	0x40012300
 80028f4:	40012000 	.word	0x40012000
 80028f8:	20000000 	.word	0x20000000
 80028fc:	431bde83 	.word	0x431bde83

08002900 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002908:	4b79      	ldr	r3, [pc, #484]	; (8002af0 <ADC_Init+0x1f0>)
 800290a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	431a      	orrs	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002934:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6859      	ldr	r1, [r3, #4]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	021a      	lsls	r2, r3, #8
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002958:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6859      	ldr	r1, [r3, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	430a      	orrs	r2, r1
 800296a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800297a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6899      	ldr	r1, [r3, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002992:	4a58      	ldr	r2, [pc, #352]	; (8002af4 <ADC_Init+0x1f4>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d022      	beq.n	80029de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689a      	ldr	r2, [r3, #8]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6899      	ldr	r1, [r3, #8]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6899      	ldr	r1, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	609a      	str	r2, [r3, #8]
 80029dc:	e00f      	b.n	80029fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 0202 	bic.w	r2, r2, #2
 8002a0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6899      	ldr	r1, [r3, #8]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	7e1b      	ldrb	r3, [r3, #24]
 8002a18:	005a      	lsls	r2, r3, #1
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d01b      	beq.n	8002a64 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a3a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a4a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6859      	ldr	r1, [r3, #4]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a56:	3b01      	subs	r3, #1
 8002a58:	035a      	lsls	r2, r3, #13
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	605a      	str	r2, [r3, #4]
 8002a62:	e007      	b.n	8002a74 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a72:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a82:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	051a      	lsls	r2, r3, #20
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002aa8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6899      	ldr	r1, [r3, #8]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ab6:	025a      	lsls	r2, r3, #9
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689a      	ldr	r2, [r3, #8]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ace:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6899      	ldr	r1, [r3, #8]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	029a      	lsls	r2, r3, #10
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	609a      	str	r2, [r3, #8]
}
 8002ae4:	bf00      	nop
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	40012300 	.word	0x40012300
 8002af4:	0f000001 	.word	0x0f000001

08002af8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <__NVIC_SetPriorityGrouping+0x44>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b28:	4013      	ands	r3, r2
 8002b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b3e:	4a04      	ldr	r2, [pc, #16]	; (8002b50 <__NVIC_SetPriorityGrouping+0x44>)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	60d3      	str	r3, [r2, #12]
}
 8002b44:	bf00      	nop
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	e000ed00 	.word	0xe000ed00

08002b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b58:	4b04      	ldr	r3, [pc, #16]	; (8002b6c <__NVIC_GetPriorityGrouping+0x18>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	0a1b      	lsrs	r3, r3, #8
 8002b5e:	f003 0307 	and.w	r3, r3, #7
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	e000ed00 	.word	0xe000ed00

08002b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	db0b      	blt.n	8002b9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	f003 021f 	and.w	r2, r3, #31
 8002b88:	4907      	ldr	r1, [pc, #28]	; (8002ba8 <__NVIC_EnableIRQ+0x38>)
 8002b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8e:	095b      	lsrs	r3, r3, #5
 8002b90:	2001      	movs	r0, #1
 8002b92:	fa00 f202 	lsl.w	r2, r0, r2
 8002b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	e000e100 	.word	0xe000e100

08002bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	6039      	str	r1, [r7, #0]
 8002bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	db0a      	blt.n	8002bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	490c      	ldr	r1, [pc, #48]	; (8002bf8 <__NVIC_SetPriority+0x4c>)
 8002bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bca:	0112      	lsls	r2, r2, #4
 8002bcc:	b2d2      	uxtb	r2, r2
 8002bce:	440b      	add	r3, r1
 8002bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bd4:	e00a      	b.n	8002bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	4908      	ldr	r1, [pc, #32]	; (8002bfc <__NVIC_SetPriority+0x50>)
 8002bdc:	79fb      	ldrb	r3, [r7, #7]
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	3b04      	subs	r3, #4
 8002be4:	0112      	lsls	r2, r2, #4
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	440b      	add	r3, r1
 8002bea:	761a      	strb	r2, [r3, #24]
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	e000e100 	.word	0xe000e100
 8002bfc:	e000ed00 	.word	0xe000ed00

08002c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b089      	sub	sp, #36	; 0x24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f1c3 0307 	rsb	r3, r3, #7
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	bf28      	it	cs
 8002c1e:	2304      	movcs	r3, #4
 8002c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	3304      	adds	r3, #4
 8002c26:	2b06      	cmp	r3, #6
 8002c28:	d902      	bls.n	8002c30 <NVIC_EncodePriority+0x30>
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	3b03      	subs	r3, #3
 8002c2e:	e000      	b.n	8002c32 <NVIC_EncodePriority+0x32>
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c34:	f04f 32ff 	mov.w	r2, #4294967295
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43da      	mvns	r2, r3
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	401a      	ands	r2, r3
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c48:	f04f 31ff 	mov.w	r1, #4294967295
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c52:	43d9      	mvns	r1, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c58:	4313      	orrs	r3, r2
         );
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3724      	adds	r7, #36	; 0x24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
	...

08002c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c78:	d301      	bcc.n	8002c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e00f      	b.n	8002c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ca8 <SysTick_Config+0x40>)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c86:	210f      	movs	r1, #15
 8002c88:	f04f 30ff 	mov.w	r0, #4294967295
 8002c8c:	f7ff ff8e 	bl	8002bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c90:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <SysTick_Config+0x40>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c96:	4b04      	ldr	r3, [pc, #16]	; (8002ca8 <SysTick_Config+0x40>)
 8002c98:	2207      	movs	r2, #7
 8002c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	e000e010 	.word	0xe000e010

08002cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7ff ff29 	bl	8002b0c <__NVIC_SetPriorityGrouping>
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b086      	sub	sp, #24
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	4603      	mov	r3, r0
 8002cca:	60b9      	str	r1, [r7, #8]
 8002ccc:	607a      	str	r2, [r7, #4]
 8002cce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cd4:	f7ff ff3e 	bl	8002b54 <__NVIC_GetPriorityGrouping>
 8002cd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	68b9      	ldr	r1, [r7, #8]
 8002cde:	6978      	ldr	r0, [r7, #20]
 8002ce0:	f7ff ff8e 	bl	8002c00 <NVIC_EncodePriority>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cea:	4611      	mov	r1, r2
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff ff5d 	bl	8002bac <__NVIC_SetPriority>
}
 8002cf2:	bf00      	nop
 8002cf4:	3718      	adds	r7, #24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b082      	sub	sp, #8
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	4603      	mov	r3, r0
 8002d02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff ff31 	bl	8002b70 <__NVIC_EnableIRQ>
}
 8002d0e:	bf00      	nop
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b082      	sub	sp, #8
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7ff ffa2 	bl	8002c68 <SysTick_Config>
 8002d24:	4603      	mov	r3, r0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b089      	sub	sp, #36	; 0x24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d46:	2300      	movs	r3, #0
 8002d48:	61fb      	str	r3, [r7, #28]
 8002d4a:	e159      	b.n	8003000 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	f040 8148 	bne.w	8002ffa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f003 0303 	and.w	r3, r3, #3
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d005      	beq.n	8002d82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d130      	bne.n	8002de4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	2203      	movs	r2, #3
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	43db      	mvns	r3, r3
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4013      	ands	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002db8:	2201      	movs	r2, #1
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	091b      	lsrs	r3, r3, #4
 8002dce:	f003 0201 	and.w	r2, r3, #1
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 0303 	and.w	r3, r3, #3
 8002dec:	2b03      	cmp	r3, #3
 8002dee:	d017      	beq.n	8002e20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	2203      	movs	r2, #3
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4013      	ands	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f003 0303 	and.w	r3, r3, #3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d123      	bne.n	8002e74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	08da      	lsrs	r2, r3, #3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3208      	adds	r2, #8
 8002e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	220f      	movs	r2, #15
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	691a      	ldr	r2, [r3, #16]
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	08da      	lsrs	r2, r3, #3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3208      	adds	r2, #8
 8002e6e:	69b9      	ldr	r1, [r7, #24]
 8002e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	2203      	movs	r2, #3
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f003 0203 	and.w	r2, r3, #3
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 80a2 	beq.w	8002ffa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	4b57      	ldr	r3, [pc, #348]	; (8003018 <HAL_GPIO_Init+0x2e8>)
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebe:	4a56      	ldr	r2, [pc, #344]	; (8003018 <HAL_GPIO_Init+0x2e8>)
 8002ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ec6:	4b54      	ldr	r3, [pc, #336]	; (8003018 <HAL_GPIO_Init+0x2e8>)
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ed2:	4a52      	ldr	r2, [pc, #328]	; (800301c <HAL_GPIO_Init+0x2ec>)
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	089b      	lsrs	r3, r3, #2
 8002ed8:	3302      	adds	r3, #2
 8002eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	220f      	movs	r2, #15
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a49      	ldr	r2, [pc, #292]	; (8003020 <HAL_GPIO_Init+0x2f0>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d019      	beq.n	8002f32 <HAL_GPIO_Init+0x202>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a48      	ldr	r2, [pc, #288]	; (8003024 <HAL_GPIO_Init+0x2f4>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d013      	beq.n	8002f2e <HAL_GPIO_Init+0x1fe>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a47      	ldr	r2, [pc, #284]	; (8003028 <HAL_GPIO_Init+0x2f8>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d00d      	beq.n	8002f2a <HAL_GPIO_Init+0x1fa>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a46      	ldr	r2, [pc, #280]	; (800302c <HAL_GPIO_Init+0x2fc>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d007      	beq.n	8002f26 <HAL_GPIO_Init+0x1f6>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a45      	ldr	r2, [pc, #276]	; (8003030 <HAL_GPIO_Init+0x300>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d101      	bne.n	8002f22 <HAL_GPIO_Init+0x1f2>
 8002f1e:	2304      	movs	r3, #4
 8002f20:	e008      	b.n	8002f34 <HAL_GPIO_Init+0x204>
 8002f22:	2307      	movs	r3, #7
 8002f24:	e006      	b.n	8002f34 <HAL_GPIO_Init+0x204>
 8002f26:	2303      	movs	r3, #3
 8002f28:	e004      	b.n	8002f34 <HAL_GPIO_Init+0x204>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e002      	b.n	8002f34 <HAL_GPIO_Init+0x204>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <HAL_GPIO_Init+0x204>
 8002f32:	2300      	movs	r3, #0
 8002f34:	69fa      	ldr	r2, [r7, #28]
 8002f36:	f002 0203 	and.w	r2, r2, #3
 8002f3a:	0092      	lsls	r2, r2, #2
 8002f3c:	4093      	lsls	r3, r2
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f44:	4935      	ldr	r1, [pc, #212]	; (800301c <HAL_GPIO_Init+0x2ec>)
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	089b      	lsrs	r3, r3, #2
 8002f4a:	3302      	adds	r3, #2
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f52:	4b38      	ldr	r3, [pc, #224]	; (8003034 <HAL_GPIO_Init+0x304>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f76:	4a2f      	ldr	r2, [pc, #188]	; (8003034 <HAL_GPIO_Init+0x304>)
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f7c:	4b2d      	ldr	r3, [pc, #180]	; (8003034 <HAL_GPIO_Init+0x304>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	43db      	mvns	r3, r3
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fa0:	4a24      	ldr	r2, [pc, #144]	; (8003034 <HAL_GPIO_Init+0x304>)
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fa6:	4b23      	ldr	r3, [pc, #140]	; (8003034 <HAL_GPIO_Init+0x304>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fca:	4a1a      	ldr	r2, [pc, #104]	; (8003034 <HAL_GPIO_Init+0x304>)
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fd0:	4b18      	ldr	r3, [pc, #96]	; (8003034 <HAL_GPIO_Init+0x304>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ff4:	4a0f      	ldr	r2, [pc, #60]	; (8003034 <HAL_GPIO_Init+0x304>)
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	61fb      	str	r3, [r7, #28]
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	2b0f      	cmp	r3, #15
 8003004:	f67f aea2 	bls.w	8002d4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003008:	bf00      	nop
 800300a:	bf00      	nop
 800300c:	3724      	adds	r7, #36	; 0x24
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40023800 	.word	0x40023800
 800301c:	40013800 	.word	0x40013800
 8003020:	40020000 	.word	0x40020000
 8003024:	40020400 	.word	0x40020400
 8003028:	40020800 	.word	0x40020800
 800302c:	40020c00 	.word	0x40020c00
 8003030:	40021000 	.word	0x40021000
 8003034:	40013c00 	.word	0x40013c00

08003038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	807b      	strh	r3, [r7, #2]
 8003044:	4613      	mov	r3, r2
 8003046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003048:	787b      	ldrb	r3, [r7, #1]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800304e:	887a      	ldrh	r2, [r7, #2]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003054:	e003      	b.n	800305e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003056:	887b      	ldrh	r3, [r7, #2]
 8003058:	041a      	lsls	r2, r3, #16
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	619a      	str	r2, [r3, #24]
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800306a:	b480      	push	{r7}
 800306c:	b085      	sub	sp, #20
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	460b      	mov	r3, r1
 8003074:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800307c:	887a      	ldrh	r2, [r7, #2]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	4013      	ands	r3, r2
 8003082:	041a      	lsls	r2, r3, #16
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	43d9      	mvns	r1, r3
 8003088:	887b      	ldrh	r3, [r7, #2]
 800308a:	400b      	ands	r3, r1
 800308c:	431a      	orrs	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	619a      	str	r2, [r3, #24]
}
 8003092:	bf00      	nop
 8003094:	3714      	adds	r7, #20
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
	...

080030a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80030aa:	4b08      	ldr	r3, [pc, #32]	; (80030cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030ac:	695a      	ldr	r2, [r3, #20]
 80030ae:	88fb      	ldrh	r3, [r7, #6]
 80030b0:	4013      	ands	r3, r2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d006      	beq.n	80030c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030b6:	4a05      	ldr	r2, [pc, #20]	; (80030cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030b8:	88fb      	ldrh	r3, [r7, #6]
 80030ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030bc:	88fb      	ldrh	r3, [r7, #6]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fd ff9e 	bl	8001000 <HAL_GPIO_EXTI_Callback>
  }
}
 80030c4:	bf00      	nop
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40013c00 	.word	0x40013c00

080030d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e267      	b.n	80035b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d075      	beq.n	80031da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030ee:	4b88      	ldr	r3, [pc, #544]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 030c 	and.w	r3, r3, #12
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	d00c      	beq.n	8003114 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030fa:	4b85      	ldr	r3, [pc, #532]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003102:	2b08      	cmp	r3, #8
 8003104:	d112      	bne.n	800312c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003106:	4b82      	ldr	r3, [pc, #520]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800310e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003112:	d10b      	bne.n	800312c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003114:	4b7e      	ldr	r3, [pc, #504]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d05b      	beq.n	80031d8 <HAL_RCC_OscConfig+0x108>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d157      	bne.n	80031d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e242      	b.n	80035b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003134:	d106      	bne.n	8003144 <HAL_RCC_OscConfig+0x74>
 8003136:	4b76      	ldr	r3, [pc, #472]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a75      	ldr	r2, [pc, #468]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 800313c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	e01d      	b.n	8003180 <HAL_RCC_OscConfig+0xb0>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800314c:	d10c      	bne.n	8003168 <HAL_RCC_OscConfig+0x98>
 800314e:	4b70      	ldr	r3, [pc, #448]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a6f      	ldr	r2, [pc, #444]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 8003154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	4b6d      	ldr	r3, [pc, #436]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a6c      	ldr	r2, [pc, #432]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 8003160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	e00b      	b.n	8003180 <HAL_RCC_OscConfig+0xb0>
 8003168:	4b69      	ldr	r3, [pc, #420]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a68      	ldr	r2, [pc, #416]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 800316e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003172:	6013      	str	r3, [r2, #0]
 8003174:	4b66      	ldr	r3, [pc, #408]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a65      	ldr	r2, [pc, #404]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 800317a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800317e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d013      	beq.n	80031b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003188:	f7ff f834 	bl	80021f4 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003190:	f7ff f830 	bl	80021f4 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b64      	cmp	r3, #100	; 0x64
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e207      	b.n	80035b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a2:	4b5b      	ldr	r3, [pc, #364]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0f0      	beq.n	8003190 <HAL_RCC_OscConfig+0xc0>
 80031ae:	e014      	b.n	80031da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b0:	f7ff f820 	bl	80021f4 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031b8:	f7ff f81c 	bl	80021f4 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b64      	cmp	r3, #100	; 0x64
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e1f3      	b.n	80035b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ca:	4b51      	ldr	r3, [pc, #324]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f0      	bne.n	80031b8 <HAL_RCC_OscConfig+0xe8>
 80031d6:	e000      	b.n	80031da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d063      	beq.n	80032ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031e6:	4b4a      	ldr	r3, [pc, #296]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 030c 	and.w	r3, r3, #12
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00b      	beq.n	800320a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031f2:	4b47      	ldr	r3, [pc, #284]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031fa:	2b08      	cmp	r3, #8
 80031fc:	d11c      	bne.n	8003238 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031fe:	4b44      	ldr	r3, [pc, #272]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d116      	bne.n	8003238 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800320a:	4b41      	ldr	r3, [pc, #260]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d005      	beq.n	8003222 <HAL_RCC_OscConfig+0x152>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d001      	beq.n	8003222 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e1c7      	b.n	80035b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003222:	4b3b      	ldr	r3, [pc, #236]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	4937      	ldr	r1, [pc, #220]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 8003232:	4313      	orrs	r3, r2
 8003234:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003236:	e03a      	b.n	80032ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d020      	beq.n	8003282 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003240:	4b34      	ldr	r3, [pc, #208]	; (8003314 <HAL_RCC_OscConfig+0x244>)
 8003242:	2201      	movs	r2, #1
 8003244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003246:	f7fe ffd5 	bl	80021f4 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800324c:	e008      	b.n	8003260 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800324e:	f7fe ffd1 	bl	80021f4 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e1a8      	b.n	80035b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003260:	4b2b      	ldr	r3, [pc, #172]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0f0      	beq.n	800324e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800326c:	4b28      	ldr	r3, [pc, #160]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	4925      	ldr	r1, [pc, #148]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 800327c:	4313      	orrs	r3, r2
 800327e:	600b      	str	r3, [r1, #0]
 8003280:	e015      	b.n	80032ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003282:	4b24      	ldr	r3, [pc, #144]	; (8003314 <HAL_RCC_OscConfig+0x244>)
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003288:	f7fe ffb4 	bl	80021f4 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003290:	f7fe ffb0 	bl	80021f4 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e187      	b.n	80035b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032a2:	4b1b      	ldr	r3, [pc, #108]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f0      	bne.n	8003290 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0308 	and.w	r3, r3, #8
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d036      	beq.n	8003328 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d016      	beq.n	80032f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032c2:	4b15      	ldr	r3, [pc, #84]	; (8003318 <HAL_RCC_OscConfig+0x248>)
 80032c4:	2201      	movs	r2, #1
 80032c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c8:	f7fe ff94 	bl	80021f4 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032d0:	f7fe ff90 	bl	80021f4 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e167      	b.n	80035b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032e2:	4b0b      	ldr	r3, [pc, #44]	; (8003310 <HAL_RCC_OscConfig+0x240>)
 80032e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0f0      	beq.n	80032d0 <HAL_RCC_OscConfig+0x200>
 80032ee:	e01b      	b.n	8003328 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032f0:	4b09      	ldr	r3, [pc, #36]	; (8003318 <HAL_RCC_OscConfig+0x248>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f6:	f7fe ff7d 	bl	80021f4 <HAL_GetTick>
 80032fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032fc:	e00e      	b.n	800331c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032fe:	f7fe ff79 	bl	80021f4 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d907      	bls.n	800331c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e150      	b.n	80035b2 <HAL_RCC_OscConfig+0x4e2>
 8003310:	40023800 	.word	0x40023800
 8003314:	42470000 	.word	0x42470000
 8003318:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800331c:	4b88      	ldr	r3, [pc, #544]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 800331e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1ea      	bne.n	80032fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 8097 	beq.w	8003464 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003336:	2300      	movs	r3, #0
 8003338:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800333a:	4b81      	ldr	r3, [pc, #516]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10f      	bne.n	8003366 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003346:	2300      	movs	r3, #0
 8003348:	60bb      	str	r3, [r7, #8]
 800334a:	4b7d      	ldr	r3, [pc, #500]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	4a7c      	ldr	r2, [pc, #496]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 8003350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003354:	6413      	str	r3, [r2, #64]	; 0x40
 8003356:	4b7a      	ldr	r3, [pc, #488]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335e:	60bb      	str	r3, [r7, #8]
 8003360:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003362:	2301      	movs	r3, #1
 8003364:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003366:	4b77      	ldr	r3, [pc, #476]	; (8003544 <HAL_RCC_OscConfig+0x474>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336e:	2b00      	cmp	r3, #0
 8003370:	d118      	bne.n	80033a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003372:	4b74      	ldr	r3, [pc, #464]	; (8003544 <HAL_RCC_OscConfig+0x474>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a73      	ldr	r2, [pc, #460]	; (8003544 <HAL_RCC_OscConfig+0x474>)
 8003378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800337c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800337e:	f7fe ff39 	bl	80021f4 <HAL_GetTick>
 8003382:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003384:	e008      	b.n	8003398 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003386:	f7fe ff35 	bl	80021f4 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e10c      	b.n	80035b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003398:	4b6a      	ldr	r3, [pc, #424]	; (8003544 <HAL_RCC_OscConfig+0x474>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0f0      	beq.n	8003386 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d106      	bne.n	80033ba <HAL_RCC_OscConfig+0x2ea>
 80033ac:	4b64      	ldr	r3, [pc, #400]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 80033ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b0:	4a63      	ldr	r2, [pc, #396]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 80033b2:	f043 0301 	orr.w	r3, r3, #1
 80033b6:	6713      	str	r3, [r2, #112]	; 0x70
 80033b8:	e01c      	b.n	80033f4 <HAL_RCC_OscConfig+0x324>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	2b05      	cmp	r3, #5
 80033c0:	d10c      	bne.n	80033dc <HAL_RCC_OscConfig+0x30c>
 80033c2:	4b5f      	ldr	r3, [pc, #380]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 80033c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c6:	4a5e      	ldr	r2, [pc, #376]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 80033c8:	f043 0304 	orr.w	r3, r3, #4
 80033cc:	6713      	str	r3, [r2, #112]	; 0x70
 80033ce:	4b5c      	ldr	r3, [pc, #368]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 80033d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d2:	4a5b      	ldr	r2, [pc, #364]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 80033d4:	f043 0301 	orr.w	r3, r3, #1
 80033d8:	6713      	str	r3, [r2, #112]	; 0x70
 80033da:	e00b      	b.n	80033f4 <HAL_RCC_OscConfig+0x324>
 80033dc:	4b58      	ldr	r3, [pc, #352]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 80033de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e0:	4a57      	ldr	r2, [pc, #348]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 80033e2:	f023 0301 	bic.w	r3, r3, #1
 80033e6:	6713      	str	r3, [r2, #112]	; 0x70
 80033e8:	4b55      	ldr	r3, [pc, #340]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 80033ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ec:	4a54      	ldr	r2, [pc, #336]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 80033ee:	f023 0304 	bic.w	r3, r3, #4
 80033f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d015      	beq.n	8003428 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fc:	f7fe fefa 	bl	80021f4 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003402:	e00a      	b.n	800341a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003404:	f7fe fef6 	bl	80021f4 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003412:	4293      	cmp	r3, r2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e0cb      	b.n	80035b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800341a:	4b49      	ldr	r3, [pc, #292]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 800341c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0ee      	beq.n	8003404 <HAL_RCC_OscConfig+0x334>
 8003426:	e014      	b.n	8003452 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003428:	f7fe fee4 	bl	80021f4 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800342e:	e00a      	b.n	8003446 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003430:	f7fe fee0 	bl	80021f4 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	f241 3288 	movw	r2, #5000	; 0x1388
 800343e:	4293      	cmp	r3, r2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e0b5      	b.n	80035b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003446:	4b3e      	ldr	r3, [pc, #248]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 8003448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1ee      	bne.n	8003430 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003452:	7dfb      	ldrb	r3, [r7, #23]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d105      	bne.n	8003464 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003458:	4b39      	ldr	r3, [pc, #228]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	4a38      	ldr	r2, [pc, #224]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 800345e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003462:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	2b00      	cmp	r3, #0
 800346a:	f000 80a1 	beq.w	80035b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800346e:	4b34      	ldr	r3, [pc, #208]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 030c 	and.w	r3, r3, #12
 8003476:	2b08      	cmp	r3, #8
 8003478:	d05c      	beq.n	8003534 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	2b02      	cmp	r3, #2
 8003480:	d141      	bne.n	8003506 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003482:	4b31      	ldr	r3, [pc, #196]	; (8003548 <HAL_RCC_OscConfig+0x478>)
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003488:	f7fe feb4 	bl	80021f4 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003490:	f7fe feb0 	bl	80021f4 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e087      	b.n	80035b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a2:	4b27      	ldr	r3, [pc, #156]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f0      	bne.n	8003490 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	69da      	ldr	r2, [r3, #28]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	019b      	lsls	r3, r3, #6
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c4:	085b      	lsrs	r3, r3, #1
 80034c6:	3b01      	subs	r3, #1
 80034c8:	041b      	lsls	r3, r3, #16
 80034ca:	431a      	orrs	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d0:	061b      	lsls	r3, r3, #24
 80034d2:	491b      	ldr	r1, [pc, #108]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034d8:	4b1b      	ldr	r3, [pc, #108]	; (8003548 <HAL_RCC_OscConfig+0x478>)
 80034da:	2201      	movs	r2, #1
 80034dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034de:	f7fe fe89 	bl	80021f4 <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034e6:	f7fe fe85 	bl	80021f4 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e05c      	b.n	80035b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034f8:	4b11      	ldr	r3, [pc, #68]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0f0      	beq.n	80034e6 <HAL_RCC_OscConfig+0x416>
 8003504:	e054      	b.n	80035b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003506:	4b10      	ldr	r3, [pc, #64]	; (8003548 <HAL_RCC_OscConfig+0x478>)
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350c:	f7fe fe72 	bl	80021f4 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003514:	f7fe fe6e 	bl	80021f4 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e045      	b.n	80035b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003526:	4b06      	ldr	r3, [pc, #24]	; (8003540 <HAL_RCC_OscConfig+0x470>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f0      	bne.n	8003514 <HAL_RCC_OscConfig+0x444>
 8003532:	e03d      	b.n	80035b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d107      	bne.n	800354c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e038      	b.n	80035b2 <HAL_RCC_OscConfig+0x4e2>
 8003540:	40023800 	.word	0x40023800
 8003544:	40007000 	.word	0x40007000
 8003548:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800354c:	4b1b      	ldr	r3, [pc, #108]	; (80035bc <HAL_RCC_OscConfig+0x4ec>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d028      	beq.n	80035ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003564:	429a      	cmp	r2, r3
 8003566:	d121      	bne.n	80035ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003572:	429a      	cmp	r2, r3
 8003574:	d11a      	bne.n	80035ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800357c:	4013      	ands	r3, r2
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003582:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003584:	4293      	cmp	r3, r2
 8003586:	d111      	bne.n	80035ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003592:	085b      	lsrs	r3, r3, #1
 8003594:	3b01      	subs	r3, #1
 8003596:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003598:	429a      	cmp	r2, r3
 800359a:	d107      	bne.n	80035ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d001      	beq.n	80035b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e000      	b.n	80035b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3718      	adds	r7, #24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	40023800 	.word	0x40023800

080035c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e0cc      	b.n	800376e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035d4:	4b68      	ldr	r3, [pc, #416]	; (8003778 <HAL_RCC_ClockConfig+0x1b8>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0307 	and.w	r3, r3, #7
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d90c      	bls.n	80035fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e2:	4b65      	ldr	r3, [pc, #404]	; (8003778 <HAL_RCC_ClockConfig+0x1b8>)
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	b2d2      	uxtb	r2, r2
 80035e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ea:	4b63      	ldr	r3, [pc, #396]	; (8003778 <HAL_RCC_ClockConfig+0x1b8>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d001      	beq.n	80035fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e0b8      	b.n	800376e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d020      	beq.n	800364a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b00      	cmp	r3, #0
 8003612:	d005      	beq.n	8003620 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003614:	4b59      	ldr	r3, [pc, #356]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	4a58      	ldr	r2, [pc, #352]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800361e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0308 	and.w	r3, r3, #8
 8003628:	2b00      	cmp	r3, #0
 800362a:	d005      	beq.n	8003638 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800362c:	4b53      	ldr	r3, [pc, #332]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	4a52      	ldr	r2, [pc, #328]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 8003632:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003636:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003638:	4b50      	ldr	r3, [pc, #320]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	494d      	ldr	r1, [pc, #308]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 8003646:	4313      	orrs	r3, r2
 8003648:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d044      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d107      	bne.n	800366e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800365e:	4b47      	ldr	r3, [pc, #284]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d119      	bne.n	800369e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e07f      	b.n	800376e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2b02      	cmp	r3, #2
 8003674:	d003      	beq.n	800367e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800367a:	2b03      	cmp	r3, #3
 800367c:	d107      	bne.n	800368e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800367e:	4b3f      	ldr	r3, [pc, #252]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d109      	bne.n	800369e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e06f      	b.n	800376e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800368e:	4b3b      	ldr	r3, [pc, #236]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e067      	b.n	800376e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800369e:	4b37      	ldr	r3, [pc, #220]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f023 0203 	bic.w	r2, r3, #3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	4934      	ldr	r1, [pc, #208]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036b0:	f7fe fda0 	bl	80021f4 <HAL_GetTick>
 80036b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b6:	e00a      	b.n	80036ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036b8:	f7fe fd9c 	bl	80021f4 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e04f      	b.n	800376e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ce:	4b2b      	ldr	r3, [pc, #172]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 020c 	and.w	r2, r3, #12
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	429a      	cmp	r2, r3
 80036de:	d1eb      	bne.n	80036b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036e0:	4b25      	ldr	r3, [pc, #148]	; (8003778 <HAL_RCC_ClockConfig+0x1b8>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d20c      	bcs.n	8003708 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ee:	4b22      	ldr	r3, [pc, #136]	; (8003778 <HAL_RCC_ClockConfig+0x1b8>)
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	b2d2      	uxtb	r2, r2
 80036f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f6:	4b20      	ldr	r3, [pc, #128]	; (8003778 <HAL_RCC_ClockConfig+0x1b8>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	429a      	cmp	r2, r3
 8003702:	d001      	beq.n	8003708 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e032      	b.n	800376e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b00      	cmp	r3, #0
 8003712:	d008      	beq.n	8003726 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003714:	4b19      	ldr	r3, [pc, #100]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	4916      	ldr	r1, [pc, #88]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 8003722:	4313      	orrs	r3, r2
 8003724:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0308 	and.w	r3, r3, #8
 800372e:	2b00      	cmp	r3, #0
 8003730:	d009      	beq.n	8003746 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003732:	4b12      	ldr	r3, [pc, #72]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	490e      	ldr	r1, [pc, #56]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	4313      	orrs	r3, r2
 8003744:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003746:	f000 f821 	bl	800378c <HAL_RCC_GetSysClockFreq>
 800374a:	4602      	mov	r2, r0
 800374c:	4b0b      	ldr	r3, [pc, #44]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	091b      	lsrs	r3, r3, #4
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	490a      	ldr	r1, [pc, #40]	; (8003780 <HAL_RCC_ClockConfig+0x1c0>)
 8003758:	5ccb      	ldrb	r3, [r1, r3]
 800375a:	fa22 f303 	lsr.w	r3, r2, r3
 800375e:	4a09      	ldr	r2, [pc, #36]	; (8003784 <HAL_RCC_ClockConfig+0x1c4>)
 8003760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003762:	4b09      	ldr	r3, [pc, #36]	; (8003788 <HAL_RCC_ClockConfig+0x1c8>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f7fe fd00 	bl	800216c <HAL_InitTick>

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40023c00 	.word	0x40023c00
 800377c:	40023800 	.word	0x40023800
 8003780:	0800b108 	.word	0x0800b108
 8003784:	20000000 	.word	0x20000000
 8003788:	20000004 	.word	0x20000004

0800378c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800378c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003790:	b094      	sub	sp, #80	; 0x50
 8003792:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	647b      	str	r3, [r7, #68]	; 0x44
 8003798:	2300      	movs	r3, #0
 800379a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800379c:	2300      	movs	r3, #0
 800379e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037a4:	4b79      	ldr	r3, [pc, #484]	; (800398c <HAL_RCC_GetSysClockFreq+0x200>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 030c 	and.w	r3, r3, #12
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d00d      	beq.n	80037cc <HAL_RCC_GetSysClockFreq+0x40>
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	f200 80e1 	bhi.w	8003978 <HAL_RCC_GetSysClockFreq+0x1ec>
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <HAL_RCC_GetSysClockFreq+0x34>
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d003      	beq.n	80037c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80037be:	e0db      	b.n	8003978 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037c0:	4b73      	ldr	r3, [pc, #460]	; (8003990 <HAL_RCC_GetSysClockFreq+0x204>)
 80037c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80037c4:	e0db      	b.n	800397e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037c6:	4b73      	ldr	r3, [pc, #460]	; (8003994 <HAL_RCC_GetSysClockFreq+0x208>)
 80037c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037ca:	e0d8      	b.n	800397e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037cc:	4b6f      	ldr	r3, [pc, #444]	; (800398c <HAL_RCC_GetSysClockFreq+0x200>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037d6:	4b6d      	ldr	r3, [pc, #436]	; (800398c <HAL_RCC_GetSysClockFreq+0x200>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d063      	beq.n	80038aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037e2:	4b6a      	ldr	r3, [pc, #424]	; (800398c <HAL_RCC_GetSysClockFreq+0x200>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	099b      	lsrs	r3, r3, #6
 80037e8:	2200      	movs	r2, #0
 80037ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80037ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037f4:	633b      	str	r3, [r7, #48]	; 0x30
 80037f6:	2300      	movs	r3, #0
 80037f8:	637b      	str	r3, [r7, #52]	; 0x34
 80037fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80037fe:	4622      	mov	r2, r4
 8003800:	462b      	mov	r3, r5
 8003802:	f04f 0000 	mov.w	r0, #0
 8003806:	f04f 0100 	mov.w	r1, #0
 800380a:	0159      	lsls	r1, r3, #5
 800380c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003810:	0150      	lsls	r0, r2, #5
 8003812:	4602      	mov	r2, r0
 8003814:	460b      	mov	r3, r1
 8003816:	4621      	mov	r1, r4
 8003818:	1a51      	subs	r1, r2, r1
 800381a:	6139      	str	r1, [r7, #16]
 800381c:	4629      	mov	r1, r5
 800381e:	eb63 0301 	sbc.w	r3, r3, r1
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	f04f 0200 	mov.w	r2, #0
 8003828:	f04f 0300 	mov.w	r3, #0
 800382c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003830:	4659      	mov	r1, fp
 8003832:	018b      	lsls	r3, r1, #6
 8003834:	4651      	mov	r1, sl
 8003836:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800383a:	4651      	mov	r1, sl
 800383c:	018a      	lsls	r2, r1, #6
 800383e:	4651      	mov	r1, sl
 8003840:	ebb2 0801 	subs.w	r8, r2, r1
 8003844:	4659      	mov	r1, fp
 8003846:	eb63 0901 	sbc.w	r9, r3, r1
 800384a:	f04f 0200 	mov.w	r2, #0
 800384e:	f04f 0300 	mov.w	r3, #0
 8003852:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003856:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800385a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800385e:	4690      	mov	r8, r2
 8003860:	4699      	mov	r9, r3
 8003862:	4623      	mov	r3, r4
 8003864:	eb18 0303 	adds.w	r3, r8, r3
 8003868:	60bb      	str	r3, [r7, #8]
 800386a:	462b      	mov	r3, r5
 800386c:	eb49 0303 	adc.w	r3, r9, r3
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	f04f 0200 	mov.w	r2, #0
 8003876:	f04f 0300 	mov.w	r3, #0
 800387a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800387e:	4629      	mov	r1, r5
 8003880:	024b      	lsls	r3, r1, #9
 8003882:	4621      	mov	r1, r4
 8003884:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003888:	4621      	mov	r1, r4
 800388a:	024a      	lsls	r2, r1, #9
 800388c:	4610      	mov	r0, r2
 800388e:	4619      	mov	r1, r3
 8003890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003892:	2200      	movs	r2, #0
 8003894:	62bb      	str	r3, [r7, #40]	; 0x28
 8003896:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003898:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800389c:	f7fd f9fc 	bl	8000c98 <__aeabi_uldivmod>
 80038a0:	4602      	mov	r2, r0
 80038a2:	460b      	mov	r3, r1
 80038a4:	4613      	mov	r3, r2
 80038a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038a8:	e058      	b.n	800395c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038aa:	4b38      	ldr	r3, [pc, #224]	; (800398c <HAL_RCC_GetSysClockFreq+0x200>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	099b      	lsrs	r3, r3, #6
 80038b0:	2200      	movs	r2, #0
 80038b2:	4618      	mov	r0, r3
 80038b4:	4611      	mov	r1, r2
 80038b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038ba:	623b      	str	r3, [r7, #32]
 80038bc:	2300      	movs	r3, #0
 80038be:	627b      	str	r3, [r7, #36]	; 0x24
 80038c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038c4:	4642      	mov	r2, r8
 80038c6:	464b      	mov	r3, r9
 80038c8:	f04f 0000 	mov.w	r0, #0
 80038cc:	f04f 0100 	mov.w	r1, #0
 80038d0:	0159      	lsls	r1, r3, #5
 80038d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038d6:	0150      	lsls	r0, r2, #5
 80038d8:	4602      	mov	r2, r0
 80038da:	460b      	mov	r3, r1
 80038dc:	4641      	mov	r1, r8
 80038de:	ebb2 0a01 	subs.w	sl, r2, r1
 80038e2:	4649      	mov	r1, r9
 80038e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	f04f 0300 	mov.w	r3, #0
 80038f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038fc:	ebb2 040a 	subs.w	r4, r2, sl
 8003900:	eb63 050b 	sbc.w	r5, r3, fp
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	f04f 0300 	mov.w	r3, #0
 800390c:	00eb      	lsls	r3, r5, #3
 800390e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003912:	00e2      	lsls	r2, r4, #3
 8003914:	4614      	mov	r4, r2
 8003916:	461d      	mov	r5, r3
 8003918:	4643      	mov	r3, r8
 800391a:	18e3      	adds	r3, r4, r3
 800391c:	603b      	str	r3, [r7, #0]
 800391e:	464b      	mov	r3, r9
 8003920:	eb45 0303 	adc.w	r3, r5, r3
 8003924:	607b      	str	r3, [r7, #4]
 8003926:	f04f 0200 	mov.w	r2, #0
 800392a:	f04f 0300 	mov.w	r3, #0
 800392e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003932:	4629      	mov	r1, r5
 8003934:	028b      	lsls	r3, r1, #10
 8003936:	4621      	mov	r1, r4
 8003938:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800393c:	4621      	mov	r1, r4
 800393e:	028a      	lsls	r2, r1, #10
 8003940:	4610      	mov	r0, r2
 8003942:	4619      	mov	r1, r3
 8003944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003946:	2200      	movs	r2, #0
 8003948:	61bb      	str	r3, [r7, #24]
 800394a:	61fa      	str	r2, [r7, #28]
 800394c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003950:	f7fd f9a2 	bl	8000c98 <__aeabi_uldivmod>
 8003954:	4602      	mov	r2, r0
 8003956:	460b      	mov	r3, r1
 8003958:	4613      	mov	r3, r2
 800395a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800395c:	4b0b      	ldr	r3, [pc, #44]	; (800398c <HAL_RCC_GetSysClockFreq+0x200>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	0c1b      	lsrs	r3, r3, #16
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	3301      	adds	r3, #1
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800396c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800396e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003970:	fbb2 f3f3 	udiv	r3, r2, r3
 8003974:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003976:	e002      	b.n	800397e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003978:	4b05      	ldr	r3, [pc, #20]	; (8003990 <HAL_RCC_GetSysClockFreq+0x204>)
 800397a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800397c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800397e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003980:	4618      	mov	r0, r3
 8003982:	3750      	adds	r7, #80	; 0x50
 8003984:	46bd      	mov	sp, r7
 8003986:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800398a:	bf00      	nop
 800398c:	40023800 	.word	0x40023800
 8003990:	00f42400 	.word	0x00f42400
 8003994:	007a1200 	.word	0x007a1200

08003998 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800399c:	4b03      	ldr	r3, [pc, #12]	; (80039ac <HAL_RCC_GetHCLKFreq+0x14>)
 800399e:	681b      	ldr	r3, [r3, #0]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	20000000 	.word	0x20000000

080039b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039b4:	f7ff fff0 	bl	8003998 <HAL_RCC_GetHCLKFreq>
 80039b8:	4602      	mov	r2, r0
 80039ba:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	0a9b      	lsrs	r3, r3, #10
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	4903      	ldr	r1, [pc, #12]	; (80039d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039c6:	5ccb      	ldrb	r3, [r1, r3]
 80039c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40023800 	.word	0x40023800
 80039d4:	0800b118 	.word	0x0800b118

080039d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039dc:	f7ff ffdc 	bl	8003998 <HAL_RCC_GetHCLKFreq>
 80039e0:	4602      	mov	r2, r0
 80039e2:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	0b5b      	lsrs	r3, r3, #13
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	4903      	ldr	r1, [pc, #12]	; (80039fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ee:	5ccb      	ldrb	r3, [r1, r3]
 80039f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40023800 	.word	0x40023800
 80039fc:	0800b118 	.word	0x0800b118

08003a00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e041      	b.n	8003a96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d106      	bne.n	8003a2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7fe f98c 	bl	8001d44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	4610      	mov	r0, r2
 8003a40:	f000 fbfa 	bl	8004238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b082      	sub	sp, #8
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d101      	bne.n	8003ab0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e041      	b.n	8003b34 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d106      	bne.n	8003aca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f839 	bl	8003b3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2202      	movs	r2, #2
 8003ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	3304      	adds	r3, #4
 8003ada:	4619      	mov	r1, r3
 8003adc:	4610      	mov	r0, r2
 8003ade:	f000 fbab 	bl	8004238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d109      	bne.n	8003b74 <HAL_TIM_PWM_Start+0x24>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	bf14      	ite	ne
 8003b6c:	2301      	movne	r3, #1
 8003b6e:	2300      	moveq	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	e022      	b.n	8003bba <HAL_TIM_PWM_Start+0x6a>
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	d109      	bne.n	8003b8e <HAL_TIM_PWM_Start+0x3e>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	bf14      	ite	ne
 8003b86:	2301      	movne	r3, #1
 8003b88:	2300      	moveq	r3, #0
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	e015      	b.n	8003bba <HAL_TIM_PWM_Start+0x6a>
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	2b08      	cmp	r3, #8
 8003b92:	d109      	bne.n	8003ba8 <HAL_TIM_PWM_Start+0x58>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	bf14      	ite	ne
 8003ba0:	2301      	movne	r3, #1
 8003ba2:	2300      	moveq	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	e008      	b.n	8003bba <HAL_TIM_PWM_Start+0x6a>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	bf14      	ite	ne
 8003bb4:	2301      	movne	r3, #1
 8003bb6:	2300      	moveq	r3, #0
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e068      	b.n	8003c94 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d104      	bne.n	8003bd2 <HAL_TIM_PWM_Start+0x82>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bd0:	e013      	b.n	8003bfa <HAL_TIM_PWM_Start+0xaa>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b04      	cmp	r3, #4
 8003bd6:	d104      	bne.n	8003be2 <HAL_TIM_PWM_Start+0x92>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003be0:	e00b      	b.n	8003bfa <HAL_TIM_PWM_Start+0xaa>
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b08      	cmp	r3, #8
 8003be6:	d104      	bne.n	8003bf2 <HAL_TIM_PWM_Start+0xa2>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2202      	movs	r2, #2
 8003bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bf0:	e003      	b.n	8003bfa <HAL_TIM_PWM_Start+0xaa>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2202      	movs	r2, #2
 8003bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	6839      	ldr	r1, [r7, #0]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 fdbe 	bl	8004784 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a23      	ldr	r2, [pc, #140]	; (8003c9c <HAL_TIM_PWM_Start+0x14c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d107      	bne.n	8003c22 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a1d      	ldr	r2, [pc, #116]	; (8003c9c <HAL_TIM_PWM_Start+0x14c>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d018      	beq.n	8003c5e <HAL_TIM_PWM_Start+0x10e>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c34:	d013      	beq.n	8003c5e <HAL_TIM_PWM_Start+0x10e>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a19      	ldr	r2, [pc, #100]	; (8003ca0 <HAL_TIM_PWM_Start+0x150>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d00e      	beq.n	8003c5e <HAL_TIM_PWM_Start+0x10e>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a17      	ldr	r2, [pc, #92]	; (8003ca4 <HAL_TIM_PWM_Start+0x154>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d009      	beq.n	8003c5e <HAL_TIM_PWM_Start+0x10e>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a16      	ldr	r2, [pc, #88]	; (8003ca8 <HAL_TIM_PWM_Start+0x158>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d004      	beq.n	8003c5e <HAL_TIM_PWM_Start+0x10e>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a14      	ldr	r2, [pc, #80]	; (8003cac <HAL_TIM_PWM_Start+0x15c>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d111      	bne.n	8003c82 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2b06      	cmp	r3, #6
 8003c6e:	d010      	beq.n	8003c92 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0201 	orr.w	r2, r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c80:	e007      	b.n	8003c92 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f042 0201 	orr.w	r2, r2, #1
 8003c90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40010000 	.word	0x40010000
 8003ca0:	40000400 	.word	0x40000400
 8003ca4:	40000800 	.word	0x40000800
 8003ca8:	40000c00 	.word	0x40000c00
 8003cac:	40014000 	.word	0x40014000

08003cb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d122      	bne.n	8003d0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d11b      	bne.n	8003d0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f06f 0202 	mvn.w	r2, #2
 8003cdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 fa81 	bl	80041fa <HAL_TIM_IC_CaptureCallback>
 8003cf8:	e005      	b.n	8003d06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 fa73 	bl	80041e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 fa84 	bl	800420e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	d122      	bne.n	8003d60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	2b04      	cmp	r3, #4
 8003d26:	d11b      	bne.n	8003d60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f06f 0204 	mvn.w	r2, #4
 8003d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2202      	movs	r2, #2
 8003d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 fa57 	bl	80041fa <HAL_TIM_IC_CaptureCallback>
 8003d4c:	e005      	b.n	8003d5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 fa49 	bl	80041e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 fa5a 	bl	800420e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	f003 0308 	and.w	r3, r3, #8
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	d122      	bne.n	8003db4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f003 0308 	and.w	r3, r3, #8
 8003d78:	2b08      	cmp	r3, #8
 8003d7a:	d11b      	bne.n	8003db4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f06f 0208 	mvn.w	r2, #8
 8003d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2204      	movs	r2, #4
 8003d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	f003 0303 	and.w	r3, r3, #3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 fa2d 	bl	80041fa <HAL_TIM_IC_CaptureCallback>
 8003da0:	e005      	b.n	8003dae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 fa1f 	bl	80041e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 fa30 	bl	800420e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	f003 0310 	and.w	r3, r3, #16
 8003dbe:	2b10      	cmp	r3, #16
 8003dc0:	d122      	bne.n	8003e08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	f003 0310 	and.w	r3, r3, #16
 8003dcc:	2b10      	cmp	r3, #16
 8003dce:	d11b      	bne.n	8003e08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f06f 0210 	mvn.w	r2, #16
 8003dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2208      	movs	r2, #8
 8003dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 fa03 	bl	80041fa <HAL_TIM_IC_CaptureCallback>
 8003df4:	e005      	b.n	8003e02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f9f5 	bl	80041e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 fa06 	bl	800420e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d10e      	bne.n	8003e34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d107      	bne.n	8003e34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f06f 0201 	mvn.w	r2, #1
 8003e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f9cf 	bl	80041d2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e3e:	2b80      	cmp	r3, #128	; 0x80
 8003e40:	d10e      	bne.n	8003e60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e4c:	2b80      	cmp	r3, #128	; 0x80
 8003e4e:	d107      	bne.n	8003e60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 fd30 	bl	80048c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6a:	2b40      	cmp	r3, #64	; 0x40
 8003e6c:	d10e      	bne.n	8003e8c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e78:	2b40      	cmp	r3, #64	; 0x40
 8003e7a:	d107      	bne.n	8003e8c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f9cb 	bl	8004222 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	f003 0320 	and.w	r3, r3, #32
 8003e96:	2b20      	cmp	r3, #32
 8003e98:	d10e      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	f003 0320 	and.w	r3, r3, #32
 8003ea4:	2b20      	cmp	r3, #32
 8003ea6:	d107      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f06f 0220 	mvn.w	r2, #32
 8003eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 fcfa 	bl	80048ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003eb8:	bf00      	nop
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d101      	bne.n	8003ede <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003eda:	2302      	movs	r3, #2
 8003edc:	e0ae      	b.n	800403c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b0c      	cmp	r3, #12
 8003eea:	f200 809f 	bhi.w	800402c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003eee:	a201      	add	r2, pc, #4	; (adr r2, 8003ef4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef4:	08003f29 	.word	0x08003f29
 8003ef8:	0800402d 	.word	0x0800402d
 8003efc:	0800402d 	.word	0x0800402d
 8003f00:	0800402d 	.word	0x0800402d
 8003f04:	08003f69 	.word	0x08003f69
 8003f08:	0800402d 	.word	0x0800402d
 8003f0c:	0800402d 	.word	0x0800402d
 8003f10:	0800402d 	.word	0x0800402d
 8003f14:	08003fab 	.word	0x08003fab
 8003f18:	0800402d 	.word	0x0800402d
 8003f1c:	0800402d 	.word	0x0800402d
 8003f20:	0800402d 	.word	0x0800402d
 8003f24:	08003feb 	.word	0x08003feb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68b9      	ldr	r1, [r7, #8]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 fa02 	bl	8004338 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	699a      	ldr	r2, [r3, #24]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0208 	orr.w	r2, r2, #8
 8003f42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	699a      	ldr	r2, [r3, #24]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0204 	bic.w	r2, r2, #4
 8003f52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6999      	ldr	r1, [r3, #24]
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	691a      	ldr	r2, [r3, #16]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	619a      	str	r2, [r3, #24]
      break;
 8003f66:	e064      	b.n	8004032 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68b9      	ldr	r1, [r7, #8]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 fa48 	bl	8004404 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	699a      	ldr	r2, [r3, #24]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	699a      	ldr	r2, [r3, #24]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6999      	ldr	r1, [r3, #24]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	021a      	lsls	r2, r3, #8
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	619a      	str	r2, [r3, #24]
      break;
 8003fa8:	e043      	b.n	8004032 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68b9      	ldr	r1, [r7, #8]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 fa93 	bl	80044dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	69da      	ldr	r2, [r3, #28]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f042 0208 	orr.w	r2, r2, #8
 8003fc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	69da      	ldr	r2, [r3, #28]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0204 	bic.w	r2, r2, #4
 8003fd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	69d9      	ldr	r1, [r3, #28]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	691a      	ldr	r2, [r3, #16]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	61da      	str	r2, [r3, #28]
      break;
 8003fe8:	e023      	b.n	8004032 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68b9      	ldr	r1, [r7, #8]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 fadd 	bl	80045b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	69da      	ldr	r2, [r3, #28]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004004:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	69da      	ldr	r2, [r3, #28]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004014:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	69d9      	ldr	r1, [r3, #28]
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	021a      	lsls	r2, r3, #8
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	61da      	str	r2, [r3, #28]
      break;
 800402a:	e002      	b.n	8004032 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	75fb      	strb	r3, [r7, #23]
      break;
 8004030:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800403a:	7dfb      	ldrb	r3, [r7, #23]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3718      	adds	r7, #24
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800404e:	2300      	movs	r3, #0
 8004050:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <HAL_TIM_ConfigClockSource+0x1c>
 800405c:	2302      	movs	r3, #2
 800405e:	e0b4      	b.n	80041ca <HAL_TIM_ConfigClockSource+0x186>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800407e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004086:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004098:	d03e      	beq.n	8004118 <HAL_TIM_ConfigClockSource+0xd4>
 800409a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800409e:	f200 8087 	bhi.w	80041b0 <HAL_TIM_ConfigClockSource+0x16c>
 80040a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a6:	f000 8086 	beq.w	80041b6 <HAL_TIM_ConfigClockSource+0x172>
 80040aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ae:	d87f      	bhi.n	80041b0 <HAL_TIM_ConfigClockSource+0x16c>
 80040b0:	2b70      	cmp	r3, #112	; 0x70
 80040b2:	d01a      	beq.n	80040ea <HAL_TIM_ConfigClockSource+0xa6>
 80040b4:	2b70      	cmp	r3, #112	; 0x70
 80040b6:	d87b      	bhi.n	80041b0 <HAL_TIM_ConfigClockSource+0x16c>
 80040b8:	2b60      	cmp	r3, #96	; 0x60
 80040ba:	d050      	beq.n	800415e <HAL_TIM_ConfigClockSource+0x11a>
 80040bc:	2b60      	cmp	r3, #96	; 0x60
 80040be:	d877      	bhi.n	80041b0 <HAL_TIM_ConfigClockSource+0x16c>
 80040c0:	2b50      	cmp	r3, #80	; 0x50
 80040c2:	d03c      	beq.n	800413e <HAL_TIM_ConfigClockSource+0xfa>
 80040c4:	2b50      	cmp	r3, #80	; 0x50
 80040c6:	d873      	bhi.n	80041b0 <HAL_TIM_ConfigClockSource+0x16c>
 80040c8:	2b40      	cmp	r3, #64	; 0x40
 80040ca:	d058      	beq.n	800417e <HAL_TIM_ConfigClockSource+0x13a>
 80040cc:	2b40      	cmp	r3, #64	; 0x40
 80040ce:	d86f      	bhi.n	80041b0 <HAL_TIM_ConfigClockSource+0x16c>
 80040d0:	2b30      	cmp	r3, #48	; 0x30
 80040d2:	d064      	beq.n	800419e <HAL_TIM_ConfigClockSource+0x15a>
 80040d4:	2b30      	cmp	r3, #48	; 0x30
 80040d6:	d86b      	bhi.n	80041b0 <HAL_TIM_ConfigClockSource+0x16c>
 80040d8:	2b20      	cmp	r3, #32
 80040da:	d060      	beq.n	800419e <HAL_TIM_ConfigClockSource+0x15a>
 80040dc:	2b20      	cmp	r3, #32
 80040de:	d867      	bhi.n	80041b0 <HAL_TIM_ConfigClockSource+0x16c>
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d05c      	beq.n	800419e <HAL_TIM_ConfigClockSource+0x15a>
 80040e4:	2b10      	cmp	r3, #16
 80040e6:	d05a      	beq.n	800419e <HAL_TIM_ConfigClockSource+0x15a>
 80040e8:	e062      	b.n	80041b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6818      	ldr	r0, [r3, #0]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	6899      	ldr	r1, [r3, #8]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f000 fb23 	bl	8004744 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800410c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	609a      	str	r2, [r3, #8]
      break;
 8004116:	e04f      	b.n	80041b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6818      	ldr	r0, [r3, #0]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	6899      	ldr	r1, [r3, #8]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f000 fb0c 	bl	8004744 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689a      	ldr	r2, [r3, #8]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800413a:	609a      	str	r2, [r3, #8]
      break;
 800413c:	e03c      	b.n	80041b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6818      	ldr	r0, [r3, #0]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	6859      	ldr	r1, [r3, #4]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	461a      	mov	r2, r3
 800414c:	f000 fa80 	bl	8004650 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2150      	movs	r1, #80	; 0x50
 8004156:	4618      	mov	r0, r3
 8004158:	f000 fad9 	bl	800470e <TIM_ITRx_SetConfig>
      break;
 800415c:	e02c      	b.n	80041b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6818      	ldr	r0, [r3, #0]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	6859      	ldr	r1, [r3, #4]
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	461a      	mov	r2, r3
 800416c:	f000 fa9f 	bl	80046ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2160      	movs	r1, #96	; 0x60
 8004176:	4618      	mov	r0, r3
 8004178:	f000 fac9 	bl	800470e <TIM_ITRx_SetConfig>
      break;
 800417c:	e01c      	b.n	80041b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6818      	ldr	r0, [r3, #0]
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	6859      	ldr	r1, [r3, #4]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	461a      	mov	r2, r3
 800418c:	f000 fa60 	bl	8004650 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2140      	movs	r1, #64	; 0x40
 8004196:	4618      	mov	r0, r3
 8004198:	f000 fab9 	bl	800470e <TIM_ITRx_SetConfig>
      break;
 800419c:	e00c      	b.n	80041b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4619      	mov	r1, r3
 80041a8:	4610      	mov	r0, r2
 80041aa:	f000 fab0 	bl	800470e <TIM_ITRx_SetConfig>
      break;
 80041ae:	e003      	b.n	80041b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	73fb      	strb	r3, [r7, #15]
      break;
 80041b4:	e000      	b.n	80041b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80041b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b083      	sub	sp, #12
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004216:	bf00      	nop
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800422a:	bf00      	nop
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
	...

08004238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a34      	ldr	r2, [pc, #208]	; (800431c <TIM_Base_SetConfig+0xe4>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d00f      	beq.n	8004270 <TIM_Base_SetConfig+0x38>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004256:	d00b      	beq.n	8004270 <TIM_Base_SetConfig+0x38>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a31      	ldr	r2, [pc, #196]	; (8004320 <TIM_Base_SetConfig+0xe8>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d007      	beq.n	8004270 <TIM_Base_SetConfig+0x38>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a30      	ldr	r2, [pc, #192]	; (8004324 <TIM_Base_SetConfig+0xec>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d003      	beq.n	8004270 <TIM_Base_SetConfig+0x38>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a2f      	ldr	r2, [pc, #188]	; (8004328 <TIM_Base_SetConfig+0xf0>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d108      	bne.n	8004282 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004276:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	4313      	orrs	r3, r2
 8004280:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a25      	ldr	r2, [pc, #148]	; (800431c <TIM_Base_SetConfig+0xe4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d01b      	beq.n	80042c2 <TIM_Base_SetConfig+0x8a>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004290:	d017      	beq.n	80042c2 <TIM_Base_SetConfig+0x8a>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a22      	ldr	r2, [pc, #136]	; (8004320 <TIM_Base_SetConfig+0xe8>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d013      	beq.n	80042c2 <TIM_Base_SetConfig+0x8a>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a21      	ldr	r2, [pc, #132]	; (8004324 <TIM_Base_SetConfig+0xec>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d00f      	beq.n	80042c2 <TIM_Base_SetConfig+0x8a>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a20      	ldr	r2, [pc, #128]	; (8004328 <TIM_Base_SetConfig+0xf0>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d00b      	beq.n	80042c2 <TIM_Base_SetConfig+0x8a>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a1f      	ldr	r2, [pc, #124]	; (800432c <TIM_Base_SetConfig+0xf4>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d007      	beq.n	80042c2 <TIM_Base_SetConfig+0x8a>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a1e      	ldr	r2, [pc, #120]	; (8004330 <TIM_Base_SetConfig+0xf8>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d003      	beq.n	80042c2 <TIM_Base_SetConfig+0x8a>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a1d      	ldr	r2, [pc, #116]	; (8004334 <TIM_Base_SetConfig+0xfc>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d108      	bne.n	80042d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	4313      	orrs	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a08      	ldr	r2, [pc, #32]	; (800431c <TIM_Base_SetConfig+0xe4>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d103      	bne.n	8004308 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	691a      	ldr	r2, [r3, #16]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	615a      	str	r2, [r3, #20]
}
 800430e:	bf00      	nop
 8004310:	3714      	adds	r7, #20
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	40010000 	.word	0x40010000
 8004320:	40000400 	.word	0x40000400
 8004324:	40000800 	.word	0x40000800
 8004328:	40000c00 	.word	0x40000c00
 800432c:	40014000 	.word	0x40014000
 8004330:	40014400 	.word	0x40014400
 8004334:	40014800 	.word	0x40014800

08004338 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004338:	b480      	push	{r7}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	f023 0201 	bic.w	r2, r3, #1
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0303 	bic.w	r3, r3, #3
 800436e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	4313      	orrs	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f023 0302 	bic.w	r3, r3, #2
 8004380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	4313      	orrs	r3, r2
 800438a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a1c      	ldr	r2, [pc, #112]	; (8004400 <TIM_OC1_SetConfig+0xc8>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d10c      	bne.n	80043ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f023 0308 	bic.w	r3, r3, #8
 800439a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f023 0304 	bic.w	r3, r3, #4
 80043ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a13      	ldr	r2, [pc, #76]	; (8004400 <TIM_OC1_SetConfig+0xc8>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d111      	bne.n	80043da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	621a      	str	r2, [r3, #32]
}
 80043f4:	bf00      	nop
 80043f6:	371c      	adds	r7, #28
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	40010000 	.word	0x40010000

08004404 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	f023 0210 	bic.w	r2, r3, #16
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800443a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	021b      	lsls	r3, r3, #8
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	4313      	orrs	r3, r2
 8004446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f023 0320 	bic.w	r3, r3, #32
 800444e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	011b      	lsls	r3, r3, #4
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	4313      	orrs	r3, r2
 800445a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a1e      	ldr	r2, [pc, #120]	; (80044d8 <TIM_OC2_SetConfig+0xd4>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d10d      	bne.n	8004480 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800446a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	4313      	orrs	r3, r2
 8004476:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800447e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a15      	ldr	r2, [pc, #84]	; (80044d8 <TIM_OC2_SetConfig+0xd4>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d113      	bne.n	80044b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800448e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004496:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	621a      	str	r2, [r3, #32]
}
 80044ca:	bf00      	nop
 80044cc:	371c      	adds	r7, #28
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	40010000 	.word	0x40010000

080044dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044dc:	b480      	push	{r7}
 80044de:	b087      	sub	sp, #28
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800450a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f023 0303 	bic.w	r3, r3, #3
 8004512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	4313      	orrs	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	021b      	lsls	r3, r3, #8
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	4313      	orrs	r3, r2
 8004530:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a1d      	ldr	r2, [pc, #116]	; (80045ac <TIM_OC3_SetConfig+0xd0>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d10d      	bne.n	8004556 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004540:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	021b      	lsls	r3, r3, #8
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	4313      	orrs	r3, r2
 800454c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004554:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a14      	ldr	r2, [pc, #80]	; (80045ac <TIM_OC3_SetConfig+0xd0>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d113      	bne.n	8004586 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004564:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800456c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	4313      	orrs	r3, r2
 8004578:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	011b      	lsls	r3, r3, #4
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	4313      	orrs	r3, r2
 8004584:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	621a      	str	r2, [r3, #32]
}
 80045a0:	bf00      	nop
 80045a2:	371c      	adds	r7, #28
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	40010000 	.word	0x40010000

080045b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b087      	sub	sp, #28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	021b      	lsls	r3, r3, #8
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	031b      	lsls	r3, r3, #12
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	4313      	orrs	r3, r2
 8004606:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a10      	ldr	r2, [pc, #64]	; (800464c <TIM_OC4_SetConfig+0x9c>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d109      	bne.n	8004624 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004616:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	019b      	lsls	r3, r3, #6
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	4313      	orrs	r3, r2
 8004622:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	621a      	str	r2, [r3, #32]
}
 800463e:	bf00      	nop
 8004640:	371c      	adds	r7, #28
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	40010000 	.word	0x40010000

08004650 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004650:	b480      	push	{r7}
 8004652:	b087      	sub	sp, #28
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	f023 0201 	bic.w	r2, r3, #1
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800467a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	011b      	lsls	r3, r3, #4
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	4313      	orrs	r3, r2
 8004684:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f023 030a 	bic.w	r3, r3, #10
 800468c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	4313      	orrs	r3, r2
 8004694:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	621a      	str	r2, [r3, #32]
}
 80046a2:	bf00      	nop
 80046a4:	371c      	adds	r7, #28
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b087      	sub	sp, #28
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	60f8      	str	r0, [r7, #12]
 80046b6:	60b9      	str	r1, [r7, #8]
 80046b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	f023 0210 	bic.w	r2, r3, #16
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	031b      	lsls	r3, r3, #12
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	011b      	lsls	r3, r3, #4
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	621a      	str	r2, [r3, #32]
}
 8004702:	bf00      	nop
 8004704:	371c      	adds	r7, #28
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800470e:	b480      	push	{r7}
 8004710:	b085      	sub	sp, #20
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
 8004716:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004724:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4313      	orrs	r3, r2
 800472c:	f043 0307 	orr.w	r3, r3, #7
 8004730:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	609a      	str	r2, [r3, #8]
}
 8004738:	bf00      	nop
 800473a:	3714      	adds	r7, #20
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004744:	b480      	push	{r7}
 8004746:	b087      	sub	sp, #28
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
 8004750:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800475e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	021a      	lsls	r2, r3, #8
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	431a      	orrs	r2, r3
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	4313      	orrs	r3, r2
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	4313      	orrs	r3, r2
 8004770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	609a      	str	r2, [r3, #8]
}
 8004778:	bf00      	nop
 800477a:	371c      	adds	r7, #28
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004784:	b480      	push	{r7}
 8004786:	b087      	sub	sp, #28
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	f003 031f 	and.w	r3, r3, #31
 8004796:	2201      	movs	r2, #1
 8004798:	fa02 f303 	lsl.w	r3, r2, r3
 800479c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6a1a      	ldr	r2, [r3, #32]
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	43db      	mvns	r3, r3
 80047a6:	401a      	ands	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6a1a      	ldr	r2, [r3, #32]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f003 031f 	and.w	r3, r3, #31
 80047b6:	6879      	ldr	r1, [r7, #4]
 80047b8:	fa01 f303 	lsl.w	r3, r1, r3
 80047bc:	431a      	orrs	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	621a      	str	r2, [r3, #32]
}
 80047c2:	bf00      	nop
 80047c4:	371c      	adds	r7, #28
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
	...

080047d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d101      	bne.n	80047e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047e4:	2302      	movs	r3, #2
 80047e6:	e050      	b.n	800488a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2202      	movs	r2, #2
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800480e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	4313      	orrs	r3, r2
 8004818:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a1c      	ldr	r2, [pc, #112]	; (8004898 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d018      	beq.n	800485e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004834:	d013      	beq.n	800485e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a18      	ldr	r2, [pc, #96]	; (800489c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d00e      	beq.n	800485e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a16      	ldr	r2, [pc, #88]	; (80048a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d009      	beq.n	800485e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a15      	ldr	r2, [pc, #84]	; (80048a4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d004      	beq.n	800485e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a13      	ldr	r2, [pc, #76]	; (80048a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d10c      	bne.n	8004878 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004864:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	4313      	orrs	r3, r2
 800486e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68ba      	ldr	r2, [r7, #8]
 8004876:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3714      	adds	r7, #20
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	40010000 	.word	0x40010000
 800489c:	40000400 	.word	0x40000400
 80048a0:	40000800 	.word	0x40000800
 80048a4:	40000c00 	.word	0x40000c00
 80048a8:	40014000 	.word	0x40014000

080048ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e03f      	b.n	8004966 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d106      	bne.n	8004900 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7fd fa84 	bl	8001e08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2224      	movs	r2, #36	; 0x24
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68da      	ldr	r2, [r3, #12]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004916:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 f929 	bl	8004b70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	691a      	ldr	r2, [r3, #16]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800492c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	695a      	ldr	r2, [r3, #20]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800493c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68da      	ldr	r2, [r3, #12]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800494c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2220      	movs	r2, #32
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2220      	movs	r2, #32
 8004960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b08a      	sub	sp, #40	; 0x28
 8004972:	af02      	add	r7, sp, #8
 8004974:	60f8      	str	r0, [r7, #12]
 8004976:	60b9      	str	r1, [r7, #8]
 8004978:	603b      	str	r3, [r7, #0]
 800497a:	4613      	mov	r3, r2
 800497c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800497e:	2300      	movs	r3, #0
 8004980:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b20      	cmp	r3, #32
 800498c:	d17c      	bne.n	8004a88 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d002      	beq.n	800499a <HAL_UART_Transmit+0x2c>
 8004994:	88fb      	ldrh	r3, [r7, #6]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e075      	b.n	8004a8a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d101      	bne.n	80049ac <HAL_UART_Transmit+0x3e>
 80049a8:	2302      	movs	r3, #2
 80049aa:	e06e      	b.n	8004a8a <HAL_UART_Transmit+0x11c>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2221      	movs	r2, #33	; 0x21
 80049be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049c2:	f7fd fc17 	bl	80021f4 <HAL_GetTick>
 80049c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	88fa      	ldrh	r2, [r7, #6]
 80049cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	88fa      	ldrh	r2, [r7, #6]
 80049d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049dc:	d108      	bne.n	80049f0 <HAL_UART_Transmit+0x82>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d104      	bne.n	80049f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80049e6:	2300      	movs	r3, #0
 80049e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	61bb      	str	r3, [r7, #24]
 80049ee:	e003      	b.n	80049f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049f4:	2300      	movs	r3, #0
 80049f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004a00:	e02a      	b.n	8004a58 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	2180      	movs	r1, #128	; 0x80
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	f000 f840 	bl	8004a92 <UART_WaitOnFlagUntilTimeout>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d001      	beq.n	8004a1c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e036      	b.n	8004a8a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10b      	bne.n	8004a3a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	881b      	ldrh	r3, [r3, #0]
 8004a26:	461a      	mov	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	3302      	adds	r3, #2
 8004a36:	61bb      	str	r3, [r7, #24]
 8004a38:	e007      	b.n	8004a4a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	781a      	ldrb	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	3301      	adds	r3, #1
 8004a48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1cf      	bne.n	8004a02 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	2140      	movs	r1, #64	; 0x40
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f000 f810 	bl	8004a92 <UART_WaitOnFlagUntilTimeout>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e006      	b.n	8004a8a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004a84:	2300      	movs	r3, #0
 8004a86:	e000      	b.n	8004a8a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004a88:	2302      	movs	r3, #2
  }
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3720      	adds	r7, #32
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b090      	sub	sp, #64	; 0x40
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	60f8      	str	r0, [r7, #12]
 8004a9a:	60b9      	str	r1, [r7, #8]
 8004a9c:	603b      	str	r3, [r7, #0]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aa2:	e050      	b.n	8004b46 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aaa:	d04c      	beq.n	8004b46 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004aac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d007      	beq.n	8004ac2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ab2:	f7fd fb9f 	bl	80021f4 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d241      	bcs.n	8004b46 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	330c      	adds	r3, #12
 8004ac8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004acc:	e853 3f00 	ldrex	r3, [r3]
 8004ad0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	330c      	adds	r3, #12
 8004ae0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ae2:	637a      	str	r2, [r7, #52]	; 0x34
 8004ae4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ae8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004aea:	e841 2300 	strex	r3, r2, [r1]
 8004aee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1e5      	bne.n	8004ac2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	3314      	adds	r3, #20
 8004afc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	e853 3f00 	ldrex	r3, [r3]
 8004b04:	613b      	str	r3, [r7, #16]
   return(result);
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	f023 0301 	bic.w	r3, r3, #1
 8004b0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3314      	adds	r3, #20
 8004b14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b16:	623a      	str	r2, [r7, #32]
 8004b18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1a:	69f9      	ldr	r1, [r7, #28]
 8004b1c:	6a3a      	ldr	r2, [r7, #32]
 8004b1e:	e841 2300 	strex	r3, r2, [r1]
 8004b22:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1e5      	bne.n	8004af6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2220      	movs	r2, #32
 8004b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e00f      	b.n	8004b66 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	4013      	ands	r3, r2
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	bf0c      	ite	eq
 8004b56:	2301      	moveq	r3, #1
 8004b58:	2300      	movne	r3, #0
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	79fb      	ldrb	r3, [r7, #7]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d09f      	beq.n	8004aa4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3740      	adds	r7, #64	; 0x40
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
	...

08004b70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b74:	b0c0      	sub	sp, #256	; 0x100
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b8c:	68d9      	ldr	r1, [r3, #12]
 8004b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	ea40 0301 	orr.w	r3, r0, r1
 8004b98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b9e:	689a      	ldr	r2, [r3, #8]
 8004ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004bc8:	f021 010c 	bic.w	r1, r1, #12
 8004bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004bd6:	430b      	orrs	r3, r1
 8004bd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bea:	6999      	ldr	r1, [r3, #24]
 8004bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	ea40 0301 	orr.w	r3, r0, r1
 8004bf6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	4b8f      	ldr	r3, [pc, #572]	; (8004e3c <UART_SetConfig+0x2cc>)
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d005      	beq.n	8004c10 <UART_SetConfig+0xa0>
 8004c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	4b8d      	ldr	r3, [pc, #564]	; (8004e40 <UART_SetConfig+0x2d0>)
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d104      	bne.n	8004c1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c10:	f7fe fee2 	bl	80039d8 <HAL_RCC_GetPCLK2Freq>
 8004c14:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004c18:	e003      	b.n	8004c22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c1a:	f7fe fec9 	bl	80039b0 <HAL_RCC_GetPCLK1Freq>
 8004c1e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c2c:	f040 810c 	bne.w	8004e48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c34:	2200      	movs	r2, #0
 8004c36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c3a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004c3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004c42:	4622      	mov	r2, r4
 8004c44:	462b      	mov	r3, r5
 8004c46:	1891      	adds	r1, r2, r2
 8004c48:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c4a:	415b      	adcs	r3, r3
 8004c4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004c52:	4621      	mov	r1, r4
 8004c54:	eb12 0801 	adds.w	r8, r2, r1
 8004c58:	4629      	mov	r1, r5
 8004c5a:	eb43 0901 	adc.w	r9, r3, r1
 8004c5e:	f04f 0200 	mov.w	r2, #0
 8004c62:	f04f 0300 	mov.w	r3, #0
 8004c66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c72:	4690      	mov	r8, r2
 8004c74:	4699      	mov	r9, r3
 8004c76:	4623      	mov	r3, r4
 8004c78:	eb18 0303 	adds.w	r3, r8, r3
 8004c7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004c80:	462b      	mov	r3, r5
 8004c82:	eb49 0303 	adc.w	r3, r9, r3
 8004c86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c96:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004c9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	18db      	adds	r3, r3, r3
 8004ca2:	653b      	str	r3, [r7, #80]	; 0x50
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	eb42 0303 	adc.w	r3, r2, r3
 8004caa:	657b      	str	r3, [r7, #84]	; 0x54
 8004cac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004cb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004cb4:	f7fb fff0 	bl	8000c98 <__aeabi_uldivmod>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4b61      	ldr	r3, [pc, #388]	; (8004e44 <UART_SetConfig+0x2d4>)
 8004cbe:	fba3 2302 	umull	r2, r3, r3, r2
 8004cc2:	095b      	lsrs	r3, r3, #5
 8004cc4:	011c      	lsls	r4, r3, #4
 8004cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004cd0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004cd4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004cd8:	4642      	mov	r2, r8
 8004cda:	464b      	mov	r3, r9
 8004cdc:	1891      	adds	r1, r2, r2
 8004cde:	64b9      	str	r1, [r7, #72]	; 0x48
 8004ce0:	415b      	adcs	r3, r3
 8004ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ce4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ce8:	4641      	mov	r1, r8
 8004cea:	eb12 0a01 	adds.w	sl, r2, r1
 8004cee:	4649      	mov	r1, r9
 8004cf0:	eb43 0b01 	adc.w	fp, r3, r1
 8004cf4:	f04f 0200 	mov.w	r2, #0
 8004cf8:	f04f 0300 	mov.w	r3, #0
 8004cfc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d08:	4692      	mov	sl, r2
 8004d0a:	469b      	mov	fp, r3
 8004d0c:	4643      	mov	r3, r8
 8004d0e:	eb1a 0303 	adds.w	r3, sl, r3
 8004d12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d16:	464b      	mov	r3, r9
 8004d18:	eb4b 0303 	adc.w	r3, fp, r3
 8004d1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d2c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004d30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004d34:	460b      	mov	r3, r1
 8004d36:	18db      	adds	r3, r3, r3
 8004d38:	643b      	str	r3, [r7, #64]	; 0x40
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	eb42 0303 	adc.w	r3, r2, r3
 8004d40:	647b      	str	r3, [r7, #68]	; 0x44
 8004d42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004d4a:	f7fb ffa5 	bl	8000c98 <__aeabi_uldivmod>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	460b      	mov	r3, r1
 8004d52:	4611      	mov	r1, r2
 8004d54:	4b3b      	ldr	r3, [pc, #236]	; (8004e44 <UART_SetConfig+0x2d4>)
 8004d56:	fba3 2301 	umull	r2, r3, r3, r1
 8004d5a:	095b      	lsrs	r3, r3, #5
 8004d5c:	2264      	movs	r2, #100	; 0x64
 8004d5e:	fb02 f303 	mul.w	r3, r2, r3
 8004d62:	1acb      	subs	r3, r1, r3
 8004d64:	00db      	lsls	r3, r3, #3
 8004d66:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004d6a:	4b36      	ldr	r3, [pc, #216]	; (8004e44 <UART_SetConfig+0x2d4>)
 8004d6c:	fba3 2302 	umull	r2, r3, r3, r2
 8004d70:	095b      	lsrs	r3, r3, #5
 8004d72:	005b      	lsls	r3, r3, #1
 8004d74:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d78:	441c      	add	r4, r3
 8004d7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d84:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004d88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004d8c:	4642      	mov	r2, r8
 8004d8e:	464b      	mov	r3, r9
 8004d90:	1891      	adds	r1, r2, r2
 8004d92:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d94:	415b      	adcs	r3, r3
 8004d96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d9c:	4641      	mov	r1, r8
 8004d9e:	1851      	adds	r1, r2, r1
 8004da0:	6339      	str	r1, [r7, #48]	; 0x30
 8004da2:	4649      	mov	r1, r9
 8004da4:	414b      	adcs	r3, r1
 8004da6:	637b      	str	r3, [r7, #52]	; 0x34
 8004da8:	f04f 0200 	mov.w	r2, #0
 8004dac:	f04f 0300 	mov.w	r3, #0
 8004db0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004db4:	4659      	mov	r1, fp
 8004db6:	00cb      	lsls	r3, r1, #3
 8004db8:	4651      	mov	r1, sl
 8004dba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dbe:	4651      	mov	r1, sl
 8004dc0:	00ca      	lsls	r2, r1, #3
 8004dc2:	4610      	mov	r0, r2
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	4642      	mov	r2, r8
 8004dca:	189b      	adds	r3, r3, r2
 8004dcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004dd0:	464b      	mov	r3, r9
 8004dd2:	460a      	mov	r2, r1
 8004dd4:	eb42 0303 	adc.w	r3, r2, r3
 8004dd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004de8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004dec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004df0:	460b      	mov	r3, r1
 8004df2:	18db      	adds	r3, r3, r3
 8004df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004df6:	4613      	mov	r3, r2
 8004df8:	eb42 0303 	adc.w	r3, r2, r3
 8004dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004e06:	f7fb ff47 	bl	8000c98 <__aeabi_uldivmod>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	4b0d      	ldr	r3, [pc, #52]	; (8004e44 <UART_SetConfig+0x2d4>)
 8004e10:	fba3 1302 	umull	r1, r3, r3, r2
 8004e14:	095b      	lsrs	r3, r3, #5
 8004e16:	2164      	movs	r1, #100	; 0x64
 8004e18:	fb01 f303 	mul.w	r3, r1, r3
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	00db      	lsls	r3, r3, #3
 8004e20:	3332      	adds	r3, #50	; 0x32
 8004e22:	4a08      	ldr	r2, [pc, #32]	; (8004e44 <UART_SetConfig+0x2d4>)
 8004e24:	fba2 2303 	umull	r2, r3, r2, r3
 8004e28:	095b      	lsrs	r3, r3, #5
 8004e2a:	f003 0207 	and.w	r2, r3, #7
 8004e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4422      	add	r2, r4
 8004e36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e38:	e106      	b.n	8005048 <UART_SetConfig+0x4d8>
 8004e3a:	bf00      	nop
 8004e3c:	40011000 	.word	0x40011000
 8004e40:	40011400 	.word	0x40011400
 8004e44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004e52:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004e56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004e5a:	4642      	mov	r2, r8
 8004e5c:	464b      	mov	r3, r9
 8004e5e:	1891      	adds	r1, r2, r2
 8004e60:	6239      	str	r1, [r7, #32]
 8004e62:	415b      	adcs	r3, r3
 8004e64:	627b      	str	r3, [r7, #36]	; 0x24
 8004e66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e6a:	4641      	mov	r1, r8
 8004e6c:	1854      	adds	r4, r2, r1
 8004e6e:	4649      	mov	r1, r9
 8004e70:	eb43 0501 	adc.w	r5, r3, r1
 8004e74:	f04f 0200 	mov.w	r2, #0
 8004e78:	f04f 0300 	mov.w	r3, #0
 8004e7c:	00eb      	lsls	r3, r5, #3
 8004e7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e82:	00e2      	lsls	r2, r4, #3
 8004e84:	4614      	mov	r4, r2
 8004e86:	461d      	mov	r5, r3
 8004e88:	4643      	mov	r3, r8
 8004e8a:	18e3      	adds	r3, r4, r3
 8004e8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e90:	464b      	mov	r3, r9
 8004e92:	eb45 0303 	adc.w	r3, r5, r3
 8004e96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ea6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004eaa:	f04f 0200 	mov.w	r2, #0
 8004eae:	f04f 0300 	mov.w	r3, #0
 8004eb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004eb6:	4629      	mov	r1, r5
 8004eb8:	008b      	lsls	r3, r1, #2
 8004eba:	4621      	mov	r1, r4
 8004ebc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ec0:	4621      	mov	r1, r4
 8004ec2:	008a      	lsls	r2, r1, #2
 8004ec4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ec8:	f7fb fee6 	bl	8000c98 <__aeabi_uldivmod>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	4b60      	ldr	r3, [pc, #384]	; (8005054 <UART_SetConfig+0x4e4>)
 8004ed2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ed6:	095b      	lsrs	r3, r3, #5
 8004ed8:	011c      	lsls	r4, r3, #4
 8004eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ee4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ee8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004eec:	4642      	mov	r2, r8
 8004eee:	464b      	mov	r3, r9
 8004ef0:	1891      	adds	r1, r2, r2
 8004ef2:	61b9      	str	r1, [r7, #24]
 8004ef4:	415b      	adcs	r3, r3
 8004ef6:	61fb      	str	r3, [r7, #28]
 8004ef8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004efc:	4641      	mov	r1, r8
 8004efe:	1851      	adds	r1, r2, r1
 8004f00:	6139      	str	r1, [r7, #16]
 8004f02:	4649      	mov	r1, r9
 8004f04:	414b      	adcs	r3, r1
 8004f06:	617b      	str	r3, [r7, #20]
 8004f08:	f04f 0200 	mov.w	r2, #0
 8004f0c:	f04f 0300 	mov.w	r3, #0
 8004f10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f14:	4659      	mov	r1, fp
 8004f16:	00cb      	lsls	r3, r1, #3
 8004f18:	4651      	mov	r1, sl
 8004f1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f1e:	4651      	mov	r1, sl
 8004f20:	00ca      	lsls	r2, r1, #3
 8004f22:	4610      	mov	r0, r2
 8004f24:	4619      	mov	r1, r3
 8004f26:	4603      	mov	r3, r0
 8004f28:	4642      	mov	r2, r8
 8004f2a:	189b      	adds	r3, r3, r2
 8004f2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f30:	464b      	mov	r3, r9
 8004f32:	460a      	mov	r2, r1
 8004f34:	eb42 0303 	adc.w	r3, r2, r3
 8004f38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f46:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004f48:	f04f 0200 	mov.w	r2, #0
 8004f4c:	f04f 0300 	mov.w	r3, #0
 8004f50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004f54:	4649      	mov	r1, r9
 8004f56:	008b      	lsls	r3, r1, #2
 8004f58:	4641      	mov	r1, r8
 8004f5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f5e:	4641      	mov	r1, r8
 8004f60:	008a      	lsls	r2, r1, #2
 8004f62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004f66:	f7fb fe97 	bl	8000c98 <__aeabi_uldivmod>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	4611      	mov	r1, r2
 8004f70:	4b38      	ldr	r3, [pc, #224]	; (8005054 <UART_SetConfig+0x4e4>)
 8004f72:	fba3 2301 	umull	r2, r3, r3, r1
 8004f76:	095b      	lsrs	r3, r3, #5
 8004f78:	2264      	movs	r2, #100	; 0x64
 8004f7a:	fb02 f303 	mul.w	r3, r2, r3
 8004f7e:	1acb      	subs	r3, r1, r3
 8004f80:	011b      	lsls	r3, r3, #4
 8004f82:	3332      	adds	r3, #50	; 0x32
 8004f84:	4a33      	ldr	r2, [pc, #204]	; (8005054 <UART_SetConfig+0x4e4>)
 8004f86:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8a:	095b      	lsrs	r3, r3, #5
 8004f8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f90:	441c      	add	r4, r3
 8004f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f96:	2200      	movs	r2, #0
 8004f98:	673b      	str	r3, [r7, #112]	; 0x70
 8004f9a:	677a      	str	r2, [r7, #116]	; 0x74
 8004f9c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004fa0:	4642      	mov	r2, r8
 8004fa2:	464b      	mov	r3, r9
 8004fa4:	1891      	adds	r1, r2, r2
 8004fa6:	60b9      	str	r1, [r7, #8]
 8004fa8:	415b      	adcs	r3, r3
 8004faa:	60fb      	str	r3, [r7, #12]
 8004fac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fb0:	4641      	mov	r1, r8
 8004fb2:	1851      	adds	r1, r2, r1
 8004fb4:	6039      	str	r1, [r7, #0]
 8004fb6:	4649      	mov	r1, r9
 8004fb8:	414b      	adcs	r3, r1
 8004fba:	607b      	str	r3, [r7, #4]
 8004fbc:	f04f 0200 	mov.w	r2, #0
 8004fc0:	f04f 0300 	mov.w	r3, #0
 8004fc4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004fc8:	4659      	mov	r1, fp
 8004fca:	00cb      	lsls	r3, r1, #3
 8004fcc:	4651      	mov	r1, sl
 8004fce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fd2:	4651      	mov	r1, sl
 8004fd4:	00ca      	lsls	r2, r1, #3
 8004fd6:	4610      	mov	r0, r2
 8004fd8:	4619      	mov	r1, r3
 8004fda:	4603      	mov	r3, r0
 8004fdc:	4642      	mov	r2, r8
 8004fde:	189b      	adds	r3, r3, r2
 8004fe0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fe2:	464b      	mov	r3, r9
 8004fe4:	460a      	mov	r2, r1
 8004fe6:	eb42 0303 	adc.w	r3, r2, r3
 8004fea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	663b      	str	r3, [r7, #96]	; 0x60
 8004ff6:	667a      	str	r2, [r7, #100]	; 0x64
 8004ff8:	f04f 0200 	mov.w	r2, #0
 8004ffc:	f04f 0300 	mov.w	r3, #0
 8005000:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005004:	4649      	mov	r1, r9
 8005006:	008b      	lsls	r3, r1, #2
 8005008:	4641      	mov	r1, r8
 800500a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800500e:	4641      	mov	r1, r8
 8005010:	008a      	lsls	r2, r1, #2
 8005012:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005016:	f7fb fe3f 	bl	8000c98 <__aeabi_uldivmod>
 800501a:	4602      	mov	r2, r0
 800501c:	460b      	mov	r3, r1
 800501e:	4b0d      	ldr	r3, [pc, #52]	; (8005054 <UART_SetConfig+0x4e4>)
 8005020:	fba3 1302 	umull	r1, r3, r3, r2
 8005024:	095b      	lsrs	r3, r3, #5
 8005026:	2164      	movs	r1, #100	; 0x64
 8005028:	fb01 f303 	mul.w	r3, r1, r3
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	011b      	lsls	r3, r3, #4
 8005030:	3332      	adds	r3, #50	; 0x32
 8005032:	4a08      	ldr	r2, [pc, #32]	; (8005054 <UART_SetConfig+0x4e4>)
 8005034:	fba2 2303 	umull	r2, r3, r2, r3
 8005038:	095b      	lsrs	r3, r3, #5
 800503a:	f003 020f 	and.w	r2, r3, #15
 800503e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4422      	add	r2, r4
 8005046:	609a      	str	r2, [r3, #8]
}
 8005048:	bf00      	nop
 800504a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800504e:	46bd      	mov	sp, r7
 8005050:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005054:	51eb851f 	.word	0x51eb851f

08005058 <__cvt>:
 8005058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800505c:	ec55 4b10 	vmov	r4, r5, d0
 8005060:	2d00      	cmp	r5, #0
 8005062:	460e      	mov	r6, r1
 8005064:	4619      	mov	r1, r3
 8005066:	462b      	mov	r3, r5
 8005068:	bfbb      	ittet	lt
 800506a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800506e:	461d      	movlt	r5, r3
 8005070:	2300      	movge	r3, #0
 8005072:	232d      	movlt	r3, #45	; 0x2d
 8005074:	700b      	strb	r3, [r1, #0]
 8005076:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005078:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800507c:	4691      	mov	r9, r2
 800507e:	f023 0820 	bic.w	r8, r3, #32
 8005082:	bfbc      	itt	lt
 8005084:	4622      	movlt	r2, r4
 8005086:	4614      	movlt	r4, r2
 8005088:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800508c:	d005      	beq.n	800509a <__cvt+0x42>
 800508e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005092:	d100      	bne.n	8005096 <__cvt+0x3e>
 8005094:	3601      	adds	r6, #1
 8005096:	2102      	movs	r1, #2
 8005098:	e000      	b.n	800509c <__cvt+0x44>
 800509a:	2103      	movs	r1, #3
 800509c:	ab03      	add	r3, sp, #12
 800509e:	9301      	str	r3, [sp, #4]
 80050a0:	ab02      	add	r3, sp, #8
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	ec45 4b10 	vmov	d0, r4, r5
 80050a8:	4653      	mov	r3, sl
 80050aa:	4632      	mov	r2, r6
 80050ac:	f001 f86c 	bl	8006188 <_dtoa_r>
 80050b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80050b4:	4607      	mov	r7, r0
 80050b6:	d102      	bne.n	80050be <__cvt+0x66>
 80050b8:	f019 0f01 	tst.w	r9, #1
 80050bc:	d022      	beq.n	8005104 <__cvt+0xac>
 80050be:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80050c2:	eb07 0906 	add.w	r9, r7, r6
 80050c6:	d110      	bne.n	80050ea <__cvt+0x92>
 80050c8:	783b      	ldrb	r3, [r7, #0]
 80050ca:	2b30      	cmp	r3, #48	; 0x30
 80050cc:	d10a      	bne.n	80050e4 <__cvt+0x8c>
 80050ce:	2200      	movs	r2, #0
 80050d0:	2300      	movs	r3, #0
 80050d2:	4620      	mov	r0, r4
 80050d4:	4629      	mov	r1, r5
 80050d6:	f7fb fcff 	bl	8000ad8 <__aeabi_dcmpeq>
 80050da:	b918      	cbnz	r0, 80050e4 <__cvt+0x8c>
 80050dc:	f1c6 0601 	rsb	r6, r6, #1
 80050e0:	f8ca 6000 	str.w	r6, [sl]
 80050e4:	f8da 3000 	ldr.w	r3, [sl]
 80050e8:	4499      	add	r9, r3
 80050ea:	2200      	movs	r2, #0
 80050ec:	2300      	movs	r3, #0
 80050ee:	4620      	mov	r0, r4
 80050f0:	4629      	mov	r1, r5
 80050f2:	f7fb fcf1 	bl	8000ad8 <__aeabi_dcmpeq>
 80050f6:	b108      	cbz	r0, 80050fc <__cvt+0xa4>
 80050f8:	f8cd 900c 	str.w	r9, [sp, #12]
 80050fc:	2230      	movs	r2, #48	; 0x30
 80050fe:	9b03      	ldr	r3, [sp, #12]
 8005100:	454b      	cmp	r3, r9
 8005102:	d307      	bcc.n	8005114 <__cvt+0xbc>
 8005104:	9b03      	ldr	r3, [sp, #12]
 8005106:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005108:	1bdb      	subs	r3, r3, r7
 800510a:	4638      	mov	r0, r7
 800510c:	6013      	str	r3, [r2, #0]
 800510e:	b004      	add	sp, #16
 8005110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005114:	1c59      	adds	r1, r3, #1
 8005116:	9103      	str	r1, [sp, #12]
 8005118:	701a      	strb	r2, [r3, #0]
 800511a:	e7f0      	b.n	80050fe <__cvt+0xa6>

0800511c <__exponent>:
 800511c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800511e:	4603      	mov	r3, r0
 8005120:	2900      	cmp	r1, #0
 8005122:	bfb8      	it	lt
 8005124:	4249      	neglt	r1, r1
 8005126:	f803 2b02 	strb.w	r2, [r3], #2
 800512a:	bfb4      	ite	lt
 800512c:	222d      	movlt	r2, #45	; 0x2d
 800512e:	222b      	movge	r2, #43	; 0x2b
 8005130:	2909      	cmp	r1, #9
 8005132:	7042      	strb	r2, [r0, #1]
 8005134:	dd2a      	ble.n	800518c <__exponent+0x70>
 8005136:	f10d 0207 	add.w	r2, sp, #7
 800513a:	4617      	mov	r7, r2
 800513c:	260a      	movs	r6, #10
 800513e:	4694      	mov	ip, r2
 8005140:	fb91 f5f6 	sdiv	r5, r1, r6
 8005144:	fb06 1415 	mls	r4, r6, r5, r1
 8005148:	3430      	adds	r4, #48	; 0x30
 800514a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800514e:	460c      	mov	r4, r1
 8005150:	2c63      	cmp	r4, #99	; 0x63
 8005152:	f102 32ff 	add.w	r2, r2, #4294967295
 8005156:	4629      	mov	r1, r5
 8005158:	dcf1      	bgt.n	800513e <__exponent+0x22>
 800515a:	3130      	adds	r1, #48	; 0x30
 800515c:	f1ac 0402 	sub.w	r4, ip, #2
 8005160:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005164:	1c41      	adds	r1, r0, #1
 8005166:	4622      	mov	r2, r4
 8005168:	42ba      	cmp	r2, r7
 800516a:	d30a      	bcc.n	8005182 <__exponent+0x66>
 800516c:	f10d 0209 	add.w	r2, sp, #9
 8005170:	eba2 020c 	sub.w	r2, r2, ip
 8005174:	42bc      	cmp	r4, r7
 8005176:	bf88      	it	hi
 8005178:	2200      	movhi	r2, #0
 800517a:	4413      	add	r3, r2
 800517c:	1a18      	subs	r0, r3, r0
 800517e:	b003      	add	sp, #12
 8005180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005182:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005186:	f801 5f01 	strb.w	r5, [r1, #1]!
 800518a:	e7ed      	b.n	8005168 <__exponent+0x4c>
 800518c:	2330      	movs	r3, #48	; 0x30
 800518e:	3130      	adds	r1, #48	; 0x30
 8005190:	7083      	strb	r3, [r0, #2]
 8005192:	70c1      	strb	r1, [r0, #3]
 8005194:	1d03      	adds	r3, r0, #4
 8005196:	e7f1      	b.n	800517c <__exponent+0x60>

08005198 <_printf_float>:
 8005198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800519c:	ed2d 8b02 	vpush	{d8}
 80051a0:	b08d      	sub	sp, #52	; 0x34
 80051a2:	460c      	mov	r4, r1
 80051a4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80051a8:	4616      	mov	r6, r2
 80051aa:	461f      	mov	r7, r3
 80051ac:	4605      	mov	r5, r0
 80051ae:	f000 fee5 	bl	8005f7c <_localeconv_r>
 80051b2:	f8d0 a000 	ldr.w	sl, [r0]
 80051b6:	4650      	mov	r0, sl
 80051b8:	f7fb f862 	bl	8000280 <strlen>
 80051bc:	2300      	movs	r3, #0
 80051be:	930a      	str	r3, [sp, #40]	; 0x28
 80051c0:	6823      	ldr	r3, [r4, #0]
 80051c2:	9305      	str	r3, [sp, #20]
 80051c4:	f8d8 3000 	ldr.w	r3, [r8]
 80051c8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80051cc:	3307      	adds	r3, #7
 80051ce:	f023 0307 	bic.w	r3, r3, #7
 80051d2:	f103 0208 	add.w	r2, r3, #8
 80051d6:	f8c8 2000 	str.w	r2, [r8]
 80051da:	e9d3 8900 	ldrd	r8, r9, [r3]
 80051de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80051e2:	9307      	str	r3, [sp, #28]
 80051e4:	f8cd 8018 	str.w	r8, [sp, #24]
 80051e8:	ee08 0a10 	vmov	s16, r0
 80051ec:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80051f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051f4:	4b9e      	ldr	r3, [pc, #632]	; (8005470 <_printf_float+0x2d8>)
 80051f6:	f04f 32ff 	mov.w	r2, #4294967295
 80051fa:	f7fb fc9f 	bl	8000b3c <__aeabi_dcmpun>
 80051fe:	bb88      	cbnz	r0, 8005264 <_printf_float+0xcc>
 8005200:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005204:	4b9a      	ldr	r3, [pc, #616]	; (8005470 <_printf_float+0x2d8>)
 8005206:	f04f 32ff 	mov.w	r2, #4294967295
 800520a:	f7fb fc79 	bl	8000b00 <__aeabi_dcmple>
 800520e:	bb48      	cbnz	r0, 8005264 <_printf_float+0xcc>
 8005210:	2200      	movs	r2, #0
 8005212:	2300      	movs	r3, #0
 8005214:	4640      	mov	r0, r8
 8005216:	4649      	mov	r1, r9
 8005218:	f7fb fc68 	bl	8000aec <__aeabi_dcmplt>
 800521c:	b110      	cbz	r0, 8005224 <_printf_float+0x8c>
 800521e:	232d      	movs	r3, #45	; 0x2d
 8005220:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005224:	4a93      	ldr	r2, [pc, #588]	; (8005474 <_printf_float+0x2dc>)
 8005226:	4b94      	ldr	r3, [pc, #592]	; (8005478 <_printf_float+0x2e0>)
 8005228:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800522c:	bf94      	ite	ls
 800522e:	4690      	movls	r8, r2
 8005230:	4698      	movhi	r8, r3
 8005232:	2303      	movs	r3, #3
 8005234:	6123      	str	r3, [r4, #16]
 8005236:	9b05      	ldr	r3, [sp, #20]
 8005238:	f023 0304 	bic.w	r3, r3, #4
 800523c:	6023      	str	r3, [r4, #0]
 800523e:	f04f 0900 	mov.w	r9, #0
 8005242:	9700      	str	r7, [sp, #0]
 8005244:	4633      	mov	r3, r6
 8005246:	aa0b      	add	r2, sp, #44	; 0x2c
 8005248:	4621      	mov	r1, r4
 800524a:	4628      	mov	r0, r5
 800524c:	f000 f9da 	bl	8005604 <_printf_common>
 8005250:	3001      	adds	r0, #1
 8005252:	f040 8090 	bne.w	8005376 <_printf_float+0x1de>
 8005256:	f04f 30ff 	mov.w	r0, #4294967295
 800525a:	b00d      	add	sp, #52	; 0x34
 800525c:	ecbd 8b02 	vpop	{d8}
 8005260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005264:	4642      	mov	r2, r8
 8005266:	464b      	mov	r3, r9
 8005268:	4640      	mov	r0, r8
 800526a:	4649      	mov	r1, r9
 800526c:	f7fb fc66 	bl	8000b3c <__aeabi_dcmpun>
 8005270:	b140      	cbz	r0, 8005284 <_printf_float+0xec>
 8005272:	464b      	mov	r3, r9
 8005274:	2b00      	cmp	r3, #0
 8005276:	bfbc      	itt	lt
 8005278:	232d      	movlt	r3, #45	; 0x2d
 800527a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800527e:	4a7f      	ldr	r2, [pc, #508]	; (800547c <_printf_float+0x2e4>)
 8005280:	4b7f      	ldr	r3, [pc, #508]	; (8005480 <_printf_float+0x2e8>)
 8005282:	e7d1      	b.n	8005228 <_printf_float+0x90>
 8005284:	6863      	ldr	r3, [r4, #4]
 8005286:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800528a:	9206      	str	r2, [sp, #24]
 800528c:	1c5a      	adds	r2, r3, #1
 800528e:	d13f      	bne.n	8005310 <_printf_float+0x178>
 8005290:	2306      	movs	r3, #6
 8005292:	6063      	str	r3, [r4, #4]
 8005294:	9b05      	ldr	r3, [sp, #20]
 8005296:	6861      	ldr	r1, [r4, #4]
 8005298:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800529c:	2300      	movs	r3, #0
 800529e:	9303      	str	r3, [sp, #12]
 80052a0:	ab0a      	add	r3, sp, #40	; 0x28
 80052a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80052a6:	ab09      	add	r3, sp, #36	; 0x24
 80052a8:	ec49 8b10 	vmov	d0, r8, r9
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	6022      	str	r2, [r4, #0]
 80052b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80052b4:	4628      	mov	r0, r5
 80052b6:	f7ff fecf 	bl	8005058 <__cvt>
 80052ba:	9b06      	ldr	r3, [sp, #24]
 80052bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052be:	2b47      	cmp	r3, #71	; 0x47
 80052c0:	4680      	mov	r8, r0
 80052c2:	d108      	bne.n	80052d6 <_printf_float+0x13e>
 80052c4:	1cc8      	adds	r0, r1, #3
 80052c6:	db02      	blt.n	80052ce <_printf_float+0x136>
 80052c8:	6863      	ldr	r3, [r4, #4]
 80052ca:	4299      	cmp	r1, r3
 80052cc:	dd41      	ble.n	8005352 <_printf_float+0x1ba>
 80052ce:	f1ab 0302 	sub.w	r3, fp, #2
 80052d2:	fa5f fb83 	uxtb.w	fp, r3
 80052d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80052da:	d820      	bhi.n	800531e <_printf_float+0x186>
 80052dc:	3901      	subs	r1, #1
 80052de:	465a      	mov	r2, fp
 80052e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80052e4:	9109      	str	r1, [sp, #36]	; 0x24
 80052e6:	f7ff ff19 	bl	800511c <__exponent>
 80052ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052ec:	1813      	adds	r3, r2, r0
 80052ee:	2a01      	cmp	r2, #1
 80052f0:	4681      	mov	r9, r0
 80052f2:	6123      	str	r3, [r4, #16]
 80052f4:	dc02      	bgt.n	80052fc <_printf_float+0x164>
 80052f6:	6822      	ldr	r2, [r4, #0]
 80052f8:	07d2      	lsls	r2, r2, #31
 80052fa:	d501      	bpl.n	8005300 <_printf_float+0x168>
 80052fc:	3301      	adds	r3, #1
 80052fe:	6123      	str	r3, [r4, #16]
 8005300:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005304:	2b00      	cmp	r3, #0
 8005306:	d09c      	beq.n	8005242 <_printf_float+0xaa>
 8005308:	232d      	movs	r3, #45	; 0x2d
 800530a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800530e:	e798      	b.n	8005242 <_printf_float+0xaa>
 8005310:	9a06      	ldr	r2, [sp, #24]
 8005312:	2a47      	cmp	r2, #71	; 0x47
 8005314:	d1be      	bne.n	8005294 <_printf_float+0xfc>
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1bc      	bne.n	8005294 <_printf_float+0xfc>
 800531a:	2301      	movs	r3, #1
 800531c:	e7b9      	b.n	8005292 <_printf_float+0xfa>
 800531e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005322:	d118      	bne.n	8005356 <_printf_float+0x1be>
 8005324:	2900      	cmp	r1, #0
 8005326:	6863      	ldr	r3, [r4, #4]
 8005328:	dd0b      	ble.n	8005342 <_printf_float+0x1aa>
 800532a:	6121      	str	r1, [r4, #16]
 800532c:	b913      	cbnz	r3, 8005334 <_printf_float+0x19c>
 800532e:	6822      	ldr	r2, [r4, #0]
 8005330:	07d0      	lsls	r0, r2, #31
 8005332:	d502      	bpl.n	800533a <_printf_float+0x1a2>
 8005334:	3301      	adds	r3, #1
 8005336:	440b      	add	r3, r1
 8005338:	6123      	str	r3, [r4, #16]
 800533a:	65a1      	str	r1, [r4, #88]	; 0x58
 800533c:	f04f 0900 	mov.w	r9, #0
 8005340:	e7de      	b.n	8005300 <_printf_float+0x168>
 8005342:	b913      	cbnz	r3, 800534a <_printf_float+0x1b2>
 8005344:	6822      	ldr	r2, [r4, #0]
 8005346:	07d2      	lsls	r2, r2, #31
 8005348:	d501      	bpl.n	800534e <_printf_float+0x1b6>
 800534a:	3302      	adds	r3, #2
 800534c:	e7f4      	b.n	8005338 <_printf_float+0x1a0>
 800534e:	2301      	movs	r3, #1
 8005350:	e7f2      	b.n	8005338 <_printf_float+0x1a0>
 8005352:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005358:	4299      	cmp	r1, r3
 800535a:	db05      	blt.n	8005368 <_printf_float+0x1d0>
 800535c:	6823      	ldr	r3, [r4, #0]
 800535e:	6121      	str	r1, [r4, #16]
 8005360:	07d8      	lsls	r0, r3, #31
 8005362:	d5ea      	bpl.n	800533a <_printf_float+0x1a2>
 8005364:	1c4b      	adds	r3, r1, #1
 8005366:	e7e7      	b.n	8005338 <_printf_float+0x1a0>
 8005368:	2900      	cmp	r1, #0
 800536a:	bfd4      	ite	le
 800536c:	f1c1 0202 	rsble	r2, r1, #2
 8005370:	2201      	movgt	r2, #1
 8005372:	4413      	add	r3, r2
 8005374:	e7e0      	b.n	8005338 <_printf_float+0x1a0>
 8005376:	6823      	ldr	r3, [r4, #0]
 8005378:	055a      	lsls	r2, r3, #21
 800537a:	d407      	bmi.n	800538c <_printf_float+0x1f4>
 800537c:	6923      	ldr	r3, [r4, #16]
 800537e:	4642      	mov	r2, r8
 8005380:	4631      	mov	r1, r6
 8005382:	4628      	mov	r0, r5
 8005384:	47b8      	blx	r7
 8005386:	3001      	adds	r0, #1
 8005388:	d12c      	bne.n	80053e4 <_printf_float+0x24c>
 800538a:	e764      	b.n	8005256 <_printf_float+0xbe>
 800538c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005390:	f240 80e0 	bls.w	8005554 <_printf_float+0x3bc>
 8005394:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005398:	2200      	movs	r2, #0
 800539a:	2300      	movs	r3, #0
 800539c:	f7fb fb9c 	bl	8000ad8 <__aeabi_dcmpeq>
 80053a0:	2800      	cmp	r0, #0
 80053a2:	d034      	beq.n	800540e <_printf_float+0x276>
 80053a4:	4a37      	ldr	r2, [pc, #220]	; (8005484 <_printf_float+0x2ec>)
 80053a6:	2301      	movs	r3, #1
 80053a8:	4631      	mov	r1, r6
 80053aa:	4628      	mov	r0, r5
 80053ac:	47b8      	blx	r7
 80053ae:	3001      	adds	r0, #1
 80053b0:	f43f af51 	beq.w	8005256 <_printf_float+0xbe>
 80053b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053b8:	429a      	cmp	r2, r3
 80053ba:	db02      	blt.n	80053c2 <_printf_float+0x22a>
 80053bc:	6823      	ldr	r3, [r4, #0]
 80053be:	07d8      	lsls	r0, r3, #31
 80053c0:	d510      	bpl.n	80053e4 <_printf_float+0x24c>
 80053c2:	ee18 3a10 	vmov	r3, s16
 80053c6:	4652      	mov	r2, sl
 80053c8:	4631      	mov	r1, r6
 80053ca:	4628      	mov	r0, r5
 80053cc:	47b8      	blx	r7
 80053ce:	3001      	adds	r0, #1
 80053d0:	f43f af41 	beq.w	8005256 <_printf_float+0xbe>
 80053d4:	f04f 0800 	mov.w	r8, #0
 80053d8:	f104 091a 	add.w	r9, r4, #26
 80053dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053de:	3b01      	subs	r3, #1
 80053e0:	4543      	cmp	r3, r8
 80053e2:	dc09      	bgt.n	80053f8 <_printf_float+0x260>
 80053e4:	6823      	ldr	r3, [r4, #0]
 80053e6:	079b      	lsls	r3, r3, #30
 80053e8:	f100 8107 	bmi.w	80055fa <_printf_float+0x462>
 80053ec:	68e0      	ldr	r0, [r4, #12]
 80053ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053f0:	4298      	cmp	r0, r3
 80053f2:	bfb8      	it	lt
 80053f4:	4618      	movlt	r0, r3
 80053f6:	e730      	b.n	800525a <_printf_float+0xc2>
 80053f8:	2301      	movs	r3, #1
 80053fa:	464a      	mov	r2, r9
 80053fc:	4631      	mov	r1, r6
 80053fe:	4628      	mov	r0, r5
 8005400:	47b8      	blx	r7
 8005402:	3001      	adds	r0, #1
 8005404:	f43f af27 	beq.w	8005256 <_printf_float+0xbe>
 8005408:	f108 0801 	add.w	r8, r8, #1
 800540c:	e7e6      	b.n	80053dc <_printf_float+0x244>
 800540e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005410:	2b00      	cmp	r3, #0
 8005412:	dc39      	bgt.n	8005488 <_printf_float+0x2f0>
 8005414:	4a1b      	ldr	r2, [pc, #108]	; (8005484 <_printf_float+0x2ec>)
 8005416:	2301      	movs	r3, #1
 8005418:	4631      	mov	r1, r6
 800541a:	4628      	mov	r0, r5
 800541c:	47b8      	blx	r7
 800541e:	3001      	adds	r0, #1
 8005420:	f43f af19 	beq.w	8005256 <_printf_float+0xbe>
 8005424:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005428:	4313      	orrs	r3, r2
 800542a:	d102      	bne.n	8005432 <_printf_float+0x29a>
 800542c:	6823      	ldr	r3, [r4, #0]
 800542e:	07d9      	lsls	r1, r3, #31
 8005430:	d5d8      	bpl.n	80053e4 <_printf_float+0x24c>
 8005432:	ee18 3a10 	vmov	r3, s16
 8005436:	4652      	mov	r2, sl
 8005438:	4631      	mov	r1, r6
 800543a:	4628      	mov	r0, r5
 800543c:	47b8      	blx	r7
 800543e:	3001      	adds	r0, #1
 8005440:	f43f af09 	beq.w	8005256 <_printf_float+0xbe>
 8005444:	f04f 0900 	mov.w	r9, #0
 8005448:	f104 0a1a 	add.w	sl, r4, #26
 800544c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800544e:	425b      	negs	r3, r3
 8005450:	454b      	cmp	r3, r9
 8005452:	dc01      	bgt.n	8005458 <_printf_float+0x2c0>
 8005454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005456:	e792      	b.n	800537e <_printf_float+0x1e6>
 8005458:	2301      	movs	r3, #1
 800545a:	4652      	mov	r2, sl
 800545c:	4631      	mov	r1, r6
 800545e:	4628      	mov	r0, r5
 8005460:	47b8      	blx	r7
 8005462:	3001      	adds	r0, #1
 8005464:	f43f aef7 	beq.w	8005256 <_printf_float+0xbe>
 8005468:	f109 0901 	add.w	r9, r9, #1
 800546c:	e7ee      	b.n	800544c <_printf_float+0x2b4>
 800546e:	bf00      	nop
 8005470:	7fefffff 	.word	0x7fefffff
 8005474:	0800b120 	.word	0x0800b120
 8005478:	0800b124 	.word	0x0800b124
 800547c:	0800b128 	.word	0x0800b128
 8005480:	0800b12c 	.word	0x0800b12c
 8005484:	0800b130 	.word	0x0800b130
 8005488:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800548a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800548c:	429a      	cmp	r2, r3
 800548e:	bfa8      	it	ge
 8005490:	461a      	movge	r2, r3
 8005492:	2a00      	cmp	r2, #0
 8005494:	4691      	mov	r9, r2
 8005496:	dc37      	bgt.n	8005508 <_printf_float+0x370>
 8005498:	f04f 0b00 	mov.w	fp, #0
 800549c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054a0:	f104 021a 	add.w	r2, r4, #26
 80054a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80054a6:	9305      	str	r3, [sp, #20]
 80054a8:	eba3 0309 	sub.w	r3, r3, r9
 80054ac:	455b      	cmp	r3, fp
 80054ae:	dc33      	bgt.n	8005518 <_printf_float+0x380>
 80054b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054b4:	429a      	cmp	r2, r3
 80054b6:	db3b      	blt.n	8005530 <_printf_float+0x398>
 80054b8:	6823      	ldr	r3, [r4, #0]
 80054ba:	07da      	lsls	r2, r3, #31
 80054bc:	d438      	bmi.n	8005530 <_printf_float+0x398>
 80054be:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80054c2:	eba2 0903 	sub.w	r9, r2, r3
 80054c6:	9b05      	ldr	r3, [sp, #20]
 80054c8:	1ad2      	subs	r2, r2, r3
 80054ca:	4591      	cmp	r9, r2
 80054cc:	bfa8      	it	ge
 80054ce:	4691      	movge	r9, r2
 80054d0:	f1b9 0f00 	cmp.w	r9, #0
 80054d4:	dc35      	bgt.n	8005542 <_printf_float+0x3aa>
 80054d6:	f04f 0800 	mov.w	r8, #0
 80054da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054de:	f104 0a1a 	add.w	sl, r4, #26
 80054e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054e6:	1a9b      	subs	r3, r3, r2
 80054e8:	eba3 0309 	sub.w	r3, r3, r9
 80054ec:	4543      	cmp	r3, r8
 80054ee:	f77f af79 	ble.w	80053e4 <_printf_float+0x24c>
 80054f2:	2301      	movs	r3, #1
 80054f4:	4652      	mov	r2, sl
 80054f6:	4631      	mov	r1, r6
 80054f8:	4628      	mov	r0, r5
 80054fa:	47b8      	blx	r7
 80054fc:	3001      	adds	r0, #1
 80054fe:	f43f aeaa 	beq.w	8005256 <_printf_float+0xbe>
 8005502:	f108 0801 	add.w	r8, r8, #1
 8005506:	e7ec      	b.n	80054e2 <_printf_float+0x34a>
 8005508:	4613      	mov	r3, r2
 800550a:	4631      	mov	r1, r6
 800550c:	4642      	mov	r2, r8
 800550e:	4628      	mov	r0, r5
 8005510:	47b8      	blx	r7
 8005512:	3001      	adds	r0, #1
 8005514:	d1c0      	bne.n	8005498 <_printf_float+0x300>
 8005516:	e69e      	b.n	8005256 <_printf_float+0xbe>
 8005518:	2301      	movs	r3, #1
 800551a:	4631      	mov	r1, r6
 800551c:	4628      	mov	r0, r5
 800551e:	9205      	str	r2, [sp, #20]
 8005520:	47b8      	blx	r7
 8005522:	3001      	adds	r0, #1
 8005524:	f43f ae97 	beq.w	8005256 <_printf_float+0xbe>
 8005528:	9a05      	ldr	r2, [sp, #20]
 800552a:	f10b 0b01 	add.w	fp, fp, #1
 800552e:	e7b9      	b.n	80054a4 <_printf_float+0x30c>
 8005530:	ee18 3a10 	vmov	r3, s16
 8005534:	4652      	mov	r2, sl
 8005536:	4631      	mov	r1, r6
 8005538:	4628      	mov	r0, r5
 800553a:	47b8      	blx	r7
 800553c:	3001      	adds	r0, #1
 800553e:	d1be      	bne.n	80054be <_printf_float+0x326>
 8005540:	e689      	b.n	8005256 <_printf_float+0xbe>
 8005542:	9a05      	ldr	r2, [sp, #20]
 8005544:	464b      	mov	r3, r9
 8005546:	4442      	add	r2, r8
 8005548:	4631      	mov	r1, r6
 800554a:	4628      	mov	r0, r5
 800554c:	47b8      	blx	r7
 800554e:	3001      	adds	r0, #1
 8005550:	d1c1      	bne.n	80054d6 <_printf_float+0x33e>
 8005552:	e680      	b.n	8005256 <_printf_float+0xbe>
 8005554:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005556:	2a01      	cmp	r2, #1
 8005558:	dc01      	bgt.n	800555e <_printf_float+0x3c6>
 800555a:	07db      	lsls	r3, r3, #31
 800555c:	d53a      	bpl.n	80055d4 <_printf_float+0x43c>
 800555e:	2301      	movs	r3, #1
 8005560:	4642      	mov	r2, r8
 8005562:	4631      	mov	r1, r6
 8005564:	4628      	mov	r0, r5
 8005566:	47b8      	blx	r7
 8005568:	3001      	adds	r0, #1
 800556a:	f43f ae74 	beq.w	8005256 <_printf_float+0xbe>
 800556e:	ee18 3a10 	vmov	r3, s16
 8005572:	4652      	mov	r2, sl
 8005574:	4631      	mov	r1, r6
 8005576:	4628      	mov	r0, r5
 8005578:	47b8      	blx	r7
 800557a:	3001      	adds	r0, #1
 800557c:	f43f ae6b 	beq.w	8005256 <_printf_float+0xbe>
 8005580:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005584:	2200      	movs	r2, #0
 8005586:	2300      	movs	r3, #0
 8005588:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800558c:	f7fb faa4 	bl	8000ad8 <__aeabi_dcmpeq>
 8005590:	b9d8      	cbnz	r0, 80055ca <_printf_float+0x432>
 8005592:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005596:	f108 0201 	add.w	r2, r8, #1
 800559a:	4631      	mov	r1, r6
 800559c:	4628      	mov	r0, r5
 800559e:	47b8      	blx	r7
 80055a0:	3001      	adds	r0, #1
 80055a2:	d10e      	bne.n	80055c2 <_printf_float+0x42a>
 80055a4:	e657      	b.n	8005256 <_printf_float+0xbe>
 80055a6:	2301      	movs	r3, #1
 80055a8:	4652      	mov	r2, sl
 80055aa:	4631      	mov	r1, r6
 80055ac:	4628      	mov	r0, r5
 80055ae:	47b8      	blx	r7
 80055b0:	3001      	adds	r0, #1
 80055b2:	f43f ae50 	beq.w	8005256 <_printf_float+0xbe>
 80055b6:	f108 0801 	add.w	r8, r8, #1
 80055ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055bc:	3b01      	subs	r3, #1
 80055be:	4543      	cmp	r3, r8
 80055c0:	dcf1      	bgt.n	80055a6 <_printf_float+0x40e>
 80055c2:	464b      	mov	r3, r9
 80055c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80055c8:	e6da      	b.n	8005380 <_printf_float+0x1e8>
 80055ca:	f04f 0800 	mov.w	r8, #0
 80055ce:	f104 0a1a 	add.w	sl, r4, #26
 80055d2:	e7f2      	b.n	80055ba <_printf_float+0x422>
 80055d4:	2301      	movs	r3, #1
 80055d6:	4642      	mov	r2, r8
 80055d8:	e7df      	b.n	800559a <_printf_float+0x402>
 80055da:	2301      	movs	r3, #1
 80055dc:	464a      	mov	r2, r9
 80055de:	4631      	mov	r1, r6
 80055e0:	4628      	mov	r0, r5
 80055e2:	47b8      	blx	r7
 80055e4:	3001      	adds	r0, #1
 80055e6:	f43f ae36 	beq.w	8005256 <_printf_float+0xbe>
 80055ea:	f108 0801 	add.w	r8, r8, #1
 80055ee:	68e3      	ldr	r3, [r4, #12]
 80055f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80055f2:	1a5b      	subs	r3, r3, r1
 80055f4:	4543      	cmp	r3, r8
 80055f6:	dcf0      	bgt.n	80055da <_printf_float+0x442>
 80055f8:	e6f8      	b.n	80053ec <_printf_float+0x254>
 80055fa:	f04f 0800 	mov.w	r8, #0
 80055fe:	f104 0919 	add.w	r9, r4, #25
 8005602:	e7f4      	b.n	80055ee <_printf_float+0x456>

08005604 <_printf_common>:
 8005604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005608:	4616      	mov	r6, r2
 800560a:	4699      	mov	r9, r3
 800560c:	688a      	ldr	r2, [r1, #8]
 800560e:	690b      	ldr	r3, [r1, #16]
 8005610:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005614:	4293      	cmp	r3, r2
 8005616:	bfb8      	it	lt
 8005618:	4613      	movlt	r3, r2
 800561a:	6033      	str	r3, [r6, #0]
 800561c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005620:	4607      	mov	r7, r0
 8005622:	460c      	mov	r4, r1
 8005624:	b10a      	cbz	r2, 800562a <_printf_common+0x26>
 8005626:	3301      	adds	r3, #1
 8005628:	6033      	str	r3, [r6, #0]
 800562a:	6823      	ldr	r3, [r4, #0]
 800562c:	0699      	lsls	r1, r3, #26
 800562e:	bf42      	ittt	mi
 8005630:	6833      	ldrmi	r3, [r6, #0]
 8005632:	3302      	addmi	r3, #2
 8005634:	6033      	strmi	r3, [r6, #0]
 8005636:	6825      	ldr	r5, [r4, #0]
 8005638:	f015 0506 	ands.w	r5, r5, #6
 800563c:	d106      	bne.n	800564c <_printf_common+0x48>
 800563e:	f104 0a19 	add.w	sl, r4, #25
 8005642:	68e3      	ldr	r3, [r4, #12]
 8005644:	6832      	ldr	r2, [r6, #0]
 8005646:	1a9b      	subs	r3, r3, r2
 8005648:	42ab      	cmp	r3, r5
 800564a:	dc26      	bgt.n	800569a <_printf_common+0x96>
 800564c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005650:	1e13      	subs	r3, r2, #0
 8005652:	6822      	ldr	r2, [r4, #0]
 8005654:	bf18      	it	ne
 8005656:	2301      	movne	r3, #1
 8005658:	0692      	lsls	r2, r2, #26
 800565a:	d42b      	bmi.n	80056b4 <_printf_common+0xb0>
 800565c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005660:	4649      	mov	r1, r9
 8005662:	4638      	mov	r0, r7
 8005664:	47c0      	blx	r8
 8005666:	3001      	adds	r0, #1
 8005668:	d01e      	beq.n	80056a8 <_printf_common+0xa4>
 800566a:	6823      	ldr	r3, [r4, #0]
 800566c:	6922      	ldr	r2, [r4, #16]
 800566e:	f003 0306 	and.w	r3, r3, #6
 8005672:	2b04      	cmp	r3, #4
 8005674:	bf02      	ittt	eq
 8005676:	68e5      	ldreq	r5, [r4, #12]
 8005678:	6833      	ldreq	r3, [r6, #0]
 800567a:	1aed      	subeq	r5, r5, r3
 800567c:	68a3      	ldr	r3, [r4, #8]
 800567e:	bf0c      	ite	eq
 8005680:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005684:	2500      	movne	r5, #0
 8005686:	4293      	cmp	r3, r2
 8005688:	bfc4      	itt	gt
 800568a:	1a9b      	subgt	r3, r3, r2
 800568c:	18ed      	addgt	r5, r5, r3
 800568e:	2600      	movs	r6, #0
 8005690:	341a      	adds	r4, #26
 8005692:	42b5      	cmp	r5, r6
 8005694:	d11a      	bne.n	80056cc <_printf_common+0xc8>
 8005696:	2000      	movs	r0, #0
 8005698:	e008      	b.n	80056ac <_printf_common+0xa8>
 800569a:	2301      	movs	r3, #1
 800569c:	4652      	mov	r2, sl
 800569e:	4649      	mov	r1, r9
 80056a0:	4638      	mov	r0, r7
 80056a2:	47c0      	blx	r8
 80056a4:	3001      	adds	r0, #1
 80056a6:	d103      	bne.n	80056b0 <_printf_common+0xac>
 80056a8:	f04f 30ff 	mov.w	r0, #4294967295
 80056ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056b0:	3501      	adds	r5, #1
 80056b2:	e7c6      	b.n	8005642 <_printf_common+0x3e>
 80056b4:	18e1      	adds	r1, r4, r3
 80056b6:	1c5a      	adds	r2, r3, #1
 80056b8:	2030      	movs	r0, #48	; 0x30
 80056ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056be:	4422      	add	r2, r4
 80056c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056c8:	3302      	adds	r3, #2
 80056ca:	e7c7      	b.n	800565c <_printf_common+0x58>
 80056cc:	2301      	movs	r3, #1
 80056ce:	4622      	mov	r2, r4
 80056d0:	4649      	mov	r1, r9
 80056d2:	4638      	mov	r0, r7
 80056d4:	47c0      	blx	r8
 80056d6:	3001      	adds	r0, #1
 80056d8:	d0e6      	beq.n	80056a8 <_printf_common+0xa4>
 80056da:	3601      	adds	r6, #1
 80056dc:	e7d9      	b.n	8005692 <_printf_common+0x8e>
	...

080056e0 <_printf_i>:
 80056e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056e4:	7e0f      	ldrb	r7, [r1, #24]
 80056e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80056e8:	2f78      	cmp	r7, #120	; 0x78
 80056ea:	4691      	mov	r9, r2
 80056ec:	4680      	mov	r8, r0
 80056ee:	460c      	mov	r4, r1
 80056f0:	469a      	mov	sl, r3
 80056f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80056f6:	d807      	bhi.n	8005708 <_printf_i+0x28>
 80056f8:	2f62      	cmp	r7, #98	; 0x62
 80056fa:	d80a      	bhi.n	8005712 <_printf_i+0x32>
 80056fc:	2f00      	cmp	r7, #0
 80056fe:	f000 80d4 	beq.w	80058aa <_printf_i+0x1ca>
 8005702:	2f58      	cmp	r7, #88	; 0x58
 8005704:	f000 80c0 	beq.w	8005888 <_printf_i+0x1a8>
 8005708:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800570c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005710:	e03a      	b.n	8005788 <_printf_i+0xa8>
 8005712:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005716:	2b15      	cmp	r3, #21
 8005718:	d8f6      	bhi.n	8005708 <_printf_i+0x28>
 800571a:	a101      	add	r1, pc, #4	; (adr r1, 8005720 <_printf_i+0x40>)
 800571c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005720:	08005779 	.word	0x08005779
 8005724:	0800578d 	.word	0x0800578d
 8005728:	08005709 	.word	0x08005709
 800572c:	08005709 	.word	0x08005709
 8005730:	08005709 	.word	0x08005709
 8005734:	08005709 	.word	0x08005709
 8005738:	0800578d 	.word	0x0800578d
 800573c:	08005709 	.word	0x08005709
 8005740:	08005709 	.word	0x08005709
 8005744:	08005709 	.word	0x08005709
 8005748:	08005709 	.word	0x08005709
 800574c:	08005891 	.word	0x08005891
 8005750:	080057b9 	.word	0x080057b9
 8005754:	0800584b 	.word	0x0800584b
 8005758:	08005709 	.word	0x08005709
 800575c:	08005709 	.word	0x08005709
 8005760:	080058b3 	.word	0x080058b3
 8005764:	08005709 	.word	0x08005709
 8005768:	080057b9 	.word	0x080057b9
 800576c:	08005709 	.word	0x08005709
 8005770:	08005709 	.word	0x08005709
 8005774:	08005853 	.word	0x08005853
 8005778:	682b      	ldr	r3, [r5, #0]
 800577a:	1d1a      	adds	r2, r3, #4
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	602a      	str	r2, [r5, #0]
 8005780:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005784:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005788:	2301      	movs	r3, #1
 800578a:	e09f      	b.n	80058cc <_printf_i+0x1ec>
 800578c:	6820      	ldr	r0, [r4, #0]
 800578e:	682b      	ldr	r3, [r5, #0]
 8005790:	0607      	lsls	r7, r0, #24
 8005792:	f103 0104 	add.w	r1, r3, #4
 8005796:	6029      	str	r1, [r5, #0]
 8005798:	d501      	bpl.n	800579e <_printf_i+0xbe>
 800579a:	681e      	ldr	r6, [r3, #0]
 800579c:	e003      	b.n	80057a6 <_printf_i+0xc6>
 800579e:	0646      	lsls	r6, r0, #25
 80057a0:	d5fb      	bpl.n	800579a <_printf_i+0xba>
 80057a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80057a6:	2e00      	cmp	r6, #0
 80057a8:	da03      	bge.n	80057b2 <_printf_i+0xd2>
 80057aa:	232d      	movs	r3, #45	; 0x2d
 80057ac:	4276      	negs	r6, r6
 80057ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057b2:	485a      	ldr	r0, [pc, #360]	; (800591c <_printf_i+0x23c>)
 80057b4:	230a      	movs	r3, #10
 80057b6:	e012      	b.n	80057de <_printf_i+0xfe>
 80057b8:	682b      	ldr	r3, [r5, #0]
 80057ba:	6820      	ldr	r0, [r4, #0]
 80057bc:	1d19      	adds	r1, r3, #4
 80057be:	6029      	str	r1, [r5, #0]
 80057c0:	0605      	lsls	r5, r0, #24
 80057c2:	d501      	bpl.n	80057c8 <_printf_i+0xe8>
 80057c4:	681e      	ldr	r6, [r3, #0]
 80057c6:	e002      	b.n	80057ce <_printf_i+0xee>
 80057c8:	0641      	lsls	r1, r0, #25
 80057ca:	d5fb      	bpl.n	80057c4 <_printf_i+0xe4>
 80057cc:	881e      	ldrh	r6, [r3, #0]
 80057ce:	4853      	ldr	r0, [pc, #332]	; (800591c <_printf_i+0x23c>)
 80057d0:	2f6f      	cmp	r7, #111	; 0x6f
 80057d2:	bf0c      	ite	eq
 80057d4:	2308      	moveq	r3, #8
 80057d6:	230a      	movne	r3, #10
 80057d8:	2100      	movs	r1, #0
 80057da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057de:	6865      	ldr	r5, [r4, #4]
 80057e0:	60a5      	str	r5, [r4, #8]
 80057e2:	2d00      	cmp	r5, #0
 80057e4:	bfa2      	ittt	ge
 80057e6:	6821      	ldrge	r1, [r4, #0]
 80057e8:	f021 0104 	bicge.w	r1, r1, #4
 80057ec:	6021      	strge	r1, [r4, #0]
 80057ee:	b90e      	cbnz	r6, 80057f4 <_printf_i+0x114>
 80057f0:	2d00      	cmp	r5, #0
 80057f2:	d04b      	beq.n	800588c <_printf_i+0x1ac>
 80057f4:	4615      	mov	r5, r2
 80057f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80057fa:	fb03 6711 	mls	r7, r3, r1, r6
 80057fe:	5dc7      	ldrb	r7, [r0, r7]
 8005800:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005804:	4637      	mov	r7, r6
 8005806:	42bb      	cmp	r3, r7
 8005808:	460e      	mov	r6, r1
 800580a:	d9f4      	bls.n	80057f6 <_printf_i+0x116>
 800580c:	2b08      	cmp	r3, #8
 800580e:	d10b      	bne.n	8005828 <_printf_i+0x148>
 8005810:	6823      	ldr	r3, [r4, #0]
 8005812:	07de      	lsls	r6, r3, #31
 8005814:	d508      	bpl.n	8005828 <_printf_i+0x148>
 8005816:	6923      	ldr	r3, [r4, #16]
 8005818:	6861      	ldr	r1, [r4, #4]
 800581a:	4299      	cmp	r1, r3
 800581c:	bfde      	ittt	le
 800581e:	2330      	movle	r3, #48	; 0x30
 8005820:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005824:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005828:	1b52      	subs	r2, r2, r5
 800582a:	6122      	str	r2, [r4, #16]
 800582c:	f8cd a000 	str.w	sl, [sp]
 8005830:	464b      	mov	r3, r9
 8005832:	aa03      	add	r2, sp, #12
 8005834:	4621      	mov	r1, r4
 8005836:	4640      	mov	r0, r8
 8005838:	f7ff fee4 	bl	8005604 <_printf_common>
 800583c:	3001      	adds	r0, #1
 800583e:	d14a      	bne.n	80058d6 <_printf_i+0x1f6>
 8005840:	f04f 30ff 	mov.w	r0, #4294967295
 8005844:	b004      	add	sp, #16
 8005846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800584a:	6823      	ldr	r3, [r4, #0]
 800584c:	f043 0320 	orr.w	r3, r3, #32
 8005850:	6023      	str	r3, [r4, #0]
 8005852:	4833      	ldr	r0, [pc, #204]	; (8005920 <_printf_i+0x240>)
 8005854:	2778      	movs	r7, #120	; 0x78
 8005856:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800585a:	6823      	ldr	r3, [r4, #0]
 800585c:	6829      	ldr	r1, [r5, #0]
 800585e:	061f      	lsls	r7, r3, #24
 8005860:	f851 6b04 	ldr.w	r6, [r1], #4
 8005864:	d402      	bmi.n	800586c <_printf_i+0x18c>
 8005866:	065f      	lsls	r7, r3, #25
 8005868:	bf48      	it	mi
 800586a:	b2b6      	uxthmi	r6, r6
 800586c:	07df      	lsls	r7, r3, #31
 800586e:	bf48      	it	mi
 8005870:	f043 0320 	orrmi.w	r3, r3, #32
 8005874:	6029      	str	r1, [r5, #0]
 8005876:	bf48      	it	mi
 8005878:	6023      	strmi	r3, [r4, #0]
 800587a:	b91e      	cbnz	r6, 8005884 <_printf_i+0x1a4>
 800587c:	6823      	ldr	r3, [r4, #0]
 800587e:	f023 0320 	bic.w	r3, r3, #32
 8005882:	6023      	str	r3, [r4, #0]
 8005884:	2310      	movs	r3, #16
 8005886:	e7a7      	b.n	80057d8 <_printf_i+0xf8>
 8005888:	4824      	ldr	r0, [pc, #144]	; (800591c <_printf_i+0x23c>)
 800588a:	e7e4      	b.n	8005856 <_printf_i+0x176>
 800588c:	4615      	mov	r5, r2
 800588e:	e7bd      	b.n	800580c <_printf_i+0x12c>
 8005890:	682b      	ldr	r3, [r5, #0]
 8005892:	6826      	ldr	r6, [r4, #0]
 8005894:	6961      	ldr	r1, [r4, #20]
 8005896:	1d18      	adds	r0, r3, #4
 8005898:	6028      	str	r0, [r5, #0]
 800589a:	0635      	lsls	r5, r6, #24
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	d501      	bpl.n	80058a4 <_printf_i+0x1c4>
 80058a0:	6019      	str	r1, [r3, #0]
 80058a2:	e002      	b.n	80058aa <_printf_i+0x1ca>
 80058a4:	0670      	lsls	r0, r6, #25
 80058a6:	d5fb      	bpl.n	80058a0 <_printf_i+0x1c0>
 80058a8:	8019      	strh	r1, [r3, #0]
 80058aa:	2300      	movs	r3, #0
 80058ac:	6123      	str	r3, [r4, #16]
 80058ae:	4615      	mov	r5, r2
 80058b0:	e7bc      	b.n	800582c <_printf_i+0x14c>
 80058b2:	682b      	ldr	r3, [r5, #0]
 80058b4:	1d1a      	adds	r2, r3, #4
 80058b6:	602a      	str	r2, [r5, #0]
 80058b8:	681d      	ldr	r5, [r3, #0]
 80058ba:	6862      	ldr	r2, [r4, #4]
 80058bc:	2100      	movs	r1, #0
 80058be:	4628      	mov	r0, r5
 80058c0:	f7fa fc8e 	bl	80001e0 <memchr>
 80058c4:	b108      	cbz	r0, 80058ca <_printf_i+0x1ea>
 80058c6:	1b40      	subs	r0, r0, r5
 80058c8:	6060      	str	r0, [r4, #4]
 80058ca:	6863      	ldr	r3, [r4, #4]
 80058cc:	6123      	str	r3, [r4, #16]
 80058ce:	2300      	movs	r3, #0
 80058d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058d4:	e7aa      	b.n	800582c <_printf_i+0x14c>
 80058d6:	6923      	ldr	r3, [r4, #16]
 80058d8:	462a      	mov	r2, r5
 80058da:	4649      	mov	r1, r9
 80058dc:	4640      	mov	r0, r8
 80058de:	47d0      	blx	sl
 80058e0:	3001      	adds	r0, #1
 80058e2:	d0ad      	beq.n	8005840 <_printf_i+0x160>
 80058e4:	6823      	ldr	r3, [r4, #0]
 80058e6:	079b      	lsls	r3, r3, #30
 80058e8:	d413      	bmi.n	8005912 <_printf_i+0x232>
 80058ea:	68e0      	ldr	r0, [r4, #12]
 80058ec:	9b03      	ldr	r3, [sp, #12]
 80058ee:	4298      	cmp	r0, r3
 80058f0:	bfb8      	it	lt
 80058f2:	4618      	movlt	r0, r3
 80058f4:	e7a6      	b.n	8005844 <_printf_i+0x164>
 80058f6:	2301      	movs	r3, #1
 80058f8:	4632      	mov	r2, r6
 80058fa:	4649      	mov	r1, r9
 80058fc:	4640      	mov	r0, r8
 80058fe:	47d0      	blx	sl
 8005900:	3001      	adds	r0, #1
 8005902:	d09d      	beq.n	8005840 <_printf_i+0x160>
 8005904:	3501      	adds	r5, #1
 8005906:	68e3      	ldr	r3, [r4, #12]
 8005908:	9903      	ldr	r1, [sp, #12]
 800590a:	1a5b      	subs	r3, r3, r1
 800590c:	42ab      	cmp	r3, r5
 800590e:	dcf2      	bgt.n	80058f6 <_printf_i+0x216>
 8005910:	e7eb      	b.n	80058ea <_printf_i+0x20a>
 8005912:	2500      	movs	r5, #0
 8005914:	f104 0619 	add.w	r6, r4, #25
 8005918:	e7f5      	b.n	8005906 <_printf_i+0x226>
 800591a:	bf00      	nop
 800591c:	0800b132 	.word	0x0800b132
 8005920:	0800b143 	.word	0x0800b143

08005924 <_scanf_float>:
 8005924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005928:	b087      	sub	sp, #28
 800592a:	4617      	mov	r7, r2
 800592c:	9303      	str	r3, [sp, #12]
 800592e:	688b      	ldr	r3, [r1, #8]
 8005930:	1e5a      	subs	r2, r3, #1
 8005932:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005936:	bf83      	ittte	hi
 8005938:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800593c:	195b      	addhi	r3, r3, r5
 800593e:	9302      	strhi	r3, [sp, #8]
 8005940:	2300      	movls	r3, #0
 8005942:	bf86      	itte	hi
 8005944:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005948:	608b      	strhi	r3, [r1, #8]
 800594a:	9302      	strls	r3, [sp, #8]
 800594c:	680b      	ldr	r3, [r1, #0]
 800594e:	468b      	mov	fp, r1
 8005950:	2500      	movs	r5, #0
 8005952:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005956:	f84b 3b1c 	str.w	r3, [fp], #28
 800595a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800595e:	4680      	mov	r8, r0
 8005960:	460c      	mov	r4, r1
 8005962:	465e      	mov	r6, fp
 8005964:	46aa      	mov	sl, r5
 8005966:	46a9      	mov	r9, r5
 8005968:	9501      	str	r5, [sp, #4]
 800596a:	68a2      	ldr	r2, [r4, #8]
 800596c:	b152      	cbz	r2, 8005984 <_scanf_float+0x60>
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	2b4e      	cmp	r3, #78	; 0x4e
 8005974:	d864      	bhi.n	8005a40 <_scanf_float+0x11c>
 8005976:	2b40      	cmp	r3, #64	; 0x40
 8005978:	d83c      	bhi.n	80059f4 <_scanf_float+0xd0>
 800597a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800597e:	b2c8      	uxtb	r0, r1
 8005980:	280e      	cmp	r0, #14
 8005982:	d93a      	bls.n	80059fa <_scanf_float+0xd6>
 8005984:	f1b9 0f00 	cmp.w	r9, #0
 8005988:	d003      	beq.n	8005992 <_scanf_float+0x6e>
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005990:	6023      	str	r3, [r4, #0]
 8005992:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005996:	f1ba 0f01 	cmp.w	sl, #1
 800599a:	f200 8113 	bhi.w	8005bc4 <_scanf_float+0x2a0>
 800599e:	455e      	cmp	r6, fp
 80059a0:	f200 8105 	bhi.w	8005bae <_scanf_float+0x28a>
 80059a4:	2501      	movs	r5, #1
 80059a6:	4628      	mov	r0, r5
 80059a8:	b007      	add	sp, #28
 80059aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ae:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80059b2:	2a0d      	cmp	r2, #13
 80059b4:	d8e6      	bhi.n	8005984 <_scanf_float+0x60>
 80059b6:	a101      	add	r1, pc, #4	; (adr r1, 80059bc <_scanf_float+0x98>)
 80059b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80059bc:	08005afb 	.word	0x08005afb
 80059c0:	08005985 	.word	0x08005985
 80059c4:	08005985 	.word	0x08005985
 80059c8:	08005985 	.word	0x08005985
 80059cc:	08005b5b 	.word	0x08005b5b
 80059d0:	08005b33 	.word	0x08005b33
 80059d4:	08005985 	.word	0x08005985
 80059d8:	08005985 	.word	0x08005985
 80059dc:	08005b09 	.word	0x08005b09
 80059e0:	08005985 	.word	0x08005985
 80059e4:	08005985 	.word	0x08005985
 80059e8:	08005985 	.word	0x08005985
 80059ec:	08005985 	.word	0x08005985
 80059f0:	08005ac1 	.word	0x08005ac1
 80059f4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80059f8:	e7db      	b.n	80059b2 <_scanf_float+0x8e>
 80059fa:	290e      	cmp	r1, #14
 80059fc:	d8c2      	bhi.n	8005984 <_scanf_float+0x60>
 80059fe:	a001      	add	r0, pc, #4	; (adr r0, 8005a04 <_scanf_float+0xe0>)
 8005a00:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005a04:	08005ab3 	.word	0x08005ab3
 8005a08:	08005985 	.word	0x08005985
 8005a0c:	08005ab3 	.word	0x08005ab3
 8005a10:	08005b47 	.word	0x08005b47
 8005a14:	08005985 	.word	0x08005985
 8005a18:	08005a61 	.word	0x08005a61
 8005a1c:	08005a9d 	.word	0x08005a9d
 8005a20:	08005a9d 	.word	0x08005a9d
 8005a24:	08005a9d 	.word	0x08005a9d
 8005a28:	08005a9d 	.word	0x08005a9d
 8005a2c:	08005a9d 	.word	0x08005a9d
 8005a30:	08005a9d 	.word	0x08005a9d
 8005a34:	08005a9d 	.word	0x08005a9d
 8005a38:	08005a9d 	.word	0x08005a9d
 8005a3c:	08005a9d 	.word	0x08005a9d
 8005a40:	2b6e      	cmp	r3, #110	; 0x6e
 8005a42:	d809      	bhi.n	8005a58 <_scanf_float+0x134>
 8005a44:	2b60      	cmp	r3, #96	; 0x60
 8005a46:	d8b2      	bhi.n	80059ae <_scanf_float+0x8a>
 8005a48:	2b54      	cmp	r3, #84	; 0x54
 8005a4a:	d077      	beq.n	8005b3c <_scanf_float+0x218>
 8005a4c:	2b59      	cmp	r3, #89	; 0x59
 8005a4e:	d199      	bne.n	8005984 <_scanf_float+0x60>
 8005a50:	2d07      	cmp	r5, #7
 8005a52:	d197      	bne.n	8005984 <_scanf_float+0x60>
 8005a54:	2508      	movs	r5, #8
 8005a56:	e029      	b.n	8005aac <_scanf_float+0x188>
 8005a58:	2b74      	cmp	r3, #116	; 0x74
 8005a5a:	d06f      	beq.n	8005b3c <_scanf_float+0x218>
 8005a5c:	2b79      	cmp	r3, #121	; 0x79
 8005a5e:	e7f6      	b.n	8005a4e <_scanf_float+0x12a>
 8005a60:	6821      	ldr	r1, [r4, #0]
 8005a62:	05c8      	lsls	r0, r1, #23
 8005a64:	d51a      	bpl.n	8005a9c <_scanf_float+0x178>
 8005a66:	9b02      	ldr	r3, [sp, #8]
 8005a68:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005a6c:	6021      	str	r1, [r4, #0]
 8005a6e:	f109 0901 	add.w	r9, r9, #1
 8005a72:	b11b      	cbz	r3, 8005a7c <_scanf_float+0x158>
 8005a74:	3b01      	subs	r3, #1
 8005a76:	3201      	adds	r2, #1
 8005a78:	9302      	str	r3, [sp, #8]
 8005a7a:	60a2      	str	r2, [r4, #8]
 8005a7c:	68a3      	ldr	r3, [r4, #8]
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	60a3      	str	r3, [r4, #8]
 8005a82:	6923      	ldr	r3, [r4, #16]
 8005a84:	3301      	adds	r3, #1
 8005a86:	6123      	str	r3, [r4, #16]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	607b      	str	r3, [r7, #4]
 8005a90:	f340 8084 	ble.w	8005b9c <_scanf_float+0x278>
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	3301      	adds	r3, #1
 8005a98:	603b      	str	r3, [r7, #0]
 8005a9a:	e766      	b.n	800596a <_scanf_float+0x46>
 8005a9c:	eb1a 0f05 	cmn.w	sl, r5
 8005aa0:	f47f af70 	bne.w	8005984 <_scanf_float+0x60>
 8005aa4:	6822      	ldr	r2, [r4, #0]
 8005aa6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005aaa:	6022      	str	r2, [r4, #0]
 8005aac:	f806 3b01 	strb.w	r3, [r6], #1
 8005ab0:	e7e4      	b.n	8005a7c <_scanf_float+0x158>
 8005ab2:	6822      	ldr	r2, [r4, #0]
 8005ab4:	0610      	lsls	r0, r2, #24
 8005ab6:	f57f af65 	bpl.w	8005984 <_scanf_float+0x60>
 8005aba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005abe:	e7f4      	b.n	8005aaa <_scanf_float+0x186>
 8005ac0:	f1ba 0f00 	cmp.w	sl, #0
 8005ac4:	d10e      	bne.n	8005ae4 <_scanf_float+0x1c0>
 8005ac6:	f1b9 0f00 	cmp.w	r9, #0
 8005aca:	d10e      	bne.n	8005aea <_scanf_float+0x1c6>
 8005acc:	6822      	ldr	r2, [r4, #0]
 8005ace:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005ad2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005ad6:	d108      	bne.n	8005aea <_scanf_float+0x1c6>
 8005ad8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005adc:	6022      	str	r2, [r4, #0]
 8005ade:	f04f 0a01 	mov.w	sl, #1
 8005ae2:	e7e3      	b.n	8005aac <_scanf_float+0x188>
 8005ae4:	f1ba 0f02 	cmp.w	sl, #2
 8005ae8:	d055      	beq.n	8005b96 <_scanf_float+0x272>
 8005aea:	2d01      	cmp	r5, #1
 8005aec:	d002      	beq.n	8005af4 <_scanf_float+0x1d0>
 8005aee:	2d04      	cmp	r5, #4
 8005af0:	f47f af48 	bne.w	8005984 <_scanf_float+0x60>
 8005af4:	3501      	adds	r5, #1
 8005af6:	b2ed      	uxtb	r5, r5
 8005af8:	e7d8      	b.n	8005aac <_scanf_float+0x188>
 8005afa:	f1ba 0f01 	cmp.w	sl, #1
 8005afe:	f47f af41 	bne.w	8005984 <_scanf_float+0x60>
 8005b02:	f04f 0a02 	mov.w	sl, #2
 8005b06:	e7d1      	b.n	8005aac <_scanf_float+0x188>
 8005b08:	b97d      	cbnz	r5, 8005b2a <_scanf_float+0x206>
 8005b0a:	f1b9 0f00 	cmp.w	r9, #0
 8005b0e:	f47f af3c 	bne.w	800598a <_scanf_float+0x66>
 8005b12:	6822      	ldr	r2, [r4, #0]
 8005b14:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005b18:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005b1c:	f47f af39 	bne.w	8005992 <_scanf_float+0x6e>
 8005b20:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005b24:	6022      	str	r2, [r4, #0]
 8005b26:	2501      	movs	r5, #1
 8005b28:	e7c0      	b.n	8005aac <_scanf_float+0x188>
 8005b2a:	2d03      	cmp	r5, #3
 8005b2c:	d0e2      	beq.n	8005af4 <_scanf_float+0x1d0>
 8005b2e:	2d05      	cmp	r5, #5
 8005b30:	e7de      	b.n	8005af0 <_scanf_float+0x1cc>
 8005b32:	2d02      	cmp	r5, #2
 8005b34:	f47f af26 	bne.w	8005984 <_scanf_float+0x60>
 8005b38:	2503      	movs	r5, #3
 8005b3a:	e7b7      	b.n	8005aac <_scanf_float+0x188>
 8005b3c:	2d06      	cmp	r5, #6
 8005b3e:	f47f af21 	bne.w	8005984 <_scanf_float+0x60>
 8005b42:	2507      	movs	r5, #7
 8005b44:	e7b2      	b.n	8005aac <_scanf_float+0x188>
 8005b46:	6822      	ldr	r2, [r4, #0]
 8005b48:	0591      	lsls	r1, r2, #22
 8005b4a:	f57f af1b 	bpl.w	8005984 <_scanf_float+0x60>
 8005b4e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005b52:	6022      	str	r2, [r4, #0]
 8005b54:	f8cd 9004 	str.w	r9, [sp, #4]
 8005b58:	e7a8      	b.n	8005aac <_scanf_float+0x188>
 8005b5a:	6822      	ldr	r2, [r4, #0]
 8005b5c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005b60:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005b64:	d006      	beq.n	8005b74 <_scanf_float+0x250>
 8005b66:	0550      	lsls	r0, r2, #21
 8005b68:	f57f af0c 	bpl.w	8005984 <_scanf_float+0x60>
 8005b6c:	f1b9 0f00 	cmp.w	r9, #0
 8005b70:	f43f af0f 	beq.w	8005992 <_scanf_float+0x6e>
 8005b74:	0591      	lsls	r1, r2, #22
 8005b76:	bf58      	it	pl
 8005b78:	9901      	ldrpl	r1, [sp, #4]
 8005b7a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005b7e:	bf58      	it	pl
 8005b80:	eba9 0101 	subpl.w	r1, r9, r1
 8005b84:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005b88:	bf58      	it	pl
 8005b8a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005b8e:	6022      	str	r2, [r4, #0]
 8005b90:	f04f 0900 	mov.w	r9, #0
 8005b94:	e78a      	b.n	8005aac <_scanf_float+0x188>
 8005b96:	f04f 0a03 	mov.w	sl, #3
 8005b9a:	e787      	b.n	8005aac <_scanf_float+0x188>
 8005b9c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005ba0:	4639      	mov	r1, r7
 8005ba2:	4640      	mov	r0, r8
 8005ba4:	4798      	blx	r3
 8005ba6:	2800      	cmp	r0, #0
 8005ba8:	f43f aedf 	beq.w	800596a <_scanf_float+0x46>
 8005bac:	e6ea      	b.n	8005984 <_scanf_float+0x60>
 8005bae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005bb2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005bb6:	463a      	mov	r2, r7
 8005bb8:	4640      	mov	r0, r8
 8005bba:	4798      	blx	r3
 8005bbc:	6923      	ldr	r3, [r4, #16]
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	6123      	str	r3, [r4, #16]
 8005bc2:	e6ec      	b.n	800599e <_scanf_float+0x7a>
 8005bc4:	1e6b      	subs	r3, r5, #1
 8005bc6:	2b06      	cmp	r3, #6
 8005bc8:	d825      	bhi.n	8005c16 <_scanf_float+0x2f2>
 8005bca:	2d02      	cmp	r5, #2
 8005bcc:	d836      	bhi.n	8005c3c <_scanf_float+0x318>
 8005bce:	455e      	cmp	r6, fp
 8005bd0:	f67f aee8 	bls.w	80059a4 <_scanf_float+0x80>
 8005bd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005bd8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005bdc:	463a      	mov	r2, r7
 8005bde:	4640      	mov	r0, r8
 8005be0:	4798      	blx	r3
 8005be2:	6923      	ldr	r3, [r4, #16]
 8005be4:	3b01      	subs	r3, #1
 8005be6:	6123      	str	r3, [r4, #16]
 8005be8:	e7f1      	b.n	8005bce <_scanf_float+0x2aa>
 8005bea:	9802      	ldr	r0, [sp, #8]
 8005bec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005bf0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005bf4:	9002      	str	r0, [sp, #8]
 8005bf6:	463a      	mov	r2, r7
 8005bf8:	4640      	mov	r0, r8
 8005bfa:	4798      	blx	r3
 8005bfc:	6923      	ldr	r3, [r4, #16]
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	6123      	str	r3, [r4, #16]
 8005c02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c06:	fa5f fa8a 	uxtb.w	sl, sl
 8005c0a:	f1ba 0f02 	cmp.w	sl, #2
 8005c0e:	d1ec      	bne.n	8005bea <_scanf_float+0x2c6>
 8005c10:	3d03      	subs	r5, #3
 8005c12:	b2ed      	uxtb	r5, r5
 8005c14:	1b76      	subs	r6, r6, r5
 8005c16:	6823      	ldr	r3, [r4, #0]
 8005c18:	05da      	lsls	r2, r3, #23
 8005c1a:	d52f      	bpl.n	8005c7c <_scanf_float+0x358>
 8005c1c:	055b      	lsls	r3, r3, #21
 8005c1e:	d510      	bpl.n	8005c42 <_scanf_float+0x31e>
 8005c20:	455e      	cmp	r6, fp
 8005c22:	f67f aebf 	bls.w	80059a4 <_scanf_float+0x80>
 8005c26:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c2a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005c2e:	463a      	mov	r2, r7
 8005c30:	4640      	mov	r0, r8
 8005c32:	4798      	blx	r3
 8005c34:	6923      	ldr	r3, [r4, #16]
 8005c36:	3b01      	subs	r3, #1
 8005c38:	6123      	str	r3, [r4, #16]
 8005c3a:	e7f1      	b.n	8005c20 <_scanf_float+0x2fc>
 8005c3c:	46aa      	mov	sl, r5
 8005c3e:	9602      	str	r6, [sp, #8]
 8005c40:	e7df      	b.n	8005c02 <_scanf_float+0x2de>
 8005c42:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005c46:	6923      	ldr	r3, [r4, #16]
 8005c48:	2965      	cmp	r1, #101	; 0x65
 8005c4a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005c4e:	f106 35ff 	add.w	r5, r6, #4294967295
 8005c52:	6123      	str	r3, [r4, #16]
 8005c54:	d00c      	beq.n	8005c70 <_scanf_float+0x34c>
 8005c56:	2945      	cmp	r1, #69	; 0x45
 8005c58:	d00a      	beq.n	8005c70 <_scanf_float+0x34c>
 8005c5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c5e:	463a      	mov	r2, r7
 8005c60:	4640      	mov	r0, r8
 8005c62:	4798      	blx	r3
 8005c64:	6923      	ldr	r3, [r4, #16]
 8005c66:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	1eb5      	subs	r5, r6, #2
 8005c6e:	6123      	str	r3, [r4, #16]
 8005c70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c74:	463a      	mov	r2, r7
 8005c76:	4640      	mov	r0, r8
 8005c78:	4798      	blx	r3
 8005c7a:	462e      	mov	r6, r5
 8005c7c:	6825      	ldr	r5, [r4, #0]
 8005c7e:	f015 0510 	ands.w	r5, r5, #16
 8005c82:	d158      	bne.n	8005d36 <_scanf_float+0x412>
 8005c84:	7035      	strb	r5, [r6, #0]
 8005c86:	6823      	ldr	r3, [r4, #0]
 8005c88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c90:	d11c      	bne.n	8005ccc <_scanf_float+0x3a8>
 8005c92:	9b01      	ldr	r3, [sp, #4]
 8005c94:	454b      	cmp	r3, r9
 8005c96:	eba3 0209 	sub.w	r2, r3, r9
 8005c9a:	d124      	bne.n	8005ce6 <_scanf_float+0x3c2>
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	4659      	mov	r1, fp
 8005ca0:	4640      	mov	r0, r8
 8005ca2:	f002 fc1d 	bl	80084e0 <_strtod_r>
 8005ca6:	9b03      	ldr	r3, [sp, #12]
 8005ca8:	6821      	ldr	r1, [r4, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f011 0f02 	tst.w	r1, #2
 8005cb0:	ec57 6b10 	vmov	r6, r7, d0
 8005cb4:	f103 0204 	add.w	r2, r3, #4
 8005cb8:	d020      	beq.n	8005cfc <_scanf_float+0x3d8>
 8005cba:	9903      	ldr	r1, [sp, #12]
 8005cbc:	600a      	str	r2, [r1, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	e9c3 6700 	strd	r6, r7, [r3]
 8005cc4:	68e3      	ldr	r3, [r4, #12]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	60e3      	str	r3, [r4, #12]
 8005cca:	e66c      	b.n	80059a6 <_scanf_float+0x82>
 8005ccc:	9b04      	ldr	r3, [sp, #16]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d0e4      	beq.n	8005c9c <_scanf_float+0x378>
 8005cd2:	9905      	ldr	r1, [sp, #20]
 8005cd4:	230a      	movs	r3, #10
 8005cd6:	462a      	mov	r2, r5
 8005cd8:	3101      	adds	r1, #1
 8005cda:	4640      	mov	r0, r8
 8005cdc:	f002 fc88 	bl	80085f0 <_strtol_r>
 8005ce0:	9b04      	ldr	r3, [sp, #16]
 8005ce2:	9e05      	ldr	r6, [sp, #20]
 8005ce4:	1ac2      	subs	r2, r0, r3
 8005ce6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005cea:	429e      	cmp	r6, r3
 8005cec:	bf28      	it	cs
 8005cee:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005cf2:	4912      	ldr	r1, [pc, #72]	; (8005d3c <_scanf_float+0x418>)
 8005cf4:	4630      	mov	r0, r6
 8005cf6:	f000 f8d5 	bl	8005ea4 <siprintf>
 8005cfa:	e7cf      	b.n	8005c9c <_scanf_float+0x378>
 8005cfc:	f011 0f04 	tst.w	r1, #4
 8005d00:	9903      	ldr	r1, [sp, #12]
 8005d02:	600a      	str	r2, [r1, #0]
 8005d04:	d1db      	bne.n	8005cbe <_scanf_float+0x39a>
 8005d06:	f8d3 8000 	ldr.w	r8, [r3]
 8005d0a:	ee10 2a10 	vmov	r2, s0
 8005d0e:	ee10 0a10 	vmov	r0, s0
 8005d12:	463b      	mov	r3, r7
 8005d14:	4639      	mov	r1, r7
 8005d16:	f7fa ff11 	bl	8000b3c <__aeabi_dcmpun>
 8005d1a:	b128      	cbz	r0, 8005d28 <_scanf_float+0x404>
 8005d1c:	4808      	ldr	r0, [pc, #32]	; (8005d40 <_scanf_float+0x41c>)
 8005d1e:	f000 f9a3 	bl	8006068 <nanf>
 8005d22:	ed88 0a00 	vstr	s0, [r8]
 8005d26:	e7cd      	b.n	8005cc4 <_scanf_float+0x3a0>
 8005d28:	4630      	mov	r0, r6
 8005d2a:	4639      	mov	r1, r7
 8005d2c:	f7fa ff64 	bl	8000bf8 <__aeabi_d2f>
 8005d30:	f8c8 0000 	str.w	r0, [r8]
 8005d34:	e7c6      	b.n	8005cc4 <_scanf_float+0x3a0>
 8005d36:	2500      	movs	r5, #0
 8005d38:	e635      	b.n	80059a6 <_scanf_float+0x82>
 8005d3a:	bf00      	nop
 8005d3c:	0800b154 	.word	0x0800b154
 8005d40:	0800b4e5 	.word	0x0800b4e5

08005d44 <std>:
 8005d44:	2300      	movs	r3, #0
 8005d46:	b510      	push	{r4, lr}
 8005d48:	4604      	mov	r4, r0
 8005d4a:	e9c0 3300 	strd	r3, r3, [r0]
 8005d4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d52:	6083      	str	r3, [r0, #8]
 8005d54:	8181      	strh	r1, [r0, #12]
 8005d56:	6643      	str	r3, [r0, #100]	; 0x64
 8005d58:	81c2      	strh	r2, [r0, #14]
 8005d5a:	6183      	str	r3, [r0, #24]
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	2208      	movs	r2, #8
 8005d60:	305c      	adds	r0, #92	; 0x5c
 8005d62:	f000 f902 	bl	8005f6a <memset>
 8005d66:	4b05      	ldr	r3, [pc, #20]	; (8005d7c <std+0x38>)
 8005d68:	6263      	str	r3, [r4, #36]	; 0x24
 8005d6a:	4b05      	ldr	r3, [pc, #20]	; (8005d80 <std+0x3c>)
 8005d6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d6e:	4b05      	ldr	r3, [pc, #20]	; (8005d84 <std+0x40>)
 8005d70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d72:	4b05      	ldr	r3, [pc, #20]	; (8005d88 <std+0x44>)
 8005d74:	6224      	str	r4, [r4, #32]
 8005d76:	6323      	str	r3, [r4, #48]	; 0x30
 8005d78:	bd10      	pop	{r4, pc}
 8005d7a:	bf00      	nop
 8005d7c:	08005ee5 	.word	0x08005ee5
 8005d80:	08005f07 	.word	0x08005f07
 8005d84:	08005f3f 	.word	0x08005f3f
 8005d88:	08005f63 	.word	0x08005f63

08005d8c <stdio_exit_handler>:
 8005d8c:	4a02      	ldr	r2, [pc, #8]	; (8005d98 <stdio_exit_handler+0xc>)
 8005d8e:	4903      	ldr	r1, [pc, #12]	; (8005d9c <stdio_exit_handler+0x10>)
 8005d90:	4803      	ldr	r0, [pc, #12]	; (8005da0 <stdio_exit_handler+0x14>)
 8005d92:	f000 b869 	b.w	8005e68 <_fwalk_sglue>
 8005d96:	bf00      	nop
 8005d98:	2000000c 	.word	0x2000000c
 8005d9c:	080089b1 	.word	0x080089b1
 8005da0:	20000018 	.word	0x20000018

08005da4 <cleanup_stdio>:
 8005da4:	6841      	ldr	r1, [r0, #4]
 8005da6:	4b0c      	ldr	r3, [pc, #48]	; (8005dd8 <cleanup_stdio+0x34>)
 8005da8:	4299      	cmp	r1, r3
 8005daa:	b510      	push	{r4, lr}
 8005dac:	4604      	mov	r4, r0
 8005dae:	d001      	beq.n	8005db4 <cleanup_stdio+0x10>
 8005db0:	f002 fdfe 	bl	80089b0 <_fflush_r>
 8005db4:	68a1      	ldr	r1, [r4, #8]
 8005db6:	4b09      	ldr	r3, [pc, #36]	; (8005ddc <cleanup_stdio+0x38>)
 8005db8:	4299      	cmp	r1, r3
 8005dba:	d002      	beq.n	8005dc2 <cleanup_stdio+0x1e>
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	f002 fdf7 	bl	80089b0 <_fflush_r>
 8005dc2:	68e1      	ldr	r1, [r4, #12]
 8005dc4:	4b06      	ldr	r3, [pc, #24]	; (8005de0 <cleanup_stdio+0x3c>)
 8005dc6:	4299      	cmp	r1, r3
 8005dc8:	d004      	beq.n	8005dd4 <cleanup_stdio+0x30>
 8005dca:	4620      	mov	r0, r4
 8005dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dd0:	f002 bdee 	b.w	80089b0 <_fflush_r>
 8005dd4:	bd10      	pop	{r4, pc}
 8005dd6:	bf00      	nop
 8005dd8:	200002e8 	.word	0x200002e8
 8005ddc:	20000350 	.word	0x20000350
 8005de0:	200003b8 	.word	0x200003b8

08005de4 <global_stdio_init.part.0>:
 8005de4:	b510      	push	{r4, lr}
 8005de6:	4b0b      	ldr	r3, [pc, #44]	; (8005e14 <global_stdio_init.part.0+0x30>)
 8005de8:	4c0b      	ldr	r4, [pc, #44]	; (8005e18 <global_stdio_init.part.0+0x34>)
 8005dea:	4a0c      	ldr	r2, [pc, #48]	; (8005e1c <global_stdio_init.part.0+0x38>)
 8005dec:	601a      	str	r2, [r3, #0]
 8005dee:	4620      	mov	r0, r4
 8005df0:	2200      	movs	r2, #0
 8005df2:	2104      	movs	r1, #4
 8005df4:	f7ff ffa6 	bl	8005d44 <std>
 8005df8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	2109      	movs	r1, #9
 8005e00:	f7ff ffa0 	bl	8005d44 <std>
 8005e04:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005e08:	2202      	movs	r2, #2
 8005e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e0e:	2112      	movs	r1, #18
 8005e10:	f7ff bf98 	b.w	8005d44 <std>
 8005e14:	20000420 	.word	0x20000420
 8005e18:	200002e8 	.word	0x200002e8
 8005e1c:	08005d8d 	.word	0x08005d8d

08005e20 <__sfp_lock_acquire>:
 8005e20:	4801      	ldr	r0, [pc, #4]	; (8005e28 <__sfp_lock_acquire+0x8>)
 8005e22:	f000 b91f 	b.w	8006064 <__retarget_lock_acquire_recursive>
 8005e26:	bf00      	nop
 8005e28:	20000429 	.word	0x20000429

08005e2c <__sfp_lock_release>:
 8005e2c:	4801      	ldr	r0, [pc, #4]	; (8005e34 <__sfp_lock_release+0x8>)
 8005e2e:	f000 b91a 	b.w	8006066 <__retarget_lock_release_recursive>
 8005e32:	bf00      	nop
 8005e34:	20000429 	.word	0x20000429

08005e38 <__sinit>:
 8005e38:	b510      	push	{r4, lr}
 8005e3a:	4604      	mov	r4, r0
 8005e3c:	f7ff fff0 	bl	8005e20 <__sfp_lock_acquire>
 8005e40:	6a23      	ldr	r3, [r4, #32]
 8005e42:	b11b      	cbz	r3, 8005e4c <__sinit+0x14>
 8005e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e48:	f7ff bff0 	b.w	8005e2c <__sfp_lock_release>
 8005e4c:	4b04      	ldr	r3, [pc, #16]	; (8005e60 <__sinit+0x28>)
 8005e4e:	6223      	str	r3, [r4, #32]
 8005e50:	4b04      	ldr	r3, [pc, #16]	; (8005e64 <__sinit+0x2c>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1f5      	bne.n	8005e44 <__sinit+0xc>
 8005e58:	f7ff ffc4 	bl	8005de4 <global_stdio_init.part.0>
 8005e5c:	e7f2      	b.n	8005e44 <__sinit+0xc>
 8005e5e:	bf00      	nop
 8005e60:	08005da5 	.word	0x08005da5
 8005e64:	20000420 	.word	0x20000420

08005e68 <_fwalk_sglue>:
 8005e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e6c:	4607      	mov	r7, r0
 8005e6e:	4688      	mov	r8, r1
 8005e70:	4614      	mov	r4, r2
 8005e72:	2600      	movs	r6, #0
 8005e74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e78:	f1b9 0901 	subs.w	r9, r9, #1
 8005e7c:	d505      	bpl.n	8005e8a <_fwalk_sglue+0x22>
 8005e7e:	6824      	ldr	r4, [r4, #0]
 8005e80:	2c00      	cmp	r4, #0
 8005e82:	d1f7      	bne.n	8005e74 <_fwalk_sglue+0xc>
 8005e84:	4630      	mov	r0, r6
 8005e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e8a:	89ab      	ldrh	r3, [r5, #12]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d907      	bls.n	8005ea0 <_fwalk_sglue+0x38>
 8005e90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e94:	3301      	adds	r3, #1
 8005e96:	d003      	beq.n	8005ea0 <_fwalk_sglue+0x38>
 8005e98:	4629      	mov	r1, r5
 8005e9a:	4638      	mov	r0, r7
 8005e9c:	47c0      	blx	r8
 8005e9e:	4306      	orrs	r6, r0
 8005ea0:	3568      	adds	r5, #104	; 0x68
 8005ea2:	e7e9      	b.n	8005e78 <_fwalk_sglue+0x10>

08005ea4 <siprintf>:
 8005ea4:	b40e      	push	{r1, r2, r3}
 8005ea6:	b500      	push	{lr}
 8005ea8:	b09c      	sub	sp, #112	; 0x70
 8005eaa:	ab1d      	add	r3, sp, #116	; 0x74
 8005eac:	9002      	str	r0, [sp, #8]
 8005eae:	9006      	str	r0, [sp, #24]
 8005eb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005eb4:	4809      	ldr	r0, [pc, #36]	; (8005edc <siprintf+0x38>)
 8005eb6:	9107      	str	r1, [sp, #28]
 8005eb8:	9104      	str	r1, [sp, #16]
 8005eba:	4909      	ldr	r1, [pc, #36]	; (8005ee0 <siprintf+0x3c>)
 8005ebc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ec0:	9105      	str	r1, [sp, #20]
 8005ec2:	6800      	ldr	r0, [r0, #0]
 8005ec4:	9301      	str	r3, [sp, #4]
 8005ec6:	a902      	add	r1, sp, #8
 8005ec8:	f002 fbee 	bl	80086a8 <_svfiprintf_r>
 8005ecc:	9b02      	ldr	r3, [sp, #8]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	701a      	strb	r2, [r3, #0]
 8005ed2:	b01c      	add	sp, #112	; 0x70
 8005ed4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ed8:	b003      	add	sp, #12
 8005eda:	4770      	bx	lr
 8005edc:	20000064 	.word	0x20000064
 8005ee0:	ffff0208 	.word	0xffff0208

08005ee4 <__sread>:
 8005ee4:	b510      	push	{r4, lr}
 8005ee6:	460c      	mov	r4, r1
 8005ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eec:	f000 f86c 	bl	8005fc8 <_read_r>
 8005ef0:	2800      	cmp	r0, #0
 8005ef2:	bfab      	itete	ge
 8005ef4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005ef6:	89a3      	ldrhlt	r3, [r4, #12]
 8005ef8:	181b      	addge	r3, r3, r0
 8005efa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005efe:	bfac      	ite	ge
 8005f00:	6563      	strge	r3, [r4, #84]	; 0x54
 8005f02:	81a3      	strhlt	r3, [r4, #12]
 8005f04:	bd10      	pop	{r4, pc}

08005f06 <__swrite>:
 8005f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f0a:	461f      	mov	r7, r3
 8005f0c:	898b      	ldrh	r3, [r1, #12]
 8005f0e:	05db      	lsls	r3, r3, #23
 8005f10:	4605      	mov	r5, r0
 8005f12:	460c      	mov	r4, r1
 8005f14:	4616      	mov	r6, r2
 8005f16:	d505      	bpl.n	8005f24 <__swrite+0x1e>
 8005f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f000 f840 	bl	8005fa4 <_lseek_r>
 8005f24:	89a3      	ldrh	r3, [r4, #12]
 8005f26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f2e:	81a3      	strh	r3, [r4, #12]
 8005f30:	4632      	mov	r2, r6
 8005f32:	463b      	mov	r3, r7
 8005f34:	4628      	mov	r0, r5
 8005f36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f3a:	f000 b857 	b.w	8005fec <_write_r>

08005f3e <__sseek>:
 8005f3e:	b510      	push	{r4, lr}
 8005f40:	460c      	mov	r4, r1
 8005f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f46:	f000 f82d 	bl	8005fa4 <_lseek_r>
 8005f4a:	1c43      	adds	r3, r0, #1
 8005f4c:	89a3      	ldrh	r3, [r4, #12]
 8005f4e:	bf15      	itete	ne
 8005f50:	6560      	strne	r0, [r4, #84]	; 0x54
 8005f52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005f56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005f5a:	81a3      	strheq	r3, [r4, #12]
 8005f5c:	bf18      	it	ne
 8005f5e:	81a3      	strhne	r3, [r4, #12]
 8005f60:	bd10      	pop	{r4, pc}

08005f62 <__sclose>:
 8005f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f66:	f000 b80d 	b.w	8005f84 <_close_r>

08005f6a <memset>:
 8005f6a:	4402      	add	r2, r0
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d100      	bne.n	8005f74 <memset+0xa>
 8005f72:	4770      	bx	lr
 8005f74:	f803 1b01 	strb.w	r1, [r3], #1
 8005f78:	e7f9      	b.n	8005f6e <memset+0x4>
	...

08005f7c <_localeconv_r>:
 8005f7c:	4800      	ldr	r0, [pc, #0]	; (8005f80 <_localeconv_r+0x4>)
 8005f7e:	4770      	bx	lr
 8005f80:	20000158 	.word	0x20000158

08005f84 <_close_r>:
 8005f84:	b538      	push	{r3, r4, r5, lr}
 8005f86:	4d06      	ldr	r5, [pc, #24]	; (8005fa0 <_close_r+0x1c>)
 8005f88:	2300      	movs	r3, #0
 8005f8a:	4604      	mov	r4, r0
 8005f8c:	4608      	mov	r0, r1
 8005f8e:	602b      	str	r3, [r5, #0]
 8005f90:	f7fc f823 	bl	8001fda <_close>
 8005f94:	1c43      	adds	r3, r0, #1
 8005f96:	d102      	bne.n	8005f9e <_close_r+0x1a>
 8005f98:	682b      	ldr	r3, [r5, #0]
 8005f9a:	b103      	cbz	r3, 8005f9e <_close_r+0x1a>
 8005f9c:	6023      	str	r3, [r4, #0]
 8005f9e:	bd38      	pop	{r3, r4, r5, pc}
 8005fa0:	20000424 	.word	0x20000424

08005fa4 <_lseek_r>:
 8005fa4:	b538      	push	{r3, r4, r5, lr}
 8005fa6:	4d07      	ldr	r5, [pc, #28]	; (8005fc4 <_lseek_r+0x20>)
 8005fa8:	4604      	mov	r4, r0
 8005faa:	4608      	mov	r0, r1
 8005fac:	4611      	mov	r1, r2
 8005fae:	2200      	movs	r2, #0
 8005fb0:	602a      	str	r2, [r5, #0]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	f7fc f838 	bl	8002028 <_lseek>
 8005fb8:	1c43      	adds	r3, r0, #1
 8005fba:	d102      	bne.n	8005fc2 <_lseek_r+0x1e>
 8005fbc:	682b      	ldr	r3, [r5, #0]
 8005fbe:	b103      	cbz	r3, 8005fc2 <_lseek_r+0x1e>
 8005fc0:	6023      	str	r3, [r4, #0]
 8005fc2:	bd38      	pop	{r3, r4, r5, pc}
 8005fc4:	20000424 	.word	0x20000424

08005fc8 <_read_r>:
 8005fc8:	b538      	push	{r3, r4, r5, lr}
 8005fca:	4d07      	ldr	r5, [pc, #28]	; (8005fe8 <_read_r+0x20>)
 8005fcc:	4604      	mov	r4, r0
 8005fce:	4608      	mov	r0, r1
 8005fd0:	4611      	mov	r1, r2
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	602a      	str	r2, [r5, #0]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	f7fb ffc6 	bl	8001f68 <_read>
 8005fdc:	1c43      	adds	r3, r0, #1
 8005fde:	d102      	bne.n	8005fe6 <_read_r+0x1e>
 8005fe0:	682b      	ldr	r3, [r5, #0]
 8005fe2:	b103      	cbz	r3, 8005fe6 <_read_r+0x1e>
 8005fe4:	6023      	str	r3, [r4, #0]
 8005fe6:	bd38      	pop	{r3, r4, r5, pc}
 8005fe8:	20000424 	.word	0x20000424

08005fec <_write_r>:
 8005fec:	b538      	push	{r3, r4, r5, lr}
 8005fee:	4d07      	ldr	r5, [pc, #28]	; (800600c <_write_r+0x20>)
 8005ff0:	4604      	mov	r4, r0
 8005ff2:	4608      	mov	r0, r1
 8005ff4:	4611      	mov	r1, r2
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	602a      	str	r2, [r5, #0]
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	f7fb ffd1 	bl	8001fa2 <_write>
 8006000:	1c43      	adds	r3, r0, #1
 8006002:	d102      	bne.n	800600a <_write_r+0x1e>
 8006004:	682b      	ldr	r3, [r5, #0]
 8006006:	b103      	cbz	r3, 800600a <_write_r+0x1e>
 8006008:	6023      	str	r3, [r4, #0]
 800600a:	bd38      	pop	{r3, r4, r5, pc}
 800600c:	20000424 	.word	0x20000424

08006010 <__errno>:
 8006010:	4b01      	ldr	r3, [pc, #4]	; (8006018 <__errno+0x8>)
 8006012:	6818      	ldr	r0, [r3, #0]
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	20000064 	.word	0x20000064

0800601c <__libc_init_array>:
 800601c:	b570      	push	{r4, r5, r6, lr}
 800601e:	4d0d      	ldr	r5, [pc, #52]	; (8006054 <__libc_init_array+0x38>)
 8006020:	4c0d      	ldr	r4, [pc, #52]	; (8006058 <__libc_init_array+0x3c>)
 8006022:	1b64      	subs	r4, r4, r5
 8006024:	10a4      	asrs	r4, r4, #2
 8006026:	2600      	movs	r6, #0
 8006028:	42a6      	cmp	r6, r4
 800602a:	d109      	bne.n	8006040 <__libc_init_array+0x24>
 800602c:	4d0b      	ldr	r5, [pc, #44]	; (800605c <__libc_init_array+0x40>)
 800602e:	4c0c      	ldr	r4, [pc, #48]	; (8006060 <__libc_init_array+0x44>)
 8006030:	f005 f848 	bl	800b0c4 <_init>
 8006034:	1b64      	subs	r4, r4, r5
 8006036:	10a4      	asrs	r4, r4, #2
 8006038:	2600      	movs	r6, #0
 800603a:	42a6      	cmp	r6, r4
 800603c:	d105      	bne.n	800604a <__libc_init_array+0x2e>
 800603e:	bd70      	pop	{r4, r5, r6, pc}
 8006040:	f855 3b04 	ldr.w	r3, [r5], #4
 8006044:	4798      	blx	r3
 8006046:	3601      	adds	r6, #1
 8006048:	e7ee      	b.n	8006028 <__libc_init_array+0xc>
 800604a:	f855 3b04 	ldr.w	r3, [r5], #4
 800604e:	4798      	blx	r3
 8006050:	3601      	adds	r6, #1
 8006052:	e7f2      	b.n	800603a <__libc_init_array+0x1e>
 8006054:	0800b950 	.word	0x0800b950
 8006058:	0800b950 	.word	0x0800b950
 800605c:	0800b950 	.word	0x0800b950
 8006060:	0800b954 	.word	0x0800b954

08006064 <__retarget_lock_acquire_recursive>:
 8006064:	4770      	bx	lr

08006066 <__retarget_lock_release_recursive>:
 8006066:	4770      	bx	lr

08006068 <nanf>:
 8006068:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006070 <nanf+0x8>
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	7fc00000 	.word	0x7fc00000

08006074 <quorem>:
 8006074:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006078:	6903      	ldr	r3, [r0, #16]
 800607a:	690c      	ldr	r4, [r1, #16]
 800607c:	42a3      	cmp	r3, r4
 800607e:	4607      	mov	r7, r0
 8006080:	db7e      	blt.n	8006180 <quorem+0x10c>
 8006082:	3c01      	subs	r4, #1
 8006084:	f101 0814 	add.w	r8, r1, #20
 8006088:	f100 0514 	add.w	r5, r0, #20
 800608c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006090:	9301      	str	r3, [sp, #4]
 8006092:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006096:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800609a:	3301      	adds	r3, #1
 800609c:	429a      	cmp	r2, r3
 800609e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80060a2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80060a6:	fbb2 f6f3 	udiv	r6, r2, r3
 80060aa:	d331      	bcc.n	8006110 <quorem+0x9c>
 80060ac:	f04f 0e00 	mov.w	lr, #0
 80060b0:	4640      	mov	r0, r8
 80060b2:	46ac      	mov	ip, r5
 80060b4:	46f2      	mov	sl, lr
 80060b6:	f850 2b04 	ldr.w	r2, [r0], #4
 80060ba:	b293      	uxth	r3, r2
 80060bc:	fb06 e303 	mla	r3, r6, r3, lr
 80060c0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80060c4:	0c1a      	lsrs	r2, r3, #16
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	ebaa 0303 	sub.w	r3, sl, r3
 80060cc:	f8dc a000 	ldr.w	sl, [ip]
 80060d0:	fa13 f38a 	uxtah	r3, r3, sl
 80060d4:	fb06 220e 	mla	r2, r6, lr, r2
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	9b00      	ldr	r3, [sp, #0]
 80060dc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80060e0:	b292      	uxth	r2, r2
 80060e2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80060e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060ea:	f8bd 3000 	ldrh.w	r3, [sp]
 80060ee:	4581      	cmp	r9, r0
 80060f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060f4:	f84c 3b04 	str.w	r3, [ip], #4
 80060f8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80060fc:	d2db      	bcs.n	80060b6 <quorem+0x42>
 80060fe:	f855 300b 	ldr.w	r3, [r5, fp]
 8006102:	b92b      	cbnz	r3, 8006110 <quorem+0x9c>
 8006104:	9b01      	ldr	r3, [sp, #4]
 8006106:	3b04      	subs	r3, #4
 8006108:	429d      	cmp	r5, r3
 800610a:	461a      	mov	r2, r3
 800610c:	d32c      	bcc.n	8006168 <quorem+0xf4>
 800610e:	613c      	str	r4, [r7, #16]
 8006110:	4638      	mov	r0, r7
 8006112:	f001 f9f1 	bl	80074f8 <__mcmp>
 8006116:	2800      	cmp	r0, #0
 8006118:	db22      	blt.n	8006160 <quorem+0xec>
 800611a:	3601      	adds	r6, #1
 800611c:	4629      	mov	r1, r5
 800611e:	2000      	movs	r0, #0
 8006120:	f858 2b04 	ldr.w	r2, [r8], #4
 8006124:	f8d1 c000 	ldr.w	ip, [r1]
 8006128:	b293      	uxth	r3, r2
 800612a:	1ac3      	subs	r3, r0, r3
 800612c:	0c12      	lsrs	r2, r2, #16
 800612e:	fa13 f38c 	uxtah	r3, r3, ip
 8006132:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006136:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800613a:	b29b      	uxth	r3, r3
 800613c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006140:	45c1      	cmp	r9, r8
 8006142:	f841 3b04 	str.w	r3, [r1], #4
 8006146:	ea4f 4022 	mov.w	r0, r2, asr #16
 800614a:	d2e9      	bcs.n	8006120 <quorem+0xac>
 800614c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006150:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006154:	b922      	cbnz	r2, 8006160 <quorem+0xec>
 8006156:	3b04      	subs	r3, #4
 8006158:	429d      	cmp	r5, r3
 800615a:	461a      	mov	r2, r3
 800615c:	d30a      	bcc.n	8006174 <quorem+0x100>
 800615e:	613c      	str	r4, [r7, #16]
 8006160:	4630      	mov	r0, r6
 8006162:	b003      	add	sp, #12
 8006164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006168:	6812      	ldr	r2, [r2, #0]
 800616a:	3b04      	subs	r3, #4
 800616c:	2a00      	cmp	r2, #0
 800616e:	d1ce      	bne.n	800610e <quorem+0x9a>
 8006170:	3c01      	subs	r4, #1
 8006172:	e7c9      	b.n	8006108 <quorem+0x94>
 8006174:	6812      	ldr	r2, [r2, #0]
 8006176:	3b04      	subs	r3, #4
 8006178:	2a00      	cmp	r2, #0
 800617a:	d1f0      	bne.n	800615e <quorem+0xea>
 800617c:	3c01      	subs	r4, #1
 800617e:	e7eb      	b.n	8006158 <quorem+0xe4>
 8006180:	2000      	movs	r0, #0
 8006182:	e7ee      	b.n	8006162 <quorem+0xee>
 8006184:	0000      	movs	r0, r0
	...

08006188 <_dtoa_r>:
 8006188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800618c:	ed2d 8b04 	vpush	{d8-d9}
 8006190:	69c5      	ldr	r5, [r0, #28]
 8006192:	b093      	sub	sp, #76	; 0x4c
 8006194:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006198:	ec57 6b10 	vmov	r6, r7, d0
 800619c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80061a0:	9107      	str	r1, [sp, #28]
 80061a2:	4604      	mov	r4, r0
 80061a4:	920a      	str	r2, [sp, #40]	; 0x28
 80061a6:	930d      	str	r3, [sp, #52]	; 0x34
 80061a8:	b975      	cbnz	r5, 80061c8 <_dtoa_r+0x40>
 80061aa:	2010      	movs	r0, #16
 80061ac:	f000 fe2a 	bl	8006e04 <malloc>
 80061b0:	4602      	mov	r2, r0
 80061b2:	61e0      	str	r0, [r4, #28]
 80061b4:	b920      	cbnz	r0, 80061c0 <_dtoa_r+0x38>
 80061b6:	4bae      	ldr	r3, [pc, #696]	; (8006470 <_dtoa_r+0x2e8>)
 80061b8:	21ef      	movs	r1, #239	; 0xef
 80061ba:	48ae      	ldr	r0, [pc, #696]	; (8006474 <_dtoa_r+0x2ec>)
 80061bc:	f002 fc74 	bl	8008aa8 <__assert_func>
 80061c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80061c4:	6005      	str	r5, [r0, #0]
 80061c6:	60c5      	str	r5, [r0, #12]
 80061c8:	69e3      	ldr	r3, [r4, #28]
 80061ca:	6819      	ldr	r1, [r3, #0]
 80061cc:	b151      	cbz	r1, 80061e4 <_dtoa_r+0x5c>
 80061ce:	685a      	ldr	r2, [r3, #4]
 80061d0:	604a      	str	r2, [r1, #4]
 80061d2:	2301      	movs	r3, #1
 80061d4:	4093      	lsls	r3, r2
 80061d6:	608b      	str	r3, [r1, #8]
 80061d8:	4620      	mov	r0, r4
 80061da:	f000 ff07 	bl	8006fec <_Bfree>
 80061de:	69e3      	ldr	r3, [r4, #28]
 80061e0:	2200      	movs	r2, #0
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	1e3b      	subs	r3, r7, #0
 80061e6:	bfbb      	ittet	lt
 80061e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80061ec:	9303      	strlt	r3, [sp, #12]
 80061ee:	2300      	movge	r3, #0
 80061f0:	2201      	movlt	r2, #1
 80061f2:	bfac      	ite	ge
 80061f4:	f8c8 3000 	strge.w	r3, [r8]
 80061f8:	f8c8 2000 	strlt.w	r2, [r8]
 80061fc:	4b9e      	ldr	r3, [pc, #632]	; (8006478 <_dtoa_r+0x2f0>)
 80061fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006202:	ea33 0308 	bics.w	r3, r3, r8
 8006206:	d11b      	bne.n	8006240 <_dtoa_r+0xb8>
 8006208:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800620a:	f242 730f 	movw	r3, #9999	; 0x270f
 800620e:	6013      	str	r3, [r2, #0]
 8006210:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006214:	4333      	orrs	r3, r6
 8006216:	f000 8593 	beq.w	8006d40 <_dtoa_r+0xbb8>
 800621a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800621c:	b963      	cbnz	r3, 8006238 <_dtoa_r+0xb0>
 800621e:	4b97      	ldr	r3, [pc, #604]	; (800647c <_dtoa_r+0x2f4>)
 8006220:	e027      	b.n	8006272 <_dtoa_r+0xea>
 8006222:	4b97      	ldr	r3, [pc, #604]	; (8006480 <_dtoa_r+0x2f8>)
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	3308      	adds	r3, #8
 8006228:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800622a:	6013      	str	r3, [r2, #0]
 800622c:	9800      	ldr	r0, [sp, #0]
 800622e:	b013      	add	sp, #76	; 0x4c
 8006230:	ecbd 8b04 	vpop	{d8-d9}
 8006234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006238:	4b90      	ldr	r3, [pc, #576]	; (800647c <_dtoa_r+0x2f4>)
 800623a:	9300      	str	r3, [sp, #0]
 800623c:	3303      	adds	r3, #3
 800623e:	e7f3      	b.n	8006228 <_dtoa_r+0xa0>
 8006240:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006244:	2200      	movs	r2, #0
 8006246:	ec51 0b17 	vmov	r0, r1, d7
 800624a:	eeb0 8a47 	vmov.f32	s16, s14
 800624e:	eef0 8a67 	vmov.f32	s17, s15
 8006252:	2300      	movs	r3, #0
 8006254:	f7fa fc40 	bl	8000ad8 <__aeabi_dcmpeq>
 8006258:	4681      	mov	r9, r0
 800625a:	b160      	cbz	r0, 8006276 <_dtoa_r+0xee>
 800625c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800625e:	2301      	movs	r3, #1
 8006260:	6013      	str	r3, [r2, #0]
 8006262:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 8568 	beq.w	8006d3a <_dtoa_r+0xbb2>
 800626a:	4b86      	ldr	r3, [pc, #536]	; (8006484 <_dtoa_r+0x2fc>)
 800626c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800626e:	6013      	str	r3, [r2, #0]
 8006270:	3b01      	subs	r3, #1
 8006272:	9300      	str	r3, [sp, #0]
 8006274:	e7da      	b.n	800622c <_dtoa_r+0xa4>
 8006276:	aa10      	add	r2, sp, #64	; 0x40
 8006278:	a911      	add	r1, sp, #68	; 0x44
 800627a:	4620      	mov	r0, r4
 800627c:	eeb0 0a48 	vmov.f32	s0, s16
 8006280:	eef0 0a68 	vmov.f32	s1, s17
 8006284:	f001 fa4e 	bl	8007724 <__d2b>
 8006288:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800628c:	4682      	mov	sl, r0
 800628e:	2d00      	cmp	r5, #0
 8006290:	d07f      	beq.n	8006392 <_dtoa_r+0x20a>
 8006292:	ee18 3a90 	vmov	r3, s17
 8006296:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800629a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800629e:	ec51 0b18 	vmov	r0, r1, d8
 80062a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80062a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80062aa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80062ae:	4619      	mov	r1, r3
 80062b0:	2200      	movs	r2, #0
 80062b2:	4b75      	ldr	r3, [pc, #468]	; (8006488 <_dtoa_r+0x300>)
 80062b4:	f7f9 fff0 	bl	8000298 <__aeabi_dsub>
 80062b8:	a367      	add	r3, pc, #412	; (adr r3, 8006458 <_dtoa_r+0x2d0>)
 80062ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062be:	f7fa f9a3 	bl	8000608 <__aeabi_dmul>
 80062c2:	a367      	add	r3, pc, #412	; (adr r3, 8006460 <_dtoa_r+0x2d8>)
 80062c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c8:	f7f9 ffe8 	bl	800029c <__adddf3>
 80062cc:	4606      	mov	r6, r0
 80062ce:	4628      	mov	r0, r5
 80062d0:	460f      	mov	r7, r1
 80062d2:	f7fa f92f 	bl	8000534 <__aeabi_i2d>
 80062d6:	a364      	add	r3, pc, #400	; (adr r3, 8006468 <_dtoa_r+0x2e0>)
 80062d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062dc:	f7fa f994 	bl	8000608 <__aeabi_dmul>
 80062e0:	4602      	mov	r2, r0
 80062e2:	460b      	mov	r3, r1
 80062e4:	4630      	mov	r0, r6
 80062e6:	4639      	mov	r1, r7
 80062e8:	f7f9 ffd8 	bl	800029c <__adddf3>
 80062ec:	4606      	mov	r6, r0
 80062ee:	460f      	mov	r7, r1
 80062f0:	f7fa fc3a 	bl	8000b68 <__aeabi_d2iz>
 80062f4:	2200      	movs	r2, #0
 80062f6:	4683      	mov	fp, r0
 80062f8:	2300      	movs	r3, #0
 80062fa:	4630      	mov	r0, r6
 80062fc:	4639      	mov	r1, r7
 80062fe:	f7fa fbf5 	bl	8000aec <__aeabi_dcmplt>
 8006302:	b148      	cbz	r0, 8006318 <_dtoa_r+0x190>
 8006304:	4658      	mov	r0, fp
 8006306:	f7fa f915 	bl	8000534 <__aeabi_i2d>
 800630a:	4632      	mov	r2, r6
 800630c:	463b      	mov	r3, r7
 800630e:	f7fa fbe3 	bl	8000ad8 <__aeabi_dcmpeq>
 8006312:	b908      	cbnz	r0, 8006318 <_dtoa_r+0x190>
 8006314:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006318:	f1bb 0f16 	cmp.w	fp, #22
 800631c:	d857      	bhi.n	80063ce <_dtoa_r+0x246>
 800631e:	4b5b      	ldr	r3, [pc, #364]	; (800648c <_dtoa_r+0x304>)
 8006320:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006328:	ec51 0b18 	vmov	r0, r1, d8
 800632c:	f7fa fbde 	bl	8000aec <__aeabi_dcmplt>
 8006330:	2800      	cmp	r0, #0
 8006332:	d04e      	beq.n	80063d2 <_dtoa_r+0x24a>
 8006334:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006338:	2300      	movs	r3, #0
 800633a:	930c      	str	r3, [sp, #48]	; 0x30
 800633c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800633e:	1b5b      	subs	r3, r3, r5
 8006340:	1e5a      	subs	r2, r3, #1
 8006342:	bf45      	ittet	mi
 8006344:	f1c3 0301 	rsbmi	r3, r3, #1
 8006348:	9305      	strmi	r3, [sp, #20]
 800634a:	2300      	movpl	r3, #0
 800634c:	2300      	movmi	r3, #0
 800634e:	9206      	str	r2, [sp, #24]
 8006350:	bf54      	ite	pl
 8006352:	9305      	strpl	r3, [sp, #20]
 8006354:	9306      	strmi	r3, [sp, #24]
 8006356:	f1bb 0f00 	cmp.w	fp, #0
 800635a:	db3c      	blt.n	80063d6 <_dtoa_r+0x24e>
 800635c:	9b06      	ldr	r3, [sp, #24]
 800635e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006362:	445b      	add	r3, fp
 8006364:	9306      	str	r3, [sp, #24]
 8006366:	2300      	movs	r3, #0
 8006368:	9308      	str	r3, [sp, #32]
 800636a:	9b07      	ldr	r3, [sp, #28]
 800636c:	2b09      	cmp	r3, #9
 800636e:	d868      	bhi.n	8006442 <_dtoa_r+0x2ba>
 8006370:	2b05      	cmp	r3, #5
 8006372:	bfc4      	itt	gt
 8006374:	3b04      	subgt	r3, #4
 8006376:	9307      	strgt	r3, [sp, #28]
 8006378:	9b07      	ldr	r3, [sp, #28]
 800637a:	f1a3 0302 	sub.w	r3, r3, #2
 800637e:	bfcc      	ite	gt
 8006380:	2500      	movgt	r5, #0
 8006382:	2501      	movle	r5, #1
 8006384:	2b03      	cmp	r3, #3
 8006386:	f200 8085 	bhi.w	8006494 <_dtoa_r+0x30c>
 800638a:	e8df f003 	tbb	[pc, r3]
 800638e:	3b2e      	.short	0x3b2e
 8006390:	5839      	.short	0x5839
 8006392:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006396:	441d      	add	r5, r3
 8006398:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800639c:	2b20      	cmp	r3, #32
 800639e:	bfc1      	itttt	gt
 80063a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80063a4:	fa08 f803 	lslgt.w	r8, r8, r3
 80063a8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80063ac:	fa26 f303 	lsrgt.w	r3, r6, r3
 80063b0:	bfd6      	itet	le
 80063b2:	f1c3 0320 	rsble	r3, r3, #32
 80063b6:	ea48 0003 	orrgt.w	r0, r8, r3
 80063ba:	fa06 f003 	lslle.w	r0, r6, r3
 80063be:	f7fa f8a9 	bl	8000514 <__aeabi_ui2d>
 80063c2:	2201      	movs	r2, #1
 80063c4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80063c8:	3d01      	subs	r5, #1
 80063ca:	920e      	str	r2, [sp, #56]	; 0x38
 80063cc:	e76f      	b.n	80062ae <_dtoa_r+0x126>
 80063ce:	2301      	movs	r3, #1
 80063d0:	e7b3      	b.n	800633a <_dtoa_r+0x1b2>
 80063d2:	900c      	str	r0, [sp, #48]	; 0x30
 80063d4:	e7b2      	b.n	800633c <_dtoa_r+0x1b4>
 80063d6:	9b05      	ldr	r3, [sp, #20]
 80063d8:	eba3 030b 	sub.w	r3, r3, fp
 80063dc:	9305      	str	r3, [sp, #20]
 80063de:	f1cb 0300 	rsb	r3, fp, #0
 80063e2:	9308      	str	r3, [sp, #32]
 80063e4:	2300      	movs	r3, #0
 80063e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80063e8:	e7bf      	b.n	800636a <_dtoa_r+0x1e2>
 80063ea:	2300      	movs	r3, #0
 80063ec:	9309      	str	r3, [sp, #36]	; 0x24
 80063ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	dc52      	bgt.n	800649a <_dtoa_r+0x312>
 80063f4:	2301      	movs	r3, #1
 80063f6:	9301      	str	r3, [sp, #4]
 80063f8:	9304      	str	r3, [sp, #16]
 80063fa:	461a      	mov	r2, r3
 80063fc:	920a      	str	r2, [sp, #40]	; 0x28
 80063fe:	e00b      	b.n	8006418 <_dtoa_r+0x290>
 8006400:	2301      	movs	r3, #1
 8006402:	e7f3      	b.n	80063ec <_dtoa_r+0x264>
 8006404:	2300      	movs	r3, #0
 8006406:	9309      	str	r3, [sp, #36]	; 0x24
 8006408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800640a:	445b      	add	r3, fp
 800640c:	9301      	str	r3, [sp, #4]
 800640e:	3301      	adds	r3, #1
 8006410:	2b01      	cmp	r3, #1
 8006412:	9304      	str	r3, [sp, #16]
 8006414:	bfb8      	it	lt
 8006416:	2301      	movlt	r3, #1
 8006418:	69e0      	ldr	r0, [r4, #28]
 800641a:	2100      	movs	r1, #0
 800641c:	2204      	movs	r2, #4
 800641e:	f102 0614 	add.w	r6, r2, #20
 8006422:	429e      	cmp	r6, r3
 8006424:	d93d      	bls.n	80064a2 <_dtoa_r+0x31a>
 8006426:	6041      	str	r1, [r0, #4]
 8006428:	4620      	mov	r0, r4
 800642a:	f000 fd9f 	bl	8006f6c <_Balloc>
 800642e:	9000      	str	r0, [sp, #0]
 8006430:	2800      	cmp	r0, #0
 8006432:	d139      	bne.n	80064a8 <_dtoa_r+0x320>
 8006434:	4b16      	ldr	r3, [pc, #88]	; (8006490 <_dtoa_r+0x308>)
 8006436:	4602      	mov	r2, r0
 8006438:	f240 11af 	movw	r1, #431	; 0x1af
 800643c:	e6bd      	b.n	80061ba <_dtoa_r+0x32>
 800643e:	2301      	movs	r3, #1
 8006440:	e7e1      	b.n	8006406 <_dtoa_r+0x27e>
 8006442:	2501      	movs	r5, #1
 8006444:	2300      	movs	r3, #0
 8006446:	9307      	str	r3, [sp, #28]
 8006448:	9509      	str	r5, [sp, #36]	; 0x24
 800644a:	f04f 33ff 	mov.w	r3, #4294967295
 800644e:	9301      	str	r3, [sp, #4]
 8006450:	9304      	str	r3, [sp, #16]
 8006452:	2200      	movs	r2, #0
 8006454:	2312      	movs	r3, #18
 8006456:	e7d1      	b.n	80063fc <_dtoa_r+0x274>
 8006458:	636f4361 	.word	0x636f4361
 800645c:	3fd287a7 	.word	0x3fd287a7
 8006460:	8b60c8b3 	.word	0x8b60c8b3
 8006464:	3fc68a28 	.word	0x3fc68a28
 8006468:	509f79fb 	.word	0x509f79fb
 800646c:	3fd34413 	.word	0x3fd34413
 8006470:	0800b166 	.word	0x0800b166
 8006474:	0800b17d 	.word	0x0800b17d
 8006478:	7ff00000 	.word	0x7ff00000
 800647c:	0800b162 	.word	0x0800b162
 8006480:	0800b159 	.word	0x0800b159
 8006484:	0800b131 	.word	0x0800b131
 8006488:	3ff80000 	.word	0x3ff80000
 800648c:	0800b268 	.word	0x0800b268
 8006490:	0800b1d5 	.word	0x0800b1d5
 8006494:	2301      	movs	r3, #1
 8006496:	9309      	str	r3, [sp, #36]	; 0x24
 8006498:	e7d7      	b.n	800644a <_dtoa_r+0x2c2>
 800649a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800649c:	9301      	str	r3, [sp, #4]
 800649e:	9304      	str	r3, [sp, #16]
 80064a0:	e7ba      	b.n	8006418 <_dtoa_r+0x290>
 80064a2:	3101      	adds	r1, #1
 80064a4:	0052      	lsls	r2, r2, #1
 80064a6:	e7ba      	b.n	800641e <_dtoa_r+0x296>
 80064a8:	69e3      	ldr	r3, [r4, #28]
 80064aa:	9a00      	ldr	r2, [sp, #0]
 80064ac:	601a      	str	r2, [r3, #0]
 80064ae:	9b04      	ldr	r3, [sp, #16]
 80064b0:	2b0e      	cmp	r3, #14
 80064b2:	f200 80a8 	bhi.w	8006606 <_dtoa_r+0x47e>
 80064b6:	2d00      	cmp	r5, #0
 80064b8:	f000 80a5 	beq.w	8006606 <_dtoa_r+0x47e>
 80064bc:	f1bb 0f00 	cmp.w	fp, #0
 80064c0:	dd38      	ble.n	8006534 <_dtoa_r+0x3ac>
 80064c2:	4bc0      	ldr	r3, [pc, #768]	; (80067c4 <_dtoa_r+0x63c>)
 80064c4:	f00b 020f 	and.w	r2, fp, #15
 80064c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064cc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80064d0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80064d4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80064d8:	d019      	beq.n	800650e <_dtoa_r+0x386>
 80064da:	4bbb      	ldr	r3, [pc, #748]	; (80067c8 <_dtoa_r+0x640>)
 80064dc:	ec51 0b18 	vmov	r0, r1, d8
 80064e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80064e4:	f7fa f9ba 	bl	800085c <__aeabi_ddiv>
 80064e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064ec:	f008 080f 	and.w	r8, r8, #15
 80064f0:	2503      	movs	r5, #3
 80064f2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80067c8 <_dtoa_r+0x640>
 80064f6:	f1b8 0f00 	cmp.w	r8, #0
 80064fa:	d10a      	bne.n	8006512 <_dtoa_r+0x38a>
 80064fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006500:	4632      	mov	r2, r6
 8006502:	463b      	mov	r3, r7
 8006504:	f7fa f9aa 	bl	800085c <__aeabi_ddiv>
 8006508:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800650c:	e02b      	b.n	8006566 <_dtoa_r+0x3de>
 800650e:	2502      	movs	r5, #2
 8006510:	e7ef      	b.n	80064f2 <_dtoa_r+0x36a>
 8006512:	f018 0f01 	tst.w	r8, #1
 8006516:	d008      	beq.n	800652a <_dtoa_r+0x3a2>
 8006518:	4630      	mov	r0, r6
 800651a:	4639      	mov	r1, r7
 800651c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006520:	f7fa f872 	bl	8000608 <__aeabi_dmul>
 8006524:	3501      	adds	r5, #1
 8006526:	4606      	mov	r6, r0
 8006528:	460f      	mov	r7, r1
 800652a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800652e:	f109 0908 	add.w	r9, r9, #8
 8006532:	e7e0      	b.n	80064f6 <_dtoa_r+0x36e>
 8006534:	f000 809f 	beq.w	8006676 <_dtoa_r+0x4ee>
 8006538:	f1cb 0600 	rsb	r6, fp, #0
 800653c:	4ba1      	ldr	r3, [pc, #644]	; (80067c4 <_dtoa_r+0x63c>)
 800653e:	4fa2      	ldr	r7, [pc, #648]	; (80067c8 <_dtoa_r+0x640>)
 8006540:	f006 020f 	and.w	r2, r6, #15
 8006544:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654c:	ec51 0b18 	vmov	r0, r1, d8
 8006550:	f7fa f85a 	bl	8000608 <__aeabi_dmul>
 8006554:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006558:	1136      	asrs	r6, r6, #4
 800655a:	2300      	movs	r3, #0
 800655c:	2502      	movs	r5, #2
 800655e:	2e00      	cmp	r6, #0
 8006560:	d17e      	bne.n	8006660 <_dtoa_r+0x4d8>
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1d0      	bne.n	8006508 <_dtoa_r+0x380>
 8006566:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006568:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800656c:	2b00      	cmp	r3, #0
 800656e:	f000 8084 	beq.w	800667a <_dtoa_r+0x4f2>
 8006572:	4b96      	ldr	r3, [pc, #600]	; (80067cc <_dtoa_r+0x644>)
 8006574:	2200      	movs	r2, #0
 8006576:	4640      	mov	r0, r8
 8006578:	4649      	mov	r1, r9
 800657a:	f7fa fab7 	bl	8000aec <__aeabi_dcmplt>
 800657e:	2800      	cmp	r0, #0
 8006580:	d07b      	beq.n	800667a <_dtoa_r+0x4f2>
 8006582:	9b04      	ldr	r3, [sp, #16]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d078      	beq.n	800667a <_dtoa_r+0x4f2>
 8006588:	9b01      	ldr	r3, [sp, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	dd39      	ble.n	8006602 <_dtoa_r+0x47a>
 800658e:	4b90      	ldr	r3, [pc, #576]	; (80067d0 <_dtoa_r+0x648>)
 8006590:	2200      	movs	r2, #0
 8006592:	4640      	mov	r0, r8
 8006594:	4649      	mov	r1, r9
 8006596:	f7fa f837 	bl	8000608 <__aeabi_dmul>
 800659a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800659e:	9e01      	ldr	r6, [sp, #4]
 80065a0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80065a4:	3501      	adds	r5, #1
 80065a6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80065aa:	4628      	mov	r0, r5
 80065ac:	f7f9 ffc2 	bl	8000534 <__aeabi_i2d>
 80065b0:	4642      	mov	r2, r8
 80065b2:	464b      	mov	r3, r9
 80065b4:	f7fa f828 	bl	8000608 <__aeabi_dmul>
 80065b8:	4b86      	ldr	r3, [pc, #536]	; (80067d4 <_dtoa_r+0x64c>)
 80065ba:	2200      	movs	r2, #0
 80065bc:	f7f9 fe6e 	bl	800029c <__adddf3>
 80065c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80065c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065c8:	9303      	str	r3, [sp, #12]
 80065ca:	2e00      	cmp	r6, #0
 80065cc:	d158      	bne.n	8006680 <_dtoa_r+0x4f8>
 80065ce:	4b82      	ldr	r3, [pc, #520]	; (80067d8 <_dtoa_r+0x650>)
 80065d0:	2200      	movs	r2, #0
 80065d2:	4640      	mov	r0, r8
 80065d4:	4649      	mov	r1, r9
 80065d6:	f7f9 fe5f 	bl	8000298 <__aeabi_dsub>
 80065da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065de:	4680      	mov	r8, r0
 80065e0:	4689      	mov	r9, r1
 80065e2:	f7fa faa1 	bl	8000b28 <__aeabi_dcmpgt>
 80065e6:	2800      	cmp	r0, #0
 80065e8:	f040 8296 	bne.w	8006b18 <_dtoa_r+0x990>
 80065ec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80065f0:	4640      	mov	r0, r8
 80065f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80065f6:	4649      	mov	r1, r9
 80065f8:	f7fa fa78 	bl	8000aec <__aeabi_dcmplt>
 80065fc:	2800      	cmp	r0, #0
 80065fe:	f040 8289 	bne.w	8006b14 <_dtoa_r+0x98c>
 8006602:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006606:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006608:	2b00      	cmp	r3, #0
 800660a:	f2c0 814e 	blt.w	80068aa <_dtoa_r+0x722>
 800660e:	f1bb 0f0e 	cmp.w	fp, #14
 8006612:	f300 814a 	bgt.w	80068aa <_dtoa_r+0x722>
 8006616:	4b6b      	ldr	r3, [pc, #428]	; (80067c4 <_dtoa_r+0x63c>)
 8006618:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800661c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006622:	2b00      	cmp	r3, #0
 8006624:	f280 80dc 	bge.w	80067e0 <_dtoa_r+0x658>
 8006628:	9b04      	ldr	r3, [sp, #16]
 800662a:	2b00      	cmp	r3, #0
 800662c:	f300 80d8 	bgt.w	80067e0 <_dtoa_r+0x658>
 8006630:	f040 826f 	bne.w	8006b12 <_dtoa_r+0x98a>
 8006634:	4b68      	ldr	r3, [pc, #416]	; (80067d8 <_dtoa_r+0x650>)
 8006636:	2200      	movs	r2, #0
 8006638:	4640      	mov	r0, r8
 800663a:	4649      	mov	r1, r9
 800663c:	f7f9 ffe4 	bl	8000608 <__aeabi_dmul>
 8006640:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006644:	f7fa fa66 	bl	8000b14 <__aeabi_dcmpge>
 8006648:	9e04      	ldr	r6, [sp, #16]
 800664a:	4637      	mov	r7, r6
 800664c:	2800      	cmp	r0, #0
 800664e:	f040 8245 	bne.w	8006adc <_dtoa_r+0x954>
 8006652:	9d00      	ldr	r5, [sp, #0]
 8006654:	2331      	movs	r3, #49	; 0x31
 8006656:	f805 3b01 	strb.w	r3, [r5], #1
 800665a:	f10b 0b01 	add.w	fp, fp, #1
 800665e:	e241      	b.n	8006ae4 <_dtoa_r+0x95c>
 8006660:	07f2      	lsls	r2, r6, #31
 8006662:	d505      	bpl.n	8006670 <_dtoa_r+0x4e8>
 8006664:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006668:	f7f9 ffce 	bl	8000608 <__aeabi_dmul>
 800666c:	3501      	adds	r5, #1
 800666e:	2301      	movs	r3, #1
 8006670:	1076      	asrs	r6, r6, #1
 8006672:	3708      	adds	r7, #8
 8006674:	e773      	b.n	800655e <_dtoa_r+0x3d6>
 8006676:	2502      	movs	r5, #2
 8006678:	e775      	b.n	8006566 <_dtoa_r+0x3de>
 800667a:	9e04      	ldr	r6, [sp, #16]
 800667c:	465f      	mov	r7, fp
 800667e:	e792      	b.n	80065a6 <_dtoa_r+0x41e>
 8006680:	9900      	ldr	r1, [sp, #0]
 8006682:	4b50      	ldr	r3, [pc, #320]	; (80067c4 <_dtoa_r+0x63c>)
 8006684:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006688:	4431      	add	r1, r6
 800668a:	9102      	str	r1, [sp, #8]
 800668c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800668e:	eeb0 9a47 	vmov.f32	s18, s14
 8006692:	eef0 9a67 	vmov.f32	s19, s15
 8006696:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800669a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800669e:	2900      	cmp	r1, #0
 80066a0:	d044      	beq.n	800672c <_dtoa_r+0x5a4>
 80066a2:	494e      	ldr	r1, [pc, #312]	; (80067dc <_dtoa_r+0x654>)
 80066a4:	2000      	movs	r0, #0
 80066a6:	f7fa f8d9 	bl	800085c <__aeabi_ddiv>
 80066aa:	ec53 2b19 	vmov	r2, r3, d9
 80066ae:	f7f9 fdf3 	bl	8000298 <__aeabi_dsub>
 80066b2:	9d00      	ldr	r5, [sp, #0]
 80066b4:	ec41 0b19 	vmov	d9, r0, r1
 80066b8:	4649      	mov	r1, r9
 80066ba:	4640      	mov	r0, r8
 80066bc:	f7fa fa54 	bl	8000b68 <__aeabi_d2iz>
 80066c0:	4606      	mov	r6, r0
 80066c2:	f7f9 ff37 	bl	8000534 <__aeabi_i2d>
 80066c6:	4602      	mov	r2, r0
 80066c8:	460b      	mov	r3, r1
 80066ca:	4640      	mov	r0, r8
 80066cc:	4649      	mov	r1, r9
 80066ce:	f7f9 fde3 	bl	8000298 <__aeabi_dsub>
 80066d2:	3630      	adds	r6, #48	; 0x30
 80066d4:	f805 6b01 	strb.w	r6, [r5], #1
 80066d8:	ec53 2b19 	vmov	r2, r3, d9
 80066dc:	4680      	mov	r8, r0
 80066de:	4689      	mov	r9, r1
 80066e0:	f7fa fa04 	bl	8000aec <__aeabi_dcmplt>
 80066e4:	2800      	cmp	r0, #0
 80066e6:	d164      	bne.n	80067b2 <_dtoa_r+0x62a>
 80066e8:	4642      	mov	r2, r8
 80066ea:	464b      	mov	r3, r9
 80066ec:	4937      	ldr	r1, [pc, #220]	; (80067cc <_dtoa_r+0x644>)
 80066ee:	2000      	movs	r0, #0
 80066f0:	f7f9 fdd2 	bl	8000298 <__aeabi_dsub>
 80066f4:	ec53 2b19 	vmov	r2, r3, d9
 80066f8:	f7fa f9f8 	bl	8000aec <__aeabi_dcmplt>
 80066fc:	2800      	cmp	r0, #0
 80066fe:	f040 80b6 	bne.w	800686e <_dtoa_r+0x6e6>
 8006702:	9b02      	ldr	r3, [sp, #8]
 8006704:	429d      	cmp	r5, r3
 8006706:	f43f af7c 	beq.w	8006602 <_dtoa_r+0x47a>
 800670a:	4b31      	ldr	r3, [pc, #196]	; (80067d0 <_dtoa_r+0x648>)
 800670c:	ec51 0b19 	vmov	r0, r1, d9
 8006710:	2200      	movs	r2, #0
 8006712:	f7f9 ff79 	bl	8000608 <__aeabi_dmul>
 8006716:	4b2e      	ldr	r3, [pc, #184]	; (80067d0 <_dtoa_r+0x648>)
 8006718:	ec41 0b19 	vmov	d9, r0, r1
 800671c:	2200      	movs	r2, #0
 800671e:	4640      	mov	r0, r8
 8006720:	4649      	mov	r1, r9
 8006722:	f7f9 ff71 	bl	8000608 <__aeabi_dmul>
 8006726:	4680      	mov	r8, r0
 8006728:	4689      	mov	r9, r1
 800672a:	e7c5      	b.n	80066b8 <_dtoa_r+0x530>
 800672c:	ec51 0b17 	vmov	r0, r1, d7
 8006730:	f7f9 ff6a 	bl	8000608 <__aeabi_dmul>
 8006734:	9b02      	ldr	r3, [sp, #8]
 8006736:	9d00      	ldr	r5, [sp, #0]
 8006738:	930f      	str	r3, [sp, #60]	; 0x3c
 800673a:	ec41 0b19 	vmov	d9, r0, r1
 800673e:	4649      	mov	r1, r9
 8006740:	4640      	mov	r0, r8
 8006742:	f7fa fa11 	bl	8000b68 <__aeabi_d2iz>
 8006746:	4606      	mov	r6, r0
 8006748:	f7f9 fef4 	bl	8000534 <__aeabi_i2d>
 800674c:	3630      	adds	r6, #48	; 0x30
 800674e:	4602      	mov	r2, r0
 8006750:	460b      	mov	r3, r1
 8006752:	4640      	mov	r0, r8
 8006754:	4649      	mov	r1, r9
 8006756:	f7f9 fd9f 	bl	8000298 <__aeabi_dsub>
 800675a:	f805 6b01 	strb.w	r6, [r5], #1
 800675e:	9b02      	ldr	r3, [sp, #8]
 8006760:	429d      	cmp	r5, r3
 8006762:	4680      	mov	r8, r0
 8006764:	4689      	mov	r9, r1
 8006766:	f04f 0200 	mov.w	r2, #0
 800676a:	d124      	bne.n	80067b6 <_dtoa_r+0x62e>
 800676c:	4b1b      	ldr	r3, [pc, #108]	; (80067dc <_dtoa_r+0x654>)
 800676e:	ec51 0b19 	vmov	r0, r1, d9
 8006772:	f7f9 fd93 	bl	800029c <__adddf3>
 8006776:	4602      	mov	r2, r0
 8006778:	460b      	mov	r3, r1
 800677a:	4640      	mov	r0, r8
 800677c:	4649      	mov	r1, r9
 800677e:	f7fa f9d3 	bl	8000b28 <__aeabi_dcmpgt>
 8006782:	2800      	cmp	r0, #0
 8006784:	d173      	bne.n	800686e <_dtoa_r+0x6e6>
 8006786:	ec53 2b19 	vmov	r2, r3, d9
 800678a:	4914      	ldr	r1, [pc, #80]	; (80067dc <_dtoa_r+0x654>)
 800678c:	2000      	movs	r0, #0
 800678e:	f7f9 fd83 	bl	8000298 <__aeabi_dsub>
 8006792:	4602      	mov	r2, r0
 8006794:	460b      	mov	r3, r1
 8006796:	4640      	mov	r0, r8
 8006798:	4649      	mov	r1, r9
 800679a:	f7fa f9a7 	bl	8000aec <__aeabi_dcmplt>
 800679e:	2800      	cmp	r0, #0
 80067a0:	f43f af2f 	beq.w	8006602 <_dtoa_r+0x47a>
 80067a4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80067a6:	1e6b      	subs	r3, r5, #1
 80067a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80067aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80067ae:	2b30      	cmp	r3, #48	; 0x30
 80067b0:	d0f8      	beq.n	80067a4 <_dtoa_r+0x61c>
 80067b2:	46bb      	mov	fp, r7
 80067b4:	e04a      	b.n	800684c <_dtoa_r+0x6c4>
 80067b6:	4b06      	ldr	r3, [pc, #24]	; (80067d0 <_dtoa_r+0x648>)
 80067b8:	f7f9 ff26 	bl	8000608 <__aeabi_dmul>
 80067bc:	4680      	mov	r8, r0
 80067be:	4689      	mov	r9, r1
 80067c0:	e7bd      	b.n	800673e <_dtoa_r+0x5b6>
 80067c2:	bf00      	nop
 80067c4:	0800b268 	.word	0x0800b268
 80067c8:	0800b240 	.word	0x0800b240
 80067cc:	3ff00000 	.word	0x3ff00000
 80067d0:	40240000 	.word	0x40240000
 80067d4:	401c0000 	.word	0x401c0000
 80067d8:	40140000 	.word	0x40140000
 80067dc:	3fe00000 	.word	0x3fe00000
 80067e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80067e4:	9d00      	ldr	r5, [sp, #0]
 80067e6:	4642      	mov	r2, r8
 80067e8:	464b      	mov	r3, r9
 80067ea:	4630      	mov	r0, r6
 80067ec:	4639      	mov	r1, r7
 80067ee:	f7fa f835 	bl	800085c <__aeabi_ddiv>
 80067f2:	f7fa f9b9 	bl	8000b68 <__aeabi_d2iz>
 80067f6:	9001      	str	r0, [sp, #4]
 80067f8:	f7f9 fe9c 	bl	8000534 <__aeabi_i2d>
 80067fc:	4642      	mov	r2, r8
 80067fe:	464b      	mov	r3, r9
 8006800:	f7f9 ff02 	bl	8000608 <__aeabi_dmul>
 8006804:	4602      	mov	r2, r0
 8006806:	460b      	mov	r3, r1
 8006808:	4630      	mov	r0, r6
 800680a:	4639      	mov	r1, r7
 800680c:	f7f9 fd44 	bl	8000298 <__aeabi_dsub>
 8006810:	9e01      	ldr	r6, [sp, #4]
 8006812:	9f04      	ldr	r7, [sp, #16]
 8006814:	3630      	adds	r6, #48	; 0x30
 8006816:	f805 6b01 	strb.w	r6, [r5], #1
 800681a:	9e00      	ldr	r6, [sp, #0]
 800681c:	1bae      	subs	r6, r5, r6
 800681e:	42b7      	cmp	r7, r6
 8006820:	4602      	mov	r2, r0
 8006822:	460b      	mov	r3, r1
 8006824:	d134      	bne.n	8006890 <_dtoa_r+0x708>
 8006826:	f7f9 fd39 	bl	800029c <__adddf3>
 800682a:	4642      	mov	r2, r8
 800682c:	464b      	mov	r3, r9
 800682e:	4606      	mov	r6, r0
 8006830:	460f      	mov	r7, r1
 8006832:	f7fa f979 	bl	8000b28 <__aeabi_dcmpgt>
 8006836:	b9c8      	cbnz	r0, 800686c <_dtoa_r+0x6e4>
 8006838:	4642      	mov	r2, r8
 800683a:	464b      	mov	r3, r9
 800683c:	4630      	mov	r0, r6
 800683e:	4639      	mov	r1, r7
 8006840:	f7fa f94a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006844:	b110      	cbz	r0, 800684c <_dtoa_r+0x6c4>
 8006846:	9b01      	ldr	r3, [sp, #4]
 8006848:	07db      	lsls	r3, r3, #31
 800684a:	d40f      	bmi.n	800686c <_dtoa_r+0x6e4>
 800684c:	4651      	mov	r1, sl
 800684e:	4620      	mov	r0, r4
 8006850:	f000 fbcc 	bl	8006fec <_Bfree>
 8006854:	2300      	movs	r3, #0
 8006856:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006858:	702b      	strb	r3, [r5, #0]
 800685a:	f10b 0301 	add.w	r3, fp, #1
 800685e:	6013      	str	r3, [r2, #0]
 8006860:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006862:	2b00      	cmp	r3, #0
 8006864:	f43f ace2 	beq.w	800622c <_dtoa_r+0xa4>
 8006868:	601d      	str	r5, [r3, #0]
 800686a:	e4df      	b.n	800622c <_dtoa_r+0xa4>
 800686c:	465f      	mov	r7, fp
 800686e:	462b      	mov	r3, r5
 8006870:	461d      	mov	r5, r3
 8006872:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006876:	2a39      	cmp	r2, #57	; 0x39
 8006878:	d106      	bne.n	8006888 <_dtoa_r+0x700>
 800687a:	9a00      	ldr	r2, [sp, #0]
 800687c:	429a      	cmp	r2, r3
 800687e:	d1f7      	bne.n	8006870 <_dtoa_r+0x6e8>
 8006880:	9900      	ldr	r1, [sp, #0]
 8006882:	2230      	movs	r2, #48	; 0x30
 8006884:	3701      	adds	r7, #1
 8006886:	700a      	strb	r2, [r1, #0]
 8006888:	781a      	ldrb	r2, [r3, #0]
 800688a:	3201      	adds	r2, #1
 800688c:	701a      	strb	r2, [r3, #0]
 800688e:	e790      	b.n	80067b2 <_dtoa_r+0x62a>
 8006890:	4ba3      	ldr	r3, [pc, #652]	; (8006b20 <_dtoa_r+0x998>)
 8006892:	2200      	movs	r2, #0
 8006894:	f7f9 feb8 	bl	8000608 <__aeabi_dmul>
 8006898:	2200      	movs	r2, #0
 800689a:	2300      	movs	r3, #0
 800689c:	4606      	mov	r6, r0
 800689e:	460f      	mov	r7, r1
 80068a0:	f7fa f91a 	bl	8000ad8 <__aeabi_dcmpeq>
 80068a4:	2800      	cmp	r0, #0
 80068a6:	d09e      	beq.n	80067e6 <_dtoa_r+0x65e>
 80068a8:	e7d0      	b.n	800684c <_dtoa_r+0x6c4>
 80068aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068ac:	2a00      	cmp	r2, #0
 80068ae:	f000 80ca 	beq.w	8006a46 <_dtoa_r+0x8be>
 80068b2:	9a07      	ldr	r2, [sp, #28]
 80068b4:	2a01      	cmp	r2, #1
 80068b6:	f300 80ad 	bgt.w	8006a14 <_dtoa_r+0x88c>
 80068ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80068bc:	2a00      	cmp	r2, #0
 80068be:	f000 80a5 	beq.w	8006a0c <_dtoa_r+0x884>
 80068c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80068c6:	9e08      	ldr	r6, [sp, #32]
 80068c8:	9d05      	ldr	r5, [sp, #20]
 80068ca:	9a05      	ldr	r2, [sp, #20]
 80068cc:	441a      	add	r2, r3
 80068ce:	9205      	str	r2, [sp, #20]
 80068d0:	9a06      	ldr	r2, [sp, #24]
 80068d2:	2101      	movs	r1, #1
 80068d4:	441a      	add	r2, r3
 80068d6:	4620      	mov	r0, r4
 80068d8:	9206      	str	r2, [sp, #24]
 80068da:	f000 fc87 	bl	80071ec <__i2b>
 80068de:	4607      	mov	r7, r0
 80068e0:	b165      	cbz	r5, 80068fc <_dtoa_r+0x774>
 80068e2:	9b06      	ldr	r3, [sp, #24]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	dd09      	ble.n	80068fc <_dtoa_r+0x774>
 80068e8:	42ab      	cmp	r3, r5
 80068ea:	9a05      	ldr	r2, [sp, #20]
 80068ec:	bfa8      	it	ge
 80068ee:	462b      	movge	r3, r5
 80068f0:	1ad2      	subs	r2, r2, r3
 80068f2:	9205      	str	r2, [sp, #20]
 80068f4:	9a06      	ldr	r2, [sp, #24]
 80068f6:	1aed      	subs	r5, r5, r3
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	9306      	str	r3, [sp, #24]
 80068fc:	9b08      	ldr	r3, [sp, #32]
 80068fe:	b1f3      	cbz	r3, 800693e <_dtoa_r+0x7b6>
 8006900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006902:	2b00      	cmp	r3, #0
 8006904:	f000 80a3 	beq.w	8006a4e <_dtoa_r+0x8c6>
 8006908:	2e00      	cmp	r6, #0
 800690a:	dd10      	ble.n	800692e <_dtoa_r+0x7a6>
 800690c:	4639      	mov	r1, r7
 800690e:	4632      	mov	r2, r6
 8006910:	4620      	mov	r0, r4
 8006912:	f000 fd2b 	bl	800736c <__pow5mult>
 8006916:	4652      	mov	r2, sl
 8006918:	4601      	mov	r1, r0
 800691a:	4607      	mov	r7, r0
 800691c:	4620      	mov	r0, r4
 800691e:	f000 fc7b 	bl	8007218 <__multiply>
 8006922:	4651      	mov	r1, sl
 8006924:	4680      	mov	r8, r0
 8006926:	4620      	mov	r0, r4
 8006928:	f000 fb60 	bl	8006fec <_Bfree>
 800692c:	46c2      	mov	sl, r8
 800692e:	9b08      	ldr	r3, [sp, #32]
 8006930:	1b9a      	subs	r2, r3, r6
 8006932:	d004      	beq.n	800693e <_dtoa_r+0x7b6>
 8006934:	4651      	mov	r1, sl
 8006936:	4620      	mov	r0, r4
 8006938:	f000 fd18 	bl	800736c <__pow5mult>
 800693c:	4682      	mov	sl, r0
 800693e:	2101      	movs	r1, #1
 8006940:	4620      	mov	r0, r4
 8006942:	f000 fc53 	bl	80071ec <__i2b>
 8006946:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006948:	2b00      	cmp	r3, #0
 800694a:	4606      	mov	r6, r0
 800694c:	f340 8081 	ble.w	8006a52 <_dtoa_r+0x8ca>
 8006950:	461a      	mov	r2, r3
 8006952:	4601      	mov	r1, r0
 8006954:	4620      	mov	r0, r4
 8006956:	f000 fd09 	bl	800736c <__pow5mult>
 800695a:	9b07      	ldr	r3, [sp, #28]
 800695c:	2b01      	cmp	r3, #1
 800695e:	4606      	mov	r6, r0
 8006960:	dd7a      	ble.n	8006a58 <_dtoa_r+0x8d0>
 8006962:	f04f 0800 	mov.w	r8, #0
 8006966:	6933      	ldr	r3, [r6, #16]
 8006968:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800696c:	6918      	ldr	r0, [r3, #16]
 800696e:	f000 fbef 	bl	8007150 <__hi0bits>
 8006972:	f1c0 0020 	rsb	r0, r0, #32
 8006976:	9b06      	ldr	r3, [sp, #24]
 8006978:	4418      	add	r0, r3
 800697a:	f010 001f 	ands.w	r0, r0, #31
 800697e:	f000 8094 	beq.w	8006aaa <_dtoa_r+0x922>
 8006982:	f1c0 0320 	rsb	r3, r0, #32
 8006986:	2b04      	cmp	r3, #4
 8006988:	f340 8085 	ble.w	8006a96 <_dtoa_r+0x90e>
 800698c:	9b05      	ldr	r3, [sp, #20]
 800698e:	f1c0 001c 	rsb	r0, r0, #28
 8006992:	4403      	add	r3, r0
 8006994:	9305      	str	r3, [sp, #20]
 8006996:	9b06      	ldr	r3, [sp, #24]
 8006998:	4403      	add	r3, r0
 800699a:	4405      	add	r5, r0
 800699c:	9306      	str	r3, [sp, #24]
 800699e:	9b05      	ldr	r3, [sp, #20]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	dd05      	ble.n	80069b0 <_dtoa_r+0x828>
 80069a4:	4651      	mov	r1, sl
 80069a6:	461a      	mov	r2, r3
 80069a8:	4620      	mov	r0, r4
 80069aa:	f000 fd39 	bl	8007420 <__lshift>
 80069ae:	4682      	mov	sl, r0
 80069b0:	9b06      	ldr	r3, [sp, #24]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	dd05      	ble.n	80069c2 <_dtoa_r+0x83a>
 80069b6:	4631      	mov	r1, r6
 80069b8:	461a      	mov	r2, r3
 80069ba:	4620      	mov	r0, r4
 80069bc:	f000 fd30 	bl	8007420 <__lshift>
 80069c0:	4606      	mov	r6, r0
 80069c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d072      	beq.n	8006aae <_dtoa_r+0x926>
 80069c8:	4631      	mov	r1, r6
 80069ca:	4650      	mov	r0, sl
 80069cc:	f000 fd94 	bl	80074f8 <__mcmp>
 80069d0:	2800      	cmp	r0, #0
 80069d2:	da6c      	bge.n	8006aae <_dtoa_r+0x926>
 80069d4:	2300      	movs	r3, #0
 80069d6:	4651      	mov	r1, sl
 80069d8:	220a      	movs	r2, #10
 80069da:	4620      	mov	r0, r4
 80069dc:	f000 fb28 	bl	8007030 <__multadd>
 80069e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80069e6:	4682      	mov	sl, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f000 81b0 	beq.w	8006d4e <_dtoa_r+0xbc6>
 80069ee:	2300      	movs	r3, #0
 80069f0:	4639      	mov	r1, r7
 80069f2:	220a      	movs	r2, #10
 80069f4:	4620      	mov	r0, r4
 80069f6:	f000 fb1b 	bl	8007030 <__multadd>
 80069fa:	9b01      	ldr	r3, [sp, #4]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	4607      	mov	r7, r0
 8006a00:	f300 8096 	bgt.w	8006b30 <_dtoa_r+0x9a8>
 8006a04:	9b07      	ldr	r3, [sp, #28]
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	dc59      	bgt.n	8006abe <_dtoa_r+0x936>
 8006a0a:	e091      	b.n	8006b30 <_dtoa_r+0x9a8>
 8006a0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006a0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006a12:	e758      	b.n	80068c6 <_dtoa_r+0x73e>
 8006a14:	9b04      	ldr	r3, [sp, #16]
 8006a16:	1e5e      	subs	r6, r3, #1
 8006a18:	9b08      	ldr	r3, [sp, #32]
 8006a1a:	42b3      	cmp	r3, r6
 8006a1c:	bfbf      	itttt	lt
 8006a1e:	9b08      	ldrlt	r3, [sp, #32]
 8006a20:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006a22:	9608      	strlt	r6, [sp, #32]
 8006a24:	1af3      	sublt	r3, r6, r3
 8006a26:	bfb4      	ite	lt
 8006a28:	18d2      	addlt	r2, r2, r3
 8006a2a:	1b9e      	subge	r6, r3, r6
 8006a2c:	9b04      	ldr	r3, [sp, #16]
 8006a2e:	bfbc      	itt	lt
 8006a30:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006a32:	2600      	movlt	r6, #0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	bfb7      	itett	lt
 8006a38:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006a3c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006a40:	1a9d      	sublt	r5, r3, r2
 8006a42:	2300      	movlt	r3, #0
 8006a44:	e741      	b.n	80068ca <_dtoa_r+0x742>
 8006a46:	9e08      	ldr	r6, [sp, #32]
 8006a48:	9d05      	ldr	r5, [sp, #20]
 8006a4a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006a4c:	e748      	b.n	80068e0 <_dtoa_r+0x758>
 8006a4e:	9a08      	ldr	r2, [sp, #32]
 8006a50:	e770      	b.n	8006934 <_dtoa_r+0x7ac>
 8006a52:	9b07      	ldr	r3, [sp, #28]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	dc19      	bgt.n	8006a8c <_dtoa_r+0x904>
 8006a58:	9b02      	ldr	r3, [sp, #8]
 8006a5a:	b9bb      	cbnz	r3, 8006a8c <_dtoa_r+0x904>
 8006a5c:	9b03      	ldr	r3, [sp, #12]
 8006a5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a62:	b99b      	cbnz	r3, 8006a8c <_dtoa_r+0x904>
 8006a64:	9b03      	ldr	r3, [sp, #12]
 8006a66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a6a:	0d1b      	lsrs	r3, r3, #20
 8006a6c:	051b      	lsls	r3, r3, #20
 8006a6e:	b183      	cbz	r3, 8006a92 <_dtoa_r+0x90a>
 8006a70:	9b05      	ldr	r3, [sp, #20]
 8006a72:	3301      	adds	r3, #1
 8006a74:	9305      	str	r3, [sp, #20]
 8006a76:	9b06      	ldr	r3, [sp, #24]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	9306      	str	r3, [sp, #24]
 8006a7c:	f04f 0801 	mov.w	r8, #1
 8006a80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f47f af6f 	bne.w	8006966 <_dtoa_r+0x7de>
 8006a88:	2001      	movs	r0, #1
 8006a8a:	e774      	b.n	8006976 <_dtoa_r+0x7ee>
 8006a8c:	f04f 0800 	mov.w	r8, #0
 8006a90:	e7f6      	b.n	8006a80 <_dtoa_r+0x8f8>
 8006a92:	4698      	mov	r8, r3
 8006a94:	e7f4      	b.n	8006a80 <_dtoa_r+0x8f8>
 8006a96:	d082      	beq.n	800699e <_dtoa_r+0x816>
 8006a98:	9a05      	ldr	r2, [sp, #20]
 8006a9a:	331c      	adds	r3, #28
 8006a9c:	441a      	add	r2, r3
 8006a9e:	9205      	str	r2, [sp, #20]
 8006aa0:	9a06      	ldr	r2, [sp, #24]
 8006aa2:	441a      	add	r2, r3
 8006aa4:	441d      	add	r5, r3
 8006aa6:	9206      	str	r2, [sp, #24]
 8006aa8:	e779      	b.n	800699e <_dtoa_r+0x816>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	e7f4      	b.n	8006a98 <_dtoa_r+0x910>
 8006aae:	9b04      	ldr	r3, [sp, #16]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	dc37      	bgt.n	8006b24 <_dtoa_r+0x99c>
 8006ab4:	9b07      	ldr	r3, [sp, #28]
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	dd34      	ble.n	8006b24 <_dtoa_r+0x99c>
 8006aba:	9b04      	ldr	r3, [sp, #16]
 8006abc:	9301      	str	r3, [sp, #4]
 8006abe:	9b01      	ldr	r3, [sp, #4]
 8006ac0:	b963      	cbnz	r3, 8006adc <_dtoa_r+0x954>
 8006ac2:	4631      	mov	r1, r6
 8006ac4:	2205      	movs	r2, #5
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	f000 fab2 	bl	8007030 <__multadd>
 8006acc:	4601      	mov	r1, r0
 8006ace:	4606      	mov	r6, r0
 8006ad0:	4650      	mov	r0, sl
 8006ad2:	f000 fd11 	bl	80074f8 <__mcmp>
 8006ad6:	2800      	cmp	r0, #0
 8006ad8:	f73f adbb 	bgt.w	8006652 <_dtoa_r+0x4ca>
 8006adc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ade:	9d00      	ldr	r5, [sp, #0]
 8006ae0:	ea6f 0b03 	mvn.w	fp, r3
 8006ae4:	f04f 0800 	mov.w	r8, #0
 8006ae8:	4631      	mov	r1, r6
 8006aea:	4620      	mov	r0, r4
 8006aec:	f000 fa7e 	bl	8006fec <_Bfree>
 8006af0:	2f00      	cmp	r7, #0
 8006af2:	f43f aeab 	beq.w	800684c <_dtoa_r+0x6c4>
 8006af6:	f1b8 0f00 	cmp.w	r8, #0
 8006afa:	d005      	beq.n	8006b08 <_dtoa_r+0x980>
 8006afc:	45b8      	cmp	r8, r7
 8006afe:	d003      	beq.n	8006b08 <_dtoa_r+0x980>
 8006b00:	4641      	mov	r1, r8
 8006b02:	4620      	mov	r0, r4
 8006b04:	f000 fa72 	bl	8006fec <_Bfree>
 8006b08:	4639      	mov	r1, r7
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	f000 fa6e 	bl	8006fec <_Bfree>
 8006b10:	e69c      	b.n	800684c <_dtoa_r+0x6c4>
 8006b12:	2600      	movs	r6, #0
 8006b14:	4637      	mov	r7, r6
 8006b16:	e7e1      	b.n	8006adc <_dtoa_r+0x954>
 8006b18:	46bb      	mov	fp, r7
 8006b1a:	4637      	mov	r7, r6
 8006b1c:	e599      	b.n	8006652 <_dtoa_r+0x4ca>
 8006b1e:	bf00      	nop
 8006b20:	40240000 	.word	0x40240000
 8006b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f000 80c8 	beq.w	8006cbc <_dtoa_r+0xb34>
 8006b2c:	9b04      	ldr	r3, [sp, #16]
 8006b2e:	9301      	str	r3, [sp, #4]
 8006b30:	2d00      	cmp	r5, #0
 8006b32:	dd05      	ble.n	8006b40 <_dtoa_r+0x9b8>
 8006b34:	4639      	mov	r1, r7
 8006b36:	462a      	mov	r2, r5
 8006b38:	4620      	mov	r0, r4
 8006b3a:	f000 fc71 	bl	8007420 <__lshift>
 8006b3e:	4607      	mov	r7, r0
 8006b40:	f1b8 0f00 	cmp.w	r8, #0
 8006b44:	d05b      	beq.n	8006bfe <_dtoa_r+0xa76>
 8006b46:	6879      	ldr	r1, [r7, #4]
 8006b48:	4620      	mov	r0, r4
 8006b4a:	f000 fa0f 	bl	8006f6c <_Balloc>
 8006b4e:	4605      	mov	r5, r0
 8006b50:	b928      	cbnz	r0, 8006b5e <_dtoa_r+0x9d6>
 8006b52:	4b83      	ldr	r3, [pc, #524]	; (8006d60 <_dtoa_r+0xbd8>)
 8006b54:	4602      	mov	r2, r0
 8006b56:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006b5a:	f7ff bb2e 	b.w	80061ba <_dtoa_r+0x32>
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	3202      	adds	r2, #2
 8006b62:	0092      	lsls	r2, r2, #2
 8006b64:	f107 010c 	add.w	r1, r7, #12
 8006b68:	300c      	adds	r0, #12
 8006b6a:	f001 ff85 	bl	8008a78 <memcpy>
 8006b6e:	2201      	movs	r2, #1
 8006b70:	4629      	mov	r1, r5
 8006b72:	4620      	mov	r0, r4
 8006b74:	f000 fc54 	bl	8007420 <__lshift>
 8006b78:	9b00      	ldr	r3, [sp, #0]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	9304      	str	r3, [sp, #16]
 8006b7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b82:	4413      	add	r3, r2
 8006b84:	9308      	str	r3, [sp, #32]
 8006b86:	9b02      	ldr	r3, [sp, #8]
 8006b88:	f003 0301 	and.w	r3, r3, #1
 8006b8c:	46b8      	mov	r8, r7
 8006b8e:	9306      	str	r3, [sp, #24]
 8006b90:	4607      	mov	r7, r0
 8006b92:	9b04      	ldr	r3, [sp, #16]
 8006b94:	4631      	mov	r1, r6
 8006b96:	3b01      	subs	r3, #1
 8006b98:	4650      	mov	r0, sl
 8006b9a:	9301      	str	r3, [sp, #4]
 8006b9c:	f7ff fa6a 	bl	8006074 <quorem>
 8006ba0:	4641      	mov	r1, r8
 8006ba2:	9002      	str	r0, [sp, #8]
 8006ba4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006ba8:	4650      	mov	r0, sl
 8006baa:	f000 fca5 	bl	80074f8 <__mcmp>
 8006bae:	463a      	mov	r2, r7
 8006bb0:	9005      	str	r0, [sp, #20]
 8006bb2:	4631      	mov	r1, r6
 8006bb4:	4620      	mov	r0, r4
 8006bb6:	f000 fcbb 	bl	8007530 <__mdiff>
 8006bba:	68c2      	ldr	r2, [r0, #12]
 8006bbc:	4605      	mov	r5, r0
 8006bbe:	bb02      	cbnz	r2, 8006c02 <_dtoa_r+0xa7a>
 8006bc0:	4601      	mov	r1, r0
 8006bc2:	4650      	mov	r0, sl
 8006bc4:	f000 fc98 	bl	80074f8 <__mcmp>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	4629      	mov	r1, r5
 8006bcc:	4620      	mov	r0, r4
 8006bce:	9209      	str	r2, [sp, #36]	; 0x24
 8006bd0:	f000 fa0c 	bl	8006fec <_Bfree>
 8006bd4:	9b07      	ldr	r3, [sp, #28]
 8006bd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bd8:	9d04      	ldr	r5, [sp, #16]
 8006bda:	ea43 0102 	orr.w	r1, r3, r2
 8006bde:	9b06      	ldr	r3, [sp, #24]
 8006be0:	4319      	orrs	r1, r3
 8006be2:	d110      	bne.n	8006c06 <_dtoa_r+0xa7e>
 8006be4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006be8:	d029      	beq.n	8006c3e <_dtoa_r+0xab6>
 8006bea:	9b05      	ldr	r3, [sp, #20]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	dd02      	ble.n	8006bf6 <_dtoa_r+0xa6e>
 8006bf0:	9b02      	ldr	r3, [sp, #8]
 8006bf2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006bf6:	9b01      	ldr	r3, [sp, #4]
 8006bf8:	f883 9000 	strb.w	r9, [r3]
 8006bfc:	e774      	b.n	8006ae8 <_dtoa_r+0x960>
 8006bfe:	4638      	mov	r0, r7
 8006c00:	e7ba      	b.n	8006b78 <_dtoa_r+0x9f0>
 8006c02:	2201      	movs	r2, #1
 8006c04:	e7e1      	b.n	8006bca <_dtoa_r+0xa42>
 8006c06:	9b05      	ldr	r3, [sp, #20]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	db04      	blt.n	8006c16 <_dtoa_r+0xa8e>
 8006c0c:	9907      	ldr	r1, [sp, #28]
 8006c0e:	430b      	orrs	r3, r1
 8006c10:	9906      	ldr	r1, [sp, #24]
 8006c12:	430b      	orrs	r3, r1
 8006c14:	d120      	bne.n	8006c58 <_dtoa_r+0xad0>
 8006c16:	2a00      	cmp	r2, #0
 8006c18:	dded      	ble.n	8006bf6 <_dtoa_r+0xa6e>
 8006c1a:	4651      	mov	r1, sl
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	4620      	mov	r0, r4
 8006c20:	f000 fbfe 	bl	8007420 <__lshift>
 8006c24:	4631      	mov	r1, r6
 8006c26:	4682      	mov	sl, r0
 8006c28:	f000 fc66 	bl	80074f8 <__mcmp>
 8006c2c:	2800      	cmp	r0, #0
 8006c2e:	dc03      	bgt.n	8006c38 <_dtoa_r+0xab0>
 8006c30:	d1e1      	bne.n	8006bf6 <_dtoa_r+0xa6e>
 8006c32:	f019 0f01 	tst.w	r9, #1
 8006c36:	d0de      	beq.n	8006bf6 <_dtoa_r+0xa6e>
 8006c38:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006c3c:	d1d8      	bne.n	8006bf0 <_dtoa_r+0xa68>
 8006c3e:	9a01      	ldr	r2, [sp, #4]
 8006c40:	2339      	movs	r3, #57	; 0x39
 8006c42:	7013      	strb	r3, [r2, #0]
 8006c44:	462b      	mov	r3, r5
 8006c46:	461d      	mov	r5, r3
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006c4e:	2a39      	cmp	r2, #57	; 0x39
 8006c50:	d06c      	beq.n	8006d2c <_dtoa_r+0xba4>
 8006c52:	3201      	adds	r2, #1
 8006c54:	701a      	strb	r2, [r3, #0]
 8006c56:	e747      	b.n	8006ae8 <_dtoa_r+0x960>
 8006c58:	2a00      	cmp	r2, #0
 8006c5a:	dd07      	ble.n	8006c6c <_dtoa_r+0xae4>
 8006c5c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006c60:	d0ed      	beq.n	8006c3e <_dtoa_r+0xab6>
 8006c62:	9a01      	ldr	r2, [sp, #4]
 8006c64:	f109 0301 	add.w	r3, r9, #1
 8006c68:	7013      	strb	r3, [r2, #0]
 8006c6a:	e73d      	b.n	8006ae8 <_dtoa_r+0x960>
 8006c6c:	9b04      	ldr	r3, [sp, #16]
 8006c6e:	9a08      	ldr	r2, [sp, #32]
 8006c70:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d043      	beq.n	8006d00 <_dtoa_r+0xb78>
 8006c78:	4651      	mov	r1, sl
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	220a      	movs	r2, #10
 8006c7e:	4620      	mov	r0, r4
 8006c80:	f000 f9d6 	bl	8007030 <__multadd>
 8006c84:	45b8      	cmp	r8, r7
 8006c86:	4682      	mov	sl, r0
 8006c88:	f04f 0300 	mov.w	r3, #0
 8006c8c:	f04f 020a 	mov.w	r2, #10
 8006c90:	4641      	mov	r1, r8
 8006c92:	4620      	mov	r0, r4
 8006c94:	d107      	bne.n	8006ca6 <_dtoa_r+0xb1e>
 8006c96:	f000 f9cb 	bl	8007030 <__multadd>
 8006c9a:	4680      	mov	r8, r0
 8006c9c:	4607      	mov	r7, r0
 8006c9e:	9b04      	ldr	r3, [sp, #16]
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	9304      	str	r3, [sp, #16]
 8006ca4:	e775      	b.n	8006b92 <_dtoa_r+0xa0a>
 8006ca6:	f000 f9c3 	bl	8007030 <__multadd>
 8006caa:	4639      	mov	r1, r7
 8006cac:	4680      	mov	r8, r0
 8006cae:	2300      	movs	r3, #0
 8006cb0:	220a      	movs	r2, #10
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	f000 f9bc 	bl	8007030 <__multadd>
 8006cb8:	4607      	mov	r7, r0
 8006cba:	e7f0      	b.n	8006c9e <_dtoa_r+0xb16>
 8006cbc:	9b04      	ldr	r3, [sp, #16]
 8006cbe:	9301      	str	r3, [sp, #4]
 8006cc0:	9d00      	ldr	r5, [sp, #0]
 8006cc2:	4631      	mov	r1, r6
 8006cc4:	4650      	mov	r0, sl
 8006cc6:	f7ff f9d5 	bl	8006074 <quorem>
 8006cca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006cce:	9b00      	ldr	r3, [sp, #0]
 8006cd0:	f805 9b01 	strb.w	r9, [r5], #1
 8006cd4:	1aea      	subs	r2, r5, r3
 8006cd6:	9b01      	ldr	r3, [sp, #4]
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	dd07      	ble.n	8006cec <_dtoa_r+0xb64>
 8006cdc:	4651      	mov	r1, sl
 8006cde:	2300      	movs	r3, #0
 8006ce0:	220a      	movs	r2, #10
 8006ce2:	4620      	mov	r0, r4
 8006ce4:	f000 f9a4 	bl	8007030 <__multadd>
 8006ce8:	4682      	mov	sl, r0
 8006cea:	e7ea      	b.n	8006cc2 <_dtoa_r+0xb3a>
 8006cec:	9b01      	ldr	r3, [sp, #4]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	bfc8      	it	gt
 8006cf2:	461d      	movgt	r5, r3
 8006cf4:	9b00      	ldr	r3, [sp, #0]
 8006cf6:	bfd8      	it	le
 8006cf8:	2501      	movle	r5, #1
 8006cfa:	441d      	add	r5, r3
 8006cfc:	f04f 0800 	mov.w	r8, #0
 8006d00:	4651      	mov	r1, sl
 8006d02:	2201      	movs	r2, #1
 8006d04:	4620      	mov	r0, r4
 8006d06:	f000 fb8b 	bl	8007420 <__lshift>
 8006d0a:	4631      	mov	r1, r6
 8006d0c:	4682      	mov	sl, r0
 8006d0e:	f000 fbf3 	bl	80074f8 <__mcmp>
 8006d12:	2800      	cmp	r0, #0
 8006d14:	dc96      	bgt.n	8006c44 <_dtoa_r+0xabc>
 8006d16:	d102      	bne.n	8006d1e <_dtoa_r+0xb96>
 8006d18:	f019 0f01 	tst.w	r9, #1
 8006d1c:	d192      	bne.n	8006c44 <_dtoa_r+0xabc>
 8006d1e:	462b      	mov	r3, r5
 8006d20:	461d      	mov	r5, r3
 8006d22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d26:	2a30      	cmp	r2, #48	; 0x30
 8006d28:	d0fa      	beq.n	8006d20 <_dtoa_r+0xb98>
 8006d2a:	e6dd      	b.n	8006ae8 <_dtoa_r+0x960>
 8006d2c:	9a00      	ldr	r2, [sp, #0]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d189      	bne.n	8006c46 <_dtoa_r+0xabe>
 8006d32:	f10b 0b01 	add.w	fp, fp, #1
 8006d36:	2331      	movs	r3, #49	; 0x31
 8006d38:	e796      	b.n	8006c68 <_dtoa_r+0xae0>
 8006d3a:	4b0a      	ldr	r3, [pc, #40]	; (8006d64 <_dtoa_r+0xbdc>)
 8006d3c:	f7ff ba99 	b.w	8006272 <_dtoa_r+0xea>
 8006d40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f47f aa6d 	bne.w	8006222 <_dtoa_r+0x9a>
 8006d48:	4b07      	ldr	r3, [pc, #28]	; (8006d68 <_dtoa_r+0xbe0>)
 8006d4a:	f7ff ba92 	b.w	8006272 <_dtoa_r+0xea>
 8006d4e:	9b01      	ldr	r3, [sp, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	dcb5      	bgt.n	8006cc0 <_dtoa_r+0xb38>
 8006d54:	9b07      	ldr	r3, [sp, #28]
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	f73f aeb1 	bgt.w	8006abe <_dtoa_r+0x936>
 8006d5c:	e7b0      	b.n	8006cc0 <_dtoa_r+0xb38>
 8006d5e:	bf00      	nop
 8006d60:	0800b1d5 	.word	0x0800b1d5
 8006d64:	0800b130 	.word	0x0800b130
 8006d68:	0800b159 	.word	0x0800b159

08006d6c <_free_r>:
 8006d6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d6e:	2900      	cmp	r1, #0
 8006d70:	d044      	beq.n	8006dfc <_free_r+0x90>
 8006d72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d76:	9001      	str	r0, [sp, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f1a1 0404 	sub.w	r4, r1, #4
 8006d7e:	bfb8      	it	lt
 8006d80:	18e4      	addlt	r4, r4, r3
 8006d82:	f000 f8e7 	bl	8006f54 <__malloc_lock>
 8006d86:	4a1e      	ldr	r2, [pc, #120]	; (8006e00 <_free_r+0x94>)
 8006d88:	9801      	ldr	r0, [sp, #4]
 8006d8a:	6813      	ldr	r3, [r2, #0]
 8006d8c:	b933      	cbnz	r3, 8006d9c <_free_r+0x30>
 8006d8e:	6063      	str	r3, [r4, #4]
 8006d90:	6014      	str	r4, [r2, #0]
 8006d92:	b003      	add	sp, #12
 8006d94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d98:	f000 b8e2 	b.w	8006f60 <__malloc_unlock>
 8006d9c:	42a3      	cmp	r3, r4
 8006d9e:	d908      	bls.n	8006db2 <_free_r+0x46>
 8006da0:	6825      	ldr	r5, [r4, #0]
 8006da2:	1961      	adds	r1, r4, r5
 8006da4:	428b      	cmp	r3, r1
 8006da6:	bf01      	itttt	eq
 8006da8:	6819      	ldreq	r1, [r3, #0]
 8006daa:	685b      	ldreq	r3, [r3, #4]
 8006dac:	1949      	addeq	r1, r1, r5
 8006dae:	6021      	streq	r1, [r4, #0]
 8006db0:	e7ed      	b.n	8006d8e <_free_r+0x22>
 8006db2:	461a      	mov	r2, r3
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	b10b      	cbz	r3, 8006dbc <_free_r+0x50>
 8006db8:	42a3      	cmp	r3, r4
 8006dba:	d9fa      	bls.n	8006db2 <_free_r+0x46>
 8006dbc:	6811      	ldr	r1, [r2, #0]
 8006dbe:	1855      	adds	r5, r2, r1
 8006dc0:	42a5      	cmp	r5, r4
 8006dc2:	d10b      	bne.n	8006ddc <_free_r+0x70>
 8006dc4:	6824      	ldr	r4, [r4, #0]
 8006dc6:	4421      	add	r1, r4
 8006dc8:	1854      	adds	r4, r2, r1
 8006dca:	42a3      	cmp	r3, r4
 8006dcc:	6011      	str	r1, [r2, #0]
 8006dce:	d1e0      	bne.n	8006d92 <_free_r+0x26>
 8006dd0:	681c      	ldr	r4, [r3, #0]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	6053      	str	r3, [r2, #4]
 8006dd6:	440c      	add	r4, r1
 8006dd8:	6014      	str	r4, [r2, #0]
 8006dda:	e7da      	b.n	8006d92 <_free_r+0x26>
 8006ddc:	d902      	bls.n	8006de4 <_free_r+0x78>
 8006dde:	230c      	movs	r3, #12
 8006de0:	6003      	str	r3, [r0, #0]
 8006de2:	e7d6      	b.n	8006d92 <_free_r+0x26>
 8006de4:	6825      	ldr	r5, [r4, #0]
 8006de6:	1961      	adds	r1, r4, r5
 8006de8:	428b      	cmp	r3, r1
 8006dea:	bf04      	itt	eq
 8006dec:	6819      	ldreq	r1, [r3, #0]
 8006dee:	685b      	ldreq	r3, [r3, #4]
 8006df0:	6063      	str	r3, [r4, #4]
 8006df2:	bf04      	itt	eq
 8006df4:	1949      	addeq	r1, r1, r5
 8006df6:	6021      	streq	r1, [r4, #0]
 8006df8:	6054      	str	r4, [r2, #4]
 8006dfa:	e7ca      	b.n	8006d92 <_free_r+0x26>
 8006dfc:	b003      	add	sp, #12
 8006dfe:	bd30      	pop	{r4, r5, pc}
 8006e00:	2000042c 	.word	0x2000042c

08006e04 <malloc>:
 8006e04:	4b02      	ldr	r3, [pc, #8]	; (8006e10 <malloc+0xc>)
 8006e06:	4601      	mov	r1, r0
 8006e08:	6818      	ldr	r0, [r3, #0]
 8006e0a:	f000 b823 	b.w	8006e54 <_malloc_r>
 8006e0e:	bf00      	nop
 8006e10:	20000064 	.word	0x20000064

08006e14 <sbrk_aligned>:
 8006e14:	b570      	push	{r4, r5, r6, lr}
 8006e16:	4e0e      	ldr	r6, [pc, #56]	; (8006e50 <sbrk_aligned+0x3c>)
 8006e18:	460c      	mov	r4, r1
 8006e1a:	6831      	ldr	r1, [r6, #0]
 8006e1c:	4605      	mov	r5, r0
 8006e1e:	b911      	cbnz	r1, 8006e26 <sbrk_aligned+0x12>
 8006e20:	f001 fe1a 	bl	8008a58 <_sbrk_r>
 8006e24:	6030      	str	r0, [r6, #0]
 8006e26:	4621      	mov	r1, r4
 8006e28:	4628      	mov	r0, r5
 8006e2a:	f001 fe15 	bl	8008a58 <_sbrk_r>
 8006e2e:	1c43      	adds	r3, r0, #1
 8006e30:	d00a      	beq.n	8006e48 <sbrk_aligned+0x34>
 8006e32:	1cc4      	adds	r4, r0, #3
 8006e34:	f024 0403 	bic.w	r4, r4, #3
 8006e38:	42a0      	cmp	r0, r4
 8006e3a:	d007      	beq.n	8006e4c <sbrk_aligned+0x38>
 8006e3c:	1a21      	subs	r1, r4, r0
 8006e3e:	4628      	mov	r0, r5
 8006e40:	f001 fe0a 	bl	8008a58 <_sbrk_r>
 8006e44:	3001      	adds	r0, #1
 8006e46:	d101      	bne.n	8006e4c <sbrk_aligned+0x38>
 8006e48:	f04f 34ff 	mov.w	r4, #4294967295
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	bd70      	pop	{r4, r5, r6, pc}
 8006e50:	20000430 	.word	0x20000430

08006e54 <_malloc_r>:
 8006e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e58:	1ccd      	adds	r5, r1, #3
 8006e5a:	f025 0503 	bic.w	r5, r5, #3
 8006e5e:	3508      	adds	r5, #8
 8006e60:	2d0c      	cmp	r5, #12
 8006e62:	bf38      	it	cc
 8006e64:	250c      	movcc	r5, #12
 8006e66:	2d00      	cmp	r5, #0
 8006e68:	4607      	mov	r7, r0
 8006e6a:	db01      	blt.n	8006e70 <_malloc_r+0x1c>
 8006e6c:	42a9      	cmp	r1, r5
 8006e6e:	d905      	bls.n	8006e7c <_malloc_r+0x28>
 8006e70:	230c      	movs	r3, #12
 8006e72:	603b      	str	r3, [r7, #0]
 8006e74:	2600      	movs	r6, #0
 8006e76:	4630      	mov	r0, r6
 8006e78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006f50 <_malloc_r+0xfc>
 8006e80:	f000 f868 	bl	8006f54 <__malloc_lock>
 8006e84:	f8d8 3000 	ldr.w	r3, [r8]
 8006e88:	461c      	mov	r4, r3
 8006e8a:	bb5c      	cbnz	r4, 8006ee4 <_malloc_r+0x90>
 8006e8c:	4629      	mov	r1, r5
 8006e8e:	4638      	mov	r0, r7
 8006e90:	f7ff ffc0 	bl	8006e14 <sbrk_aligned>
 8006e94:	1c43      	adds	r3, r0, #1
 8006e96:	4604      	mov	r4, r0
 8006e98:	d155      	bne.n	8006f46 <_malloc_r+0xf2>
 8006e9a:	f8d8 4000 	ldr.w	r4, [r8]
 8006e9e:	4626      	mov	r6, r4
 8006ea0:	2e00      	cmp	r6, #0
 8006ea2:	d145      	bne.n	8006f30 <_malloc_r+0xdc>
 8006ea4:	2c00      	cmp	r4, #0
 8006ea6:	d048      	beq.n	8006f3a <_malloc_r+0xe6>
 8006ea8:	6823      	ldr	r3, [r4, #0]
 8006eaa:	4631      	mov	r1, r6
 8006eac:	4638      	mov	r0, r7
 8006eae:	eb04 0903 	add.w	r9, r4, r3
 8006eb2:	f001 fdd1 	bl	8008a58 <_sbrk_r>
 8006eb6:	4581      	cmp	r9, r0
 8006eb8:	d13f      	bne.n	8006f3a <_malloc_r+0xe6>
 8006eba:	6821      	ldr	r1, [r4, #0]
 8006ebc:	1a6d      	subs	r5, r5, r1
 8006ebe:	4629      	mov	r1, r5
 8006ec0:	4638      	mov	r0, r7
 8006ec2:	f7ff ffa7 	bl	8006e14 <sbrk_aligned>
 8006ec6:	3001      	adds	r0, #1
 8006ec8:	d037      	beq.n	8006f3a <_malloc_r+0xe6>
 8006eca:	6823      	ldr	r3, [r4, #0]
 8006ecc:	442b      	add	r3, r5
 8006ece:	6023      	str	r3, [r4, #0]
 8006ed0:	f8d8 3000 	ldr.w	r3, [r8]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d038      	beq.n	8006f4a <_malloc_r+0xf6>
 8006ed8:	685a      	ldr	r2, [r3, #4]
 8006eda:	42a2      	cmp	r2, r4
 8006edc:	d12b      	bne.n	8006f36 <_malloc_r+0xe2>
 8006ede:	2200      	movs	r2, #0
 8006ee0:	605a      	str	r2, [r3, #4]
 8006ee2:	e00f      	b.n	8006f04 <_malloc_r+0xb0>
 8006ee4:	6822      	ldr	r2, [r4, #0]
 8006ee6:	1b52      	subs	r2, r2, r5
 8006ee8:	d41f      	bmi.n	8006f2a <_malloc_r+0xd6>
 8006eea:	2a0b      	cmp	r2, #11
 8006eec:	d917      	bls.n	8006f1e <_malloc_r+0xca>
 8006eee:	1961      	adds	r1, r4, r5
 8006ef0:	42a3      	cmp	r3, r4
 8006ef2:	6025      	str	r5, [r4, #0]
 8006ef4:	bf18      	it	ne
 8006ef6:	6059      	strne	r1, [r3, #4]
 8006ef8:	6863      	ldr	r3, [r4, #4]
 8006efa:	bf08      	it	eq
 8006efc:	f8c8 1000 	streq.w	r1, [r8]
 8006f00:	5162      	str	r2, [r4, r5]
 8006f02:	604b      	str	r3, [r1, #4]
 8006f04:	4638      	mov	r0, r7
 8006f06:	f104 060b 	add.w	r6, r4, #11
 8006f0a:	f000 f829 	bl	8006f60 <__malloc_unlock>
 8006f0e:	f026 0607 	bic.w	r6, r6, #7
 8006f12:	1d23      	adds	r3, r4, #4
 8006f14:	1af2      	subs	r2, r6, r3
 8006f16:	d0ae      	beq.n	8006e76 <_malloc_r+0x22>
 8006f18:	1b9b      	subs	r3, r3, r6
 8006f1a:	50a3      	str	r3, [r4, r2]
 8006f1c:	e7ab      	b.n	8006e76 <_malloc_r+0x22>
 8006f1e:	42a3      	cmp	r3, r4
 8006f20:	6862      	ldr	r2, [r4, #4]
 8006f22:	d1dd      	bne.n	8006ee0 <_malloc_r+0x8c>
 8006f24:	f8c8 2000 	str.w	r2, [r8]
 8006f28:	e7ec      	b.n	8006f04 <_malloc_r+0xb0>
 8006f2a:	4623      	mov	r3, r4
 8006f2c:	6864      	ldr	r4, [r4, #4]
 8006f2e:	e7ac      	b.n	8006e8a <_malloc_r+0x36>
 8006f30:	4634      	mov	r4, r6
 8006f32:	6876      	ldr	r6, [r6, #4]
 8006f34:	e7b4      	b.n	8006ea0 <_malloc_r+0x4c>
 8006f36:	4613      	mov	r3, r2
 8006f38:	e7cc      	b.n	8006ed4 <_malloc_r+0x80>
 8006f3a:	230c      	movs	r3, #12
 8006f3c:	603b      	str	r3, [r7, #0]
 8006f3e:	4638      	mov	r0, r7
 8006f40:	f000 f80e 	bl	8006f60 <__malloc_unlock>
 8006f44:	e797      	b.n	8006e76 <_malloc_r+0x22>
 8006f46:	6025      	str	r5, [r4, #0]
 8006f48:	e7dc      	b.n	8006f04 <_malloc_r+0xb0>
 8006f4a:	605b      	str	r3, [r3, #4]
 8006f4c:	deff      	udf	#255	; 0xff
 8006f4e:	bf00      	nop
 8006f50:	2000042c 	.word	0x2000042c

08006f54 <__malloc_lock>:
 8006f54:	4801      	ldr	r0, [pc, #4]	; (8006f5c <__malloc_lock+0x8>)
 8006f56:	f7ff b885 	b.w	8006064 <__retarget_lock_acquire_recursive>
 8006f5a:	bf00      	nop
 8006f5c:	20000428 	.word	0x20000428

08006f60 <__malloc_unlock>:
 8006f60:	4801      	ldr	r0, [pc, #4]	; (8006f68 <__malloc_unlock+0x8>)
 8006f62:	f7ff b880 	b.w	8006066 <__retarget_lock_release_recursive>
 8006f66:	bf00      	nop
 8006f68:	20000428 	.word	0x20000428

08006f6c <_Balloc>:
 8006f6c:	b570      	push	{r4, r5, r6, lr}
 8006f6e:	69c6      	ldr	r6, [r0, #28]
 8006f70:	4604      	mov	r4, r0
 8006f72:	460d      	mov	r5, r1
 8006f74:	b976      	cbnz	r6, 8006f94 <_Balloc+0x28>
 8006f76:	2010      	movs	r0, #16
 8006f78:	f7ff ff44 	bl	8006e04 <malloc>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	61e0      	str	r0, [r4, #28]
 8006f80:	b920      	cbnz	r0, 8006f8c <_Balloc+0x20>
 8006f82:	4b18      	ldr	r3, [pc, #96]	; (8006fe4 <_Balloc+0x78>)
 8006f84:	4818      	ldr	r0, [pc, #96]	; (8006fe8 <_Balloc+0x7c>)
 8006f86:	216b      	movs	r1, #107	; 0x6b
 8006f88:	f001 fd8e 	bl	8008aa8 <__assert_func>
 8006f8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f90:	6006      	str	r6, [r0, #0]
 8006f92:	60c6      	str	r6, [r0, #12]
 8006f94:	69e6      	ldr	r6, [r4, #28]
 8006f96:	68f3      	ldr	r3, [r6, #12]
 8006f98:	b183      	cbz	r3, 8006fbc <_Balloc+0x50>
 8006f9a:	69e3      	ldr	r3, [r4, #28]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006fa2:	b9b8      	cbnz	r0, 8006fd4 <_Balloc+0x68>
 8006fa4:	2101      	movs	r1, #1
 8006fa6:	fa01 f605 	lsl.w	r6, r1, r5
 8006faa:	1d72      	adds	r2, r6, #5
 8006fac:	0092      	lsls	r2, r2, #2
 8006fae:	4620      	mov	r0, r4
 8006fb0:	f001 fd98 	bl	8008ae4 <_calloc_r>
 8006fb4:	b160      	cbz	r0, 8006fd0 <_Balloc+0x64>
 8006fb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006fba:	e00e      	b.n	8006fda <_Balloc+0x6e>
 8006fbc:	2221      	movs	r2, #33	; 0x21
 8006fbe:	2104      	movs	r1, #4
 8006fc0:	4620      	mov	r0, r4
 8006fc2:	f001 fd8f 	bl	8008ae4 <_calloc_r>
 8006fc6:	69e3      	ldr	r3, [r4, #28]
 8006fc8:	60f0      	str	r0, [r6, #12]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d1e4      	bne.n	8006f9a <_Balloc+0x2e>
 8006fd0:	2000      	movs	r0, #0
 8006fd2:	bd70      	pop	{r4, r5, r6, pc}
 8006fd4:	6802      	ldr	r2, [r0, #0]
 8006fd6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006fda:	2300      	movs	r3, #0
 8006fdc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006fe0:	e7f7      	b.n	8006fd2 <_Balloc+0x66>
 8006fe2:	bf00      	nop
 8006fe4:	0800b166 	.word	0x0800b166
 8006fe8:	0800b1e6 	.word	0x0800b1e6

08006fec <_Bfree>:
 8006fec:	b570      	push	{r4, r5, r6, lr}
 8006fee:	69c6      	ldr	r6, [r0, #28]
 8006ff0:	4605      	mov	r5, r0
 8006ff2:	460c      	mov	r4, r1
 8006ff4:	b976      	cbnz	r6, 8007014 <_Bfree+0x28>
 8006ff6:	2010      	movs	r0, #16
 8006ff8:	f7ff ff04 	bl	8006e04 <malloc>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	61e8      	str	r0, [r5, #28]
 8007000:	b920      	cbnz	r0, 800700c <_Bfree+0x20>
 8007002:	4b09      	ldr	r3, [pc, #36]	; (8007028 <_Bfree+0x3c>)
 8007004:	4809      	ldr	r0, [pc, #36]	; (800702c <_Bfree+0x40>)
 8007006:	218f      	movs	r1, #143	; 0x8f
 8007008:	f001 fd4e 	bl	8008aa8 <__assert_func>
 800700c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007010:	6006      	str	r6, [r0, #0]
 8007012:	60c6      	str	r6, [r0, #12]
 8007014:	b13c      	cbz	r4, 8007026 <_Bfree+0x3a>
 8007016:	69eb      	ldr	r3, [r5, #28]
 8007018:	6862      	ldr	r2, [r4, #4]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007020:	6021      	str	r1, [r4, #0]
 8007022:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007026:	bd70      	pop	{r4, r5, r6, pc}
 8007028:	0800b166 	.word	0x0800b166
 800702c:	0800b1e6 	.word	0x0800b1e6

08007030 <__multadd>:
 8007030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007034:	690d      	ldr	r5, [r1, #16]
 8007036:	4607      	mov	r7, r0
 8007038:	460c      	mov	r4, r1
 800703a:	461e      	mov	r6, r3
 800703c:	f101 0c14 	add.w	ip, r1, #20
 8007040:	2000      	movs	r0, #0
 8007042:	f8dc 3000 	ldr.w	r3, [ip]
 8007046:	b299      	uxth	r1, r3
 8007048:	fb02 6101 	mla	r1, r2, r1, r6
 800704c:	0c1e      	lsrs	r6, r3, #16
 800704e:	0c0b      	lsrs	r3, r1, #16
 8007050:	fb02 3306 	mla	r3, r2, r6, r3
 8007054:	b289      	uxth	r1, r1
 8007056:	3001      	adds	r0, #1
 8007058:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800705c:	4285      	cmp	r5, r0
 800705e:	f84c 1b04 	str.w	r1, [ip], #4
 8007062:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007066:	dcec      	bgt.n	8007042 <__multadd+0x12>
 8007068:	b30e      	cbz	r6, 80070ae <__multadd+0x7e>
 800706a:	68a3      	ldr	r3, [r4, #8]
 800706c:	42ab      	cmp	r3, r5
 800706e:	dc19      	bgt.n	80070a4 <__multadd+0x74>
 8007070:	6861      	ldr	r1, [r4, #4]
 8007072:	4638      	mov	r0, r7
 8007074:	3101      	adds	r1, #1
 8007076:	f7ff ff79 	bl	8006f6c <_Balloc>
 800707a:	4680      	mov	r8, r0
 800707c:	b928      	cbnz	r0, 800708a <__multadd+0x5a>
 800707e:	4602      	mov	r2, r0
 8007080:	4b0c      	ldr	r3, [pc, #48]	; (80070b4 <__multadd+0x84>)
 8007082:	480d      	ldr	r0, [pc, #52]	; (80070b8 <__multadd+0x88>)
 8007084:	21ba      	movs	r1, #186	; 0xba
 8007086:	f001 fd0f 	bl	8008aa8 <__assert_func>
 800708a:	6922      	ldr	r2, [r4, #16]
 800708c:	3202      	adds	r2, #2
 800708e:	f104 010c 	add.w	r1, r4, #12
 8007092:	0092      	lsls	r2, r2, #2
 8007094:	300c      	adds	r0, #12
 8007096:	f001 fcef 	bl	8008a78 <memcpy>
 800709a:	4621      	mov	r1, r4
 800709c:	4638      	mov	r0, r7
 800709e:	f7ff ffa5 	bl	8006fec <_Bfree>
 80070a2:	4644      	mov	r4, r8
 80070a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80070a8:	3501      	adds	r5, #1
 80070aa:	615e      	str	r6, [r3, #20]
 80070ac:	6125      	str	r5, [r4, #16]
 80070ae:	4620      	mov	r0, r4
 80070b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070b4:	0800b1d5 	.word	0x0800b1d5
 80070b8:	0800b1e6 	.word	0x0800b1e6

080070bc <__s2b>:
 80070bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070c0:	460c      	mov	r4, r1
 80070c2:	4615      	mov	r5, r2
 80070c4:	461f      	mov	r7, r3
 80070c6:	2209      	movs	r2, #9
 80070c8:	3308      	adds	r3, #8
 80070ca:	4606      	mov	r6, r0
 80070cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80070d0:	2100      	movs	r1, #0
 80070d2:	2201      	movs	r2, #1
 80070d4:	429a      	cmp	r2, r3
 80070d6:	db09      	blt.n	80070ec <__s2b+0x30>
 80070d8:	4630      	mov	r0, r6
 80070da:	f7ff ff47 	bl	8006f6c <_Balloc>
 80070de:	b940      	cbnz	r0, 80070f2 <__s2b+0x36>
 80070e0:	4602      	mov	r2, r0
 80070e2:	4b19      	ldr	r3, [pc, #100]	; (8007148 <__s2b+0x8c>)
 80070e4:	4819      	ldr	r0, [pc, #100]	; (800714c <__s2b+0x90>)
 80070e6:	21d3      	movs	r1, #211	; 0xd3
 80070e8:	f001 fcde 	bl	8008aa8 <__assert_func>
 80070ec:	0052      	lsls	r2, r2, #1
 80070ee:	3101      	adds	r1, #1
 80070f0:	e7f0      	b.n	80070d4 <__s2b+0x18>
 80070f2:	9b08      	ldr	r3, [sp, #32]
 80070f4:	6143      	str	r3, [r0, #20]
 80070f6:	2d09      	cmp	r5, #9
 80070f8:	f04f 0301 	mov.w	r3, #1
 80070fc:	6103      	str	r3, [r0, #16]
 80070fe:	dd16      	ble.n	800712e <__s2b+0x72>
 8007100:	f104 0909 	add.w	r9, r4, #9
 8007104:	46c8      	mov	r8, r9
 8007106:	442c      	add	r4, r5
 8007108:	f818 3b01 	ldrb.w	r3, [r8], #1
 800710c:	4601      	mov	r1, r0
 800710e:	3b30      	subs	r3, #48	; 0x30
 8007110:	220a      	movs	r2, #10
 8007112:	4630      	mov	r0, r6
 8007114:	f7ff ff8c 	bl	8007030 <__multadd>
 8007118:	45a0      	cmp	r8, r4
 800711a:	d1f5      	bne.n	8007108 <__s2b+0x4c>
 800711c:	f1a5 0408 	sub.w	r4, r5, #8
 8007120:	444c      	add	r4, r9
 8007122:	1b2d      	subs	r5, r5, r4
 8007124:	1963      	adds	r3, r4, r5
 8007126:	42bb      	cmp	r3, r7
 8007128:	db04      	blt.n	8007134 <__s2b+0x78>
 800712a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800712e:	340a      	adds	r4, #10
 8007130:	2509      	movs	r5, #9
 8007132:	e7f6      	b.n	8007122 <__s2b+0x66>
 8007134:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007138:	4601      	mov	r1, r0
 800713a:	3b30      	subs	r3, #48	; 0x30
 800713c:	220a      	movs	r2, #10
 800713e:	4630      	mov	r0, r6
 8007140:	f7ff ff76 	bl	8007030 <__multadd>
 8007144:	e7ee      	b.n	8007124 <__s2b+0x68>
 8007146:	bf00      	nop
 8007148:	0800b1d5 	.word	0x0800b1d5
 800714c:	0800b1e6 	.word	0x0800b1e6

08007150 <__hi0bits>:
 8007150:	0c03      	lsrs	r3, r0, #16
 8007152:	041b      	lsls	r3, r3, #16
 8007154:	b9d3      	cbnz	r3, 800718c <__hi0bits+0x3c>
 8007156:	0400      	lsls	r0, r0, #16
 8007158:	2310      	movs	r3, #16
 800715a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800715e:	bf04      	itt	eq
 8007160:	0200      	lsleq	r0, r0, #8
 8007162:	3308      	addeq	r3, #8
 8007164:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007168:	bf04      	itt	eq
 800716a:	0100      	lsleq	r0, r0, #4
 800716c:	3304      	addeq	r3, #4
 800716e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007172:	bf04      	itt	eq
 8007174:	0080      	lsleq	r0, r0, #2
 8007176:	3302      	addeq	r3, #2
 8007178:	2800      	cmp	r0, #0
 800717a:	db05      	blt.n	8007188 <__hi0bits+0x38>
 800717c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007180:	f103 0301 	add.w	r3, r3, #1
 8007184:	bf08      	it	eq
 8007186:	2320      	moveq	r3, #32
 8007188:	4618      	mov	r0, r3
 800718a:	4770      	bx	lr
 800718c:	2300      	movs	r3, #0
 800718e:	e7e4      	b.n	800715a <__hi0bits+0xa>

08007190 <__lo0bits>:
 8007190:	6803      	ldr	r3, [r0, #0]
 8007192:	f013 0207 	ands.w	r2, r3, #7
 8007196:	d00c      	beq.n	80071b2 <__lo0bits+0x22>
 8007198:	07d9      	lsls	r1, r3, #31
 800719a:	d422      	bmi.n	80071e2 <__lo0bits+0x52>
 800719c:	079a      	lsls	r2, r3, #30
 800719e:	bf49      	itett	mi
 80071a0:	085b      	lsrmi	r3, r3, #1
 80071a2:	089b      	lsrpl	r3, r3, #2
 80071a4:	6003      	strmi	r3, [r0, #0]
 80071a6:	2201      	movmi	r2, #1
 80071a8:	bf5c      	itt	pl
 80071aa:	6003      	strpl	r3, [r0, #0]
 80071ac:	2202      	movpl	r2, #2
 80071ae:	4610      	mov	r0, r2
 80071b0:	4770      	bx	lr
 80071b2:	b299      	uxth	r1, r3
 80071b4:	b909      	cbnz	r1, 80071ba <__lo0bits+0x2a>
 80071b6:	0c1b      	lsrs	r3, r3, #16
 80071b8:	2210      	movs	r2, #16
 80071ba:	b2d9      	uxtb	r1, r3
 80071bc:	b909      	cbnz	r1, 80071c2 <__lo0bits+0x32>
 80071be:	3208      	adds	r2, #8
 80071c0:	0a1b      	lsrs	r3, r3, #8
 80071c2:	0719      	lsls	r1, r3, #28
 80071c4:	bf04      	itt	eq
 80071c6:	091b      	lsreq	r3, r3, #4
 80071c8:	3204      	addeq	r2, #4
 80071ca:	0799      	lsls	r1, r3, #30
 80071cc:	bf04      	itt	eq
 80071ce:	089b      	lsreq	r3, r3, #2
 80071d0:	3202      	addeq	r2, #2
 80071d2:	07d9      	lsls	r1, r3, #31
 80071d4:	d403      	bmi.n	80071de <__lo0bits+0x4e>
 80071d6:	085b      	lsrs	r3, r3, #1
 80071d8:	f102 0201 	add.w	r2, r2, #1
 80071dc:	d003      	beq.n	80071e6 <__lo0bits+0x56>
 80071de:	6003      	str	r3, [r0, #0]
 80071e0:	e7e5      	b.n	80071ae <__lo0bits+0x1e>
 80071e2:	2200      	movs	r2, #0
 80071e4:	e7e3      	b.n	80071ae <__lo0bits+0x1e>
 80071e6:	2220      	movs	r2, #32
 80071e8:	e7e1      	b.n	80071ae <__lo0bits+0x1e>
	...

080071ec <__i2b>:
 80071ec:	b510      	push	{r4, lr}
 80071ee:	460c      	mov	r4, r1
 80071f0:	2101      	movs	r1, #1
 80071f2:	f7ff febb 	bl	8006f6c <_Balloc>
 80071f6:	4602      	mov	r2, r0
 80071f8:	b928      	cbnz	r0, 8007206 <__i2b+0x1a>
 80071fa:	4b05      	ldr	r3, [pc, #20]	; (8007210 <__i2b+0x24>)
 80071fc:	4805      	ldr	r0, [pc, #20]	; (8007214 <__i2b+0x28>)
 80071fe:	f240 1145 	movw	r1, #325	; 0x145
 8007202:	f001 fc51 	bl	8008aa8 <__assert_func>
 8007206:	2301      	movs	r3, #1
 8007208:	6144      	str	r4, [r0, #20]
 800720a:	6103      	str	r3, [r0, #16]
 800720c:	bd10      	pop	{r4, pc}
 800720e:	bf00      	nop
 8007210:	0800b1d5 	.word	0x0800b1d5
 8007214:	0800b1e6 	.word	0x0800b1e6

08007218 <__multiply>:
 8007218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800721c:	4691      	mov	r9, r2
 800721e:	690a      	ldr	r2, [r1, #16]
 8007220:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007224:	429a      	cmp	r2, r3
 8007226:	bfb8      	it	lt
 8007228:	460b      	movlt	r3, r1
 800722a:	460c      	mov	r4, r1
 800722c:	bfbc      	itt	lt
 800722e:	464c      	movlt	r4, r9
 8007230:	4699      	movlt	r9, r3
 8007232:	6927      	ldr	r7, [r4, #16]
 8007234:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007238:	68a3      	ldr	r3, [r4, #8]
 800723a:	6861      	ldr	r1, [r4, #4]
 800723c:	eb07 060a 	add.w	r6, r7, sl
 8007240:	42b3      	cmp	r3, r6
 8007242:	b085      	sub	sp, #20
 8007244:	bfb8      	it	lt
 8007246:	3101      	addlt	r1, #1
 8007248:	f7ff fe90 	bl	8006f6c <_Balloc>
 800724c:	b930      	cbnz	r0, 800725c <__multiply+0x44>
 800724e:	4602      	mov	r2, r0
 8007250:	4b44      	ldr	r3, [pc, #272]	; (8007364 <__multiply+0x14c>)
 8007252:	4845      	ldr	r0, [pc, #276]	; (8007368 <__multiply+0x150>)
 8007254:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007258:	f001 fc26 	bl	8008aa8 <__assert_func>
 800725c:	f100 0514 	add.w	r5, r0, #20
 8007260:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007264:	462b      	mov	r3, r5
 8007266:	2200      	movs	r2, #0
 8007268:	4543      	cmp	r3, r8
 800726a:	d321      	bcc.n	80072b0 <__multiply+0x98>
 800726c:	f104 0314 	add.w	r3, r4, #20
 8007270:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007274:	f109 0314 	add.w	r3, r9, #20
 8007278:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800727c:	9202      	str	r2, [sp, #8]
 800727e:	1b3a      	subs	r2, r7, r4
 8007280:	3a15      	subs	r2, #21
 8007282:	f022 0203 	bic.w	r2, r2, #3
 8007286:	3204      	adds	r2, #4
 8007288:	f104 0115 	add.w	r1, r4, #21
 800728c:	428f      	cmp	r7, r1
 800728e:	bf38      	it	cc
 8007290:	2204      	movcc	r2, #4
 8007292:	9201      	str	r2, [sp, #4]
 8007294:	9a02      	ldr	r2, [sp, #8]
 8007296:	9303      	str	r3, [sp, #12]
 8007298:	429a      	cmp	r2, r3
 800729a:	d80c      	bhi.n	80072b6 <__multiply+0x9e>
 800729c:	2e00      	cmp	r6, #0
 800729e:	dd03      	ble.n	80072a8 <__multiply+0x90>
 80072a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d05b      	beq.n	8007360 <__multiply+0x148>
 80072a8:	6106      	str	r6, [r0, #16]
 80072aa:	b005      	add	sp, #20
 80072ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072b0:	f843 2b04 	str.w	r2, [r3], #4
 80072b4:	e7d8      	b.n	8007268 <__multiply+0x50>
 80072b6:	f8b3 a000 	ldrh.w	sl, [r3]
 80072ba:	f1ba 0f00 	cmp.w	sl, #0
 80072be:	d024      	beq.n	800730a <__multiply+0xf2>
 80072c0:	f104 0e14 	add.w	lr, r4, #20
 80072c4:	46a9      	mov	r9, r5
 80072c6:	f04f 0c00 	mov.w	ip, #0
 80072ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 80072ce:	f8d9 1000 	ldr.w	r1, [r9]
 80072d2:	fa1f fb82 	uxth.w	fp, r2
 80072d6:	b289      	uxth	r1, r1
 80072d8:	fb0a 110b 	mla	r1, sl, fp, r1
 80072dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80072e0:	f8d9 2000 	ldr.w	r2, [r9]
 80072e4:	4461      	add	r1, ip
 80072e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80072ea:	fb0a c20b 	mla	r2, sl, fp, ip
 80072ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80072f2:	b289      	uxth	r1, r1
 80072f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80072f8:	4577      	cmp	r7, lr
 80072fa:	f849 1b04 	str.w	r1, [r9], #4
 80072fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007302:	d8e2      	bhi.n	80072ca <__multiply+0xb2>
 8007304:	9a01      	ldr	r2, [sp, #4]
 8007306:	f845 c002 	str.w	ip, [r5, r2]
 800730a:	9a03      	ldr	r2, [sp, #12]
 800730c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007310:	3304      	adds	r3, #4
 8007312:	f1b9 0f00 	cmp.w	r9, #0
 8007316:	d021      	beq.n	800735c <__multiply+0x144>
 8007318:	6829      	ldr	r1, [r5, #0]
 800731a:	f104 0c14 	add.w	ip, r4, #20
 800731e:	46ae      	mov	lr, r5
 8007320:	f04f 0a00 	mov.w	sl, #0
 8007324:	f8bc b000 	ldrh.w	fp, [ip]
 8007328:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800732c:	fb09 220b 	mla	r2, r9, fp, r2
 8007330:	4452      	add	r2, sl
 8007332:	b289      	uxth	r1, r1
 8007334:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007338:	f84e 1b04 	str.w	r1, [lr], #4
 800733c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007340:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007344:	f8be 1000 	ldrh.w	r1, [lr]
 8007348:	fb09 110a 	mla	r1, r9, sl, r1
 800734c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007350:	4567      	cmp	r7, ip
 8007352:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007356:	d8e5      	bhi.n	8007324 <__multiply+0x10c>
 8007358:	9a01      	ldr	r2, [sp, #4]
 800735a:	50a9      	str	r1, [r5, r2]
 800735c:	3504      	adds	r5, #4
 800735e:	e799      	b.n	8007294 <__multiply+0x7c>
 8007360:	3e01      	subs	r6, #1
 8007362:	e79b      	b.n	800729c <__multiply+0x84>
 8007364:	0800b1d5 	.word	0x0800b1d5
 8007368:	0800b1e6 	.word	0x0800b1e6

0800736c <__pow5mult>:
 800736c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007370:	4615      	mov	r5, r2
 8007372:	f012 0203 	ands.w	r2, r2, #3
 8007376:	4606      	mov	r6, r0
 8007378:	460f      	mov	r7, r1
 800737a:	d007      	beq.n	800738c <__pow5mult+0x20>
 800737c:	4c25      	ldr	r4, [pc, #148]	; (8007414 <__pow5mult+0xa8>)
 800737e:	3a01      	subs	r2, #1
 8007380:	2300      	movs	r3, #0
 8007382:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007386:	f7ff fe53 	bl	8007030 <__multadd>
 800738a:	4607      	mov	r7, r0
 800738c:	10ad      	asrs	r5, r5, #2
 800738e:	d03d      	beq.n	800740c <__pow5mult+0xa0>
 8007390:	69f4      	ldr	r4, [r6, #28]
 8007392:	b97c      	cbnz	r4, 80073b4 <__pow5mult+0x48>
 8007394:	2010      	movs	r0, #16
 8007396:	f7ff fd35 	bl	8006e04 <malloc>
 800739a:	4602      	mov	r2, r0
 800739c:	61f0      	str	r0, [r6, #28]
 800739e:	b928      	cbnz	r0, 80073ac <__pow5mult+0x40>
 80073a0:	4b1d      	ldr	r3, [pc, #116]	; (8007418 <__pow5mult+0xac>)
 80073a2:	481e      	ldr	r0, [pc, #120]	; (800741c <__pow5mult+0xb0>)
 80073a4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80073a8:	f001 fb7e 	bl	8008aa8 <__assert_func>
 80073ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80073b0:	6004      	str	r4, [r0, #0]
 80073b2:	60c4      	str	r4, [r0, #12]
 80073b4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80073b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80073bc:	b94c      	cbnz	r4, 80073d2 <__pow5mult+0x66>
 80073be:	f240 2171 	movw	r1, #625	; 0x271
 80073c2:	4630      	mov	r0, r6
 80073c4:	f7ff ff12 	bl	80071ec <__i2b>
 80073c8:	2300      	movs	r3, #0
 80073ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80073ce:	4604      	mov	r4, r0
 80073d0:	6003      	str	r3, [r0, #0]
 80073d2:	f04f 0900 	mov.w	r9, #0
 80073d6:	07eb      	lsls	r3, r5, #31
 80073d8:	d50a      	bpl.n	80073f0 <__pow5mult+0x84>
 80073da:	4639      	mov	r1, r7
 80073dc:	4622      	mov	r2, r4
 80073de:	4630      	mov	r0, r6
 80073e0:	f7ff ff1a 	bl	8007218 <__multiply>
 80073e4:	4639      	mov	r1, r7
 80073e6:	4680      	mov	r8, r0
 80073e8:	4630      	mov	r0, r6
 80073ea:	f7ff fdff 	bl	8006fec <_Bfree>
 80073ee:	4647      	mov	r7, r8
 80073f0:	106d      	asrs	r5, r5, #1
 80073f2:	d00b      	beq.n	800740c <__pow5mult+0xa0>
 80073f4:	6820      	ldr	r0, [r4, #0]
 80073f6:	b938      	cbnz	r0, 8007408 <__pow5mult+0x9c>
 80073f8:	4622      	mov	r2, r4
 80073fa:	4621      	mov	r1, r4
 80073fc:	4630      	mov	r0, r6
 80073fe:	f7ff ff0b 	bl	8007218 <__multiply>
 8007402:	6020      	str	r0, [r4, #0]
 8007404:	f8c0 9000 	str.w	r9, [r0]
 8007408:	4604      	mov	r4, r0
 800740a:	e7e4      	b.n	80073d6 <__pow5mult+0x6a>
 800740c:	4638      	mov	r0, r7
 800740e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007412:	bf00      	nop
 8007414:	0800b330 	.word	0x0800b330
 8007418:	0800b166 	.word	0x0800b166
 800741c:	0800b1e6 	.word	0x0800b1e6

08007420 <__lshift>:
 8007420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007424:	460c      	mov	r4, r1
 8007426:	6849      	ldr	r1, [r1, #4]
 8007428:	6923      	ldr	r3, [r4, #16]
 800742a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800742e:	68a3      	ldr	r3, [r4, #8]
 8007430:	4607      	mov	r7, r0
 8007432:	4691      	mov	r9, r2
 8007434:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007438:	f108 0601 	add.w	r6, r8, #1
 800743c:	42b3      	cmp	r3, r6
 800743e:	db0b      	blt.n	8007458 <__lshift+0x38>
 8007440:	4638      	mov	r0, r7
 8007442:	f7ff fd93 	bl	8006f6c <_Balloc>
 8007446:	4605      	mov	r5, r0
 8007448:	b948      	cbnz	r0, 800745e <__lshift+0x3e>
 800744a:	4602      	mov	r2, r0
 800744c:	4b28      	ldr	r3, [pc, #160]	; (80074f0 <__lshift+0xd0>)
 800744e:	4829      	ldr	r0, [pc, #164]	; (80074f4 <__lshift+0xd4>)
 8007450:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007454:	f001 fb28 	bl	8008aa8 <__assert_func>
 8007458:	3101      	adds	r1, #1
 800745a:	005b      	lsls	r3, r3, #1
 800745c:	e7ee      	b.n	800743c <__lshift+0x1c>
 800745e:	2300      	movs	r3, #0
 8007460:	f100 0114 	add.w	r1, r0, #20
 8007464:	f100 0210 	add.w	r2, r0, #16
 8007468:	4618      	mov	r0, r3
 800746a:	4553      	cmp	r3, sl
 800746c:	db33      	blt.n	80074d6 <__lshift+0xb6>
 800746e:	6920      	ldr	r0, [r4, #16]
 8007470:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007474:	f104 0314 	add.w	r3, r4, #20
 8007478:	f019 091f 	ands.w	r9, r9, #31
 800747c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007480:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007484:	d02b      	beq.n	80074de <__lshift+0xbe>
 8007486:	f1c9 0e20 	rsb	lr, r9, #32
 800748a:	468a      	mov	sl, r1
 800748c:	2200      	movs	r2, #0
 800748e:	6818      	ldr	r0, [r3, #0]
 8007490:	fa00 f009 	lsl.w	r0, r0, r9
 8007494:	4310      	orrs	r0, r2
 8007496:	f84a 0b04 	str.w	r0, [sl], #4
 800749a:	f853 2b04 	ldr.w	r2, [r3], #4
 800749e:	459c      	cmp	ip, r3
 80074a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80074a4:	d8f3      	bhi.n	800748e <__lshift+0x6e>
 80074a6:	ebac 0304 	sub.w	r3, ip, r4
 80074aa:	3b15      	subs	r3, #21
 80074ac:	f023 0303 	bic.w	r3, r3, #3
 80074b0:	3304      	adds	r3, #4
 80074b2:	f104 0015 	add.w	r0, r4, #21
 80074b6:	4584      	cmp	ip, r0
 80074b8:	bf38      	it	cc
 80074ba:	2304      	movcc	r3, #4
 80074bc:	50ca      	str	r2, [r1, r3]
 80074be:	b10a      	cbz	r2, 80074c4 <__lshift+0xa4>
 80074c0:	f108 0602 	add.w	r6, r8, #2
 80074c4:	3e01      	subs	r6, #1
 80074c6:	4638      	mov	r0, r7
 80074c8:	612e      	str	r6, [r5, #16]
 80074ca:	4621      	mov	r1, r4
 80074cc:	f7ff fd8e 	bl	8006fec <_Bfree>
 80074d0:	4628      	mov	r0, r5
 80074d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80074da:	3301      	adds	r3, #1
 80074dc:	e7c5      	b.n	800746a <__lshift+0x4a>
 80074de:	3904      	subs	r1, #4
 80074e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80074e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80074e8:	459c      	cmp	ip, r3
 80074ea:	d8f9      	bhi.n	80074e0 <__lshift+0xc0>
 80074ec:	e7ea      	b.n	80074c4 <__lshift+0xa4>
 80074ee:	bf00      	nop
 80074f0:	0800b1d5 	.word	0x0800b1d5
 80074f4:	0800b1e6 	.word	0x0800b1e6

080074f8 <__mcmp>:
 80074f8:	b530      	push	{r4, r5, lr}
 80074fa:	6902      	ldr	r2, [r0, #16]
 80074fc:	690c      	ldr	r4, [r1, #16]
 80074fe:	1b12      	subs	r2, r2, r4
 8007500:	d10e      	bne.n	8007520 <__mcmp+0x28>
 8007502:	f100 0314 	add.w	r3, r0, #20
 8007506:	3114      	adds	r1, #20
 8007508:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800750c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007510:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007514:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007518:	42a5      	cmp	r5, r4
 800751a:	d003      	beq.n	8007524 <__mcmp+0x2c>
 800751c:	d305      	bcc.n	800752a <__mcmp+0x32>
 800751e:	2201      	movs	r2, #1
 8007520:	4610      	mov	r0, r2
 8007522:	bd30      	pop	{r4, r5, pc}
 8007524:	4283      	cmp	r3, r0
 8007526:	d3f3      	bcc.n	8007510 <__mcmp+0x18>
 8007528:	e7fa      	b.n	8007520 <__mcmp+0x28>
 800752a:	f04f 32ff 	mov.w	r2, #4294967295
 800752e:	e7f7      	b.n	8007520 <__mcmp+0x28>

08007530 <__mdiff>:
 8007530:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007534:	460c      	mov	r4, r1
 8007536:	4606      	mov	r6, r0
 8007538:	4611      	mov	r1, r2
 800753a:	4620      	mov	r0, r4
 800753c:	4690      	mov	r8, r2
 800753e:	f7ff ffdb 	bl	80074f8 <__mcmp>
 8007542:	1e05      	subs	r5, r0, #0
 8007544:	d110      	bne.n	8007568 <__mdiff+0x38>
 8007546:	4629      	mov	r1, r5
 8007548:	4630      	mov	r0, r6
 800754a:	f7ff fd0f 	bl	8006f6c <_Balloc>
 800754e:	b930      	cbnz	r0, 800755e <__mdiff+0x2e>
 8007550:	4b3a      	ldr	r3, [pc, #232]	; (800763c <__mdiff+0x10c>)
 8007552:	4602      	mov	r2, r0
 8007554:	f240 2137 	movw	r1, #567	; 0x237
 8007558:	4839      	ldr	r0, [pc, #228]	; (8007640 <__mdiff+0x110>)
 800755a:	f001 faa5 	bl	8008aa8 <__assert_func>
 800755e:	2301      	movs	r3, #1
 8007560:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007564:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007568:	bfa4      	itt	ge
 800756a:	4643      	movge	r3, r8
 800756c:	46a0      	movge	r8, r4
 800756e:	4630      	mov	r0, r6
 8007570:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007574:	bfa6      	itte	ge
 8007576:	461c      	movge	r4, r3
 8007578:	2500      	movge	r5, #0
 800757a:	2501      	movlt	r5, #1
 800757c:	f7ff fcf6 	bl	8006f6c <_Balloc>
 8007580:	b920      	cbnz	r0, 800758c <__mdiff+0x5c>
 8007582:	4b2e      	ldr	r3, [pc, #184]	; (800763c <__mdiff+0x10c>)
 8007584:	4602      	mov	r2, r0
 8007586:	f240 2145 	movw	r1, #581	; 0x245
 800758a:	e7e5      	b.n	8007558 <__mdiff+0x28>
 800758c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007590:	6926      	ldr	r6, [r4, #16]
 8007592:	60c5      	str	r5, [r0, #12]
 8007594:	f104 0914 	add.w	r9, r4, #20
 8007598:	f108 0514 	add.w	r5, r8, #20
 800759c:	f100 0e14 	add.w	lr, r0, #20
 80075a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80075a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80075a8:	f108 0210 	add.w	r2, r8, #16
 80075ac:	46f2      	mov	sl, lr
 80075ae:	2100      	movs	r1, #0
 80075b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80075b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80075b8:	fa11 f88b 	uxtah	r8, r1, fp
 80075bc:	b299      	uxth	r1, r3
 80075be:	0c1b      	lsrs	r3, r3, #16
 80075c0:	eba8 0801 	sub.w	r8, r8, r1
 80075c4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80075c8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80075cc:	fa1f f888 	uxth.w	r8, r8
 80075d0:	1419      	asrs	r1, r3, #16
 80075d2:	454e      	cmp	r6, r9
 80075d4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80075d8:	f84a 3b04 	str.w	r3, [sl], #4
 80075dc:	d8e8      	bhi.n	80075b0 <__mdiff+0x80>
 80075de:	1b33      	subs	r3, r6, r4
 80075e0:	3b15      	subs	r3, #21
 80075e2:	f023 0303 	bic.w	r3, r3, #3
 80075e6:	3304      	adds	r3, #4
 80075e8:	3415      	adds	r4, #21
 80075ea:	42a6      	cmp	r6, r4
 80075ec:	bf38      	it	cc
 80075ee:	2304      	movcc	r3, #4
 80075f0:	441d      	add	r5, r3
 80075f2:	4473      	add	r3, lr
 80075f4:	469e      	mov	lr, r3
 80075f6:	462e      	mov	r6, r5
 80075f8:	4566      	cmp	r6, ip
 80075fa:	d30e      	bcc.n	800761a <__mdiff+0xea>
 80075fc:	f10c 0203 	add.w	r2, ip, #3
 8007600:	1b52      	subs	r2, r2, r5
 8007602:	f022 0203 	bic.w	r2, r2, #3
 8007606:	3d03      	subs	r5, #3
 8007608:	45ac      	cmp	ip, r5
 800760a:	bf38      	it	cc
 800760c:	2200      	movcc	r2, #0
 800760e:	4413      	add	r3, r2
 8007610:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007614:	b17a      	cbz	r2, 8007636 <__mdiff+0x106>
 8007616:	6107      	str	r7, [r0, #16]
 8007618:	e7a4      	b.n	8007564 <__mdiff+0x34>
 800761a:	f856 8b04 	ldr.w	r8, [r6], #4
 800761e:	fa11 f288 	uxtah	r2, r1, r8
 8007622:	1414      	asrs	r4, r2, #16
 8007624:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007628:	b292      	uxth	r2, r2
 800762a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800762e:	f84e 2b04 	str.w	r2, [lr], #4
 8007632:	1421      	asrs	r1, r4, #16
 8007634:	e7e0      	b.n	80075f8 <__mdiff+0xc8>
 8007636:	3f01      	subs	r7, #1
 8007638:	e7ea      	b.n	8007610 <__mdiff+0xe0>
 800763a:	bf00      	nop
 800763c:	0800b1d5 	.word	0x0800b1d5
 8007640:	0800b1e6 	.word	0x0800b1e6

08007644 <__ulp>:
 8007644:	b082      	sub	sp, #8
 8007646:	ed8d 0b00 	vstr	d0, [sp]
 800764a:	9a01      	ldr	r2, [sp, #4]
 800764c:	4b0f      	ldr	r3, [pc, #60]	; (800768c <__ulp+0x48>)
 800764e:	4013      	ands	r3, r2
 8007650:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007654:	2b00      	cmp	r3, #0
 8007656:	dc08      	bgt.n	800766a <__ulp+0x26>
 8007658:	425b      	negs	r3, r3
 800765a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800765e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007662:	da04      	bge.n	800766e <__ulp+0x2a>
 8007664:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007668:	4113      	asrs	r3, r2
 800766a:	2200      	movs	r2, #0
 800766c:	e008      	b.n	8007680 <__ulp+0x3c>
 800766e:	f1a2 0314 	sub.w	r3, r2, #20
 8007672:	2b1e      	cmp	r3, #30
 8007674:	bfda      	itte	le
 8007676:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800767a:	40da      	lsrle	r2, r3
 800767c:	2201      	movgt	r2, #1
 800767e:	2300      	movs	r3, #0
 8007680:	4619      	mov	r1, r3
 8007682:	4610      	mov	r0, r2
 8007684:	ec41 0b10 	vmov	d0, r0, r1
 8007688:	b002      	add	sp, #8
 800768a:	4770      	bx	lr
 800768c:	7ff00000 	.word	0x7ff00000

08007690 <__b2d>:
 8007690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007694:	6906      	ldr	r6, [r0, #16]
 8007696:	f100 0814 	add.w	r8, r0, #20
 800769a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800769e:	1f37      	subs	r7, r6, #4
 80076a0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80076a4:	4610      	mov	r0, r2
 80076a6:	f7ff fd53 	bl	8007150 <__hi0bits>
 80076aa:	f1c0 0320 	rsb	r3, r0, #32
 80076ae:	280a      	cmp	r0, #10
 80076b0:	600b      	str	r3, [r1, #0]
 80076b2:	491b      	ldr	r1, [pc, #108]	; (8007720 <__b2d+0x90>)
 80076b4:	dc15      	bgt.n	80076e2 <__b2d+0x52>
 80076b6:	f1c0 0c0b 	rsb	ip, r0, #11
 80076ba:	fa22 f30c 	lsr.w	r3, r2, ip
 80076be:	45b8      	cmp	r8, r7
 80076c0:	ea43 0501 	orr.w	r5, r3, r1
 80076c4:	bf34      	ite	cc
 80076c6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80076ca:	2300      	movcs	r3, #0
 80076cc:	3015      	adds	r0, #21
 80076ce:	fa02 f000 	lsl.w	r0, r2, r0
 80076d2:	fa23 f30c 	lsr.w	r3, r3, ip
 80076d6:	4303      	orrs	r3, r0
 80076d8:	461c      	mov	r4, r3
 80076da:	ec45 4b10 	vmov	d0, r4, r5
 80076de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076e2:	45b8      	cmp	r8, r7
 80076e4:	bf3a      	itte	cc
 80076e6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80076ea:	f1a6 0708 	subcc.w	r7, r6, #8
 80076ee:	2300      	movcs	r3, #0
 80076f0:	380b      	subs	r0, #11
 80076f2:	d012      	beq.n	800771a <__b2d+0x8a>
 80076f4:	f1c0 0120 	rsb	r1, r0, #32
 80076f8:	fa23 f401 	lsr.w	r4, r3, r1
 80076fc:	4082      	lsls	r2, r0
 80076fe:	4322      	orrs	r2, r4
 8007700:	4547      	cmp	r7, r8
 8007702:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8007706:	bf8c      	ite	hi
 8007708:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800770c:	2200      	movls	r2, #0
 800770e:	4083      	lsls	r3, r0
 8007710:	40ca      	lsrs	r2, r1
 8007712:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007716:	4313      	orrs	r3, r2
 8007718:	e7de      	b.n	80076d8 <__b2d+0x48>
 800771a:	ea42 0501 	orr.w	r5, r2, r1
 800771e:	e7db      	b.n	80076d8 <__b2d+0x48>
 8007720:	3ff00000 	.word	0x3ff00000

08007724 <__d2b>:
 8007724:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007728:	460f      	mov	r7, r1
 800772a:	2101      	movs	r1, #1
 800772c:	ec59 8b10 	vmov	r8, r9, d0
 8007730:	4616      	mov	r6, r2
 8007732:	f7ff fc1b 	bl	8006f6c <_Balloc>
 8007736:	4604      	mov	r4, r0
 8007738:	b930      	cbnz	r0, 8007748 <__d2b+0x24>
 800773a:	4602      	mov	r2, r0
 800773c:	4b24      	ldr	r3, [pc, #144]	; (80077d0 <__d2b+0xac>)
 800773e:	4825      	ldr	r0, [pc, #148]	; (80077d4 <__d2b+0xb0>)
 8007740:	f240 310f 	movw	r1, #783	; 0x30f
 8007744:	f001 f9b0 	bl	8008aa8 <__assert_func>
 8007748:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800774c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007750:	bb2d      	cbnz	r5, 800779e <__d2b+0x7a>
 8007752:	9301      	str	r3, [sp, #4]
 8007754:	f1b8 0300 	subs.w	r3, r8, #0
 8007758:	d026      	beq.n	80077a8 <__d2b+0x84>
 800775a:	4668      	mov	r0, sp
 800775c:	9300      	str	r3, [sp, #0]
 800775e:	f7ff fd17 	bl	8007190 <__lo0bits>
 8007762:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007766:	b1e8      	cbz	r0, 80077a4 <__d2b+0x80>
 8007768:	f1c0 0320 	rsb	r3, r0, #32
 800776c:	fa02 f303 	lsl.w	r3, r2, r3
 8007770:	430b      	orrs	r3, r1
 8007772:	40c2      	lsrs	r2, r0
 8007774:	6163      	str	r3, [r4, #20]
 8007776:	9201      	str	r2, [sp, #4]
 8007778:	9b01      	ldr	r3, [sp, #4]
 800777a:	61a3      	str	r3, [r4, #24]
 800777c:	2b00      	cmp	r3, #0
 800777e:	bf14      	ite	ne
 8007780:	2202      	movne	r2, #2
 8007782:	2201      	moveq	r2, #1
 8007784:	6122      	str	r2, [r4, #16]
 8007786:	b1bd      	cbz	r5, 80077b8 <__d2b+0x94>
 8007788:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800778c:	4405      	add	r5, r0
 800778e:	603d      	str	r5, [r7, #0]
 8007790:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007794:	6030      	str	r0, [r6, #0]
 8007796:	4620      	mov	r0, r4
 8007798:	b003      	add	sp, #12
 800779a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800779e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077a2:	e7d6      	b.n	8007752 <__d2b+0x2e>
 80077a4:	6161      	str	r1, [r4, #20]
 80077a6:	e7e7      	b.n	8007778 <__d2b+0x54>
 80077a8:	a801      	add	r0, sp, #4
 80077aa:	f7ff fcf1 	bl	8007190 <__lo0bits>
 80077ae:	9b01      	ldr	r3, [sp, #4]
 80077b0:	6163      	str	r3, [r4, #20]
 80077b2:	3020      	adds	r0, #32
 80077b4:	2201      	movs	r2, #1
 80077b6:	e7e5      	b.n	8007784 <__d2b+0x60>
 80077b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80077bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80077c0:	6038      	str	r0, [r7, #0]
 80077c2:	6918      	ldr	r0, [r3, #16]
 80077c4:	f7ff fcc4 	bl	8007150 <__hi0bits>
 80077c8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80077cc:	e7e2      	b.n	8007794 <__d2b+0x70>
 80077ce:	bf00      	nop
 80077d0:	0800b1d5 	.word	0x0800b1d5
 80077d4:	0800b1e6 	.word	0x0800b1e6

080077d8 <__ratio>:
 80077d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077dc:	4688      	mov	r8, r1
 80077de:	4669      	mov	r1, sp
 80077e0:	4681      	mov	r9, r0
 80077e2:	f7ff ff55 	bl	8007690 <__b2d>
 80077e6:	a901      	add	r1, sp, #4
 80077e8:	4640      	mov	r0, r8
 80077ea:	ec55 4b10 	vmov	r4, r5, d0
 80077ee:	f7ff ff4f 	bl	8007690 <__b2d>
 80077f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80077f6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80077fa:	eba3 0c02 	sub.w	ip, r3, r2
 80077fe:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007802:	1a9b      	subs	r3, r3, r2
 8007804:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007808:	ec51 0b10 	vmov	r0, r1, d0
 800780c:	2b00      	cmp	r3, #0
 800780e:	bfd6      	itet	le
 8007810:	460a      	movle	r2, r1
 8007812:	462a      	movgt	r2, r5
 8007814:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007818:	468b      	mov	fp, r1
 800781a:	462f      	mov	r7, r5
 800781c:	bfd4      	ite	le
 800781e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007822:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007826:	4620      	mov	r0, r4
 8007828:	ee10 2a10 	vmov	r2, s0
 800782c:	465b      	mov	r3, fp
 800782e:	4639      	mov	r1, r7
 8007830:	f7f9 f814 	bl	800085c <__aeabi_ddiv>
 8007834:	ec41 0b10 	vmov	d0, r0, r1
 8007838:	b003      	add	sp, #12
 800783a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800783e <__copybits>:
 800783e:	3901      	subs	r1, #1
 8007840:	b570      	push	{r4, r5, r6, lr}
 8007842:	1149      	asrs	r1, r1, #5
 8007844:	6914      	ldr	r4, [r2, #16]
 8007846:	3101      	adds	r1, #1
 8007848:	f102 0314 	add.w	r3, r2, #20
 800784c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007850:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007854:	1f05      	subs	r5, r0, #4
 8007856:	42a3      	cmp	r3, r4
 8007858:	d30c      	bcc.n	8007874 <__copybits+0x36>
 800785a:	1aa3      	subs	r3, r4, r2
 800785c:	3b11      	subs	r3, #17
 800785e:	f023 0303 	bic.w	r3, r3, #3
 8007862:	3211      	adds	r2, #17
 8007864:	42a2      	cmp	r2, r4
 8007866:	bf88      	it	hi
 8007868:	2300      	movhi	r3, #0
 800786a:	4418      	add	r0, r3
 800786c:	2300      	movs	r3, #0
 800786e:	4288      	cmp	r0, r1
 8007870:	d305      	bcc.n	800787e <__copybits+0x40>
 8007872:	bd70      	pop	{r4, r5, r6, pc}
 8007874:	f853 6b04 	ldr.w	r6, [r3], #4
 8007878:	f845 6f04 	str.w	r6, [r5, #4]!
 800787c:	e7eb      	b.n	8007856 <__copybits+0x18>
 800787e:	f840 3b04 	str.w	r3, [r0], #4
 8007882:	e7f4      	b.n	800786e <__copybits+0x30>

08007884 <__any_on>:
 8007884:	f100 0214 	add.w	r2, r0, #20
 8007888:	6900      	ldr	r0, [r0, #16]
 800788a:	114b      	asrs	r3, r1, #5
 800788c:	4298      	cmp	r0, r3
 800788e:	b510      	push	{r4, lr}
 8007890:	db11      	blt.n	80078b6 <__any_on+0x32>
 8007892:	dd0a      	ble.n	80078aa <__any_on+0x26>
 8007894:	f011 011f 	ands.w	r1, r1, #31
 8007898:	d007      	beq.n	80078aa <__any_on+0x26>
 800789a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800789e:	fa24 f001 	lsr.w	r0, r4, r1
 80078a2:	fa00 f101 	lsl.w	r1, r0, r1
 80078a6:	428c      	cmp	r4, r1
 80078a8:	d10b      	bne.n	80078c2 <__any_on+0x3e>
 80078aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d803      	bhi.n	80078ba <__any_on+0x36>
 80078b2:	2000      	movs	r0, #0
 80078b4:	bd10      	pop	{r4, pc}
 80078b6:	4603      	mov	r3, r0
 80078b8:	e7f7      	b.n	80078aa <__any_on+0x26>
 80078ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80078be:	2900      	cmp	r1, #0
 80078c0:	d0f5      	beq.n	80078ae <__any_on+0x2a>
 80078c2:	2001      	movs	r0, #1
 80078c4:	e7f6      	b.n	80078b4 <__any_on+0x30>

080078c6 <sulp>:
 80078c6:	b570      	push	{r4, r5, r6, lr}
 80078c8:	4604      	mov	r4, r0
 80078ca:	460d      	mov	r5, r1
 80078cc:	ec45 4b10 	vmov	d0, r4, r5
 80078d0:	4616      	mov	r6, r2
 80078d2:	f7ff feb7 	bl	8007644 <__ulp>
 80078d6:	ec51 0b10 	vmov	r0, r1, d0
 80078da:	b17e      	cbz	r6, 80078fc <sulp+0x36>
 80078dc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80078e0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	dd09      	ble.n	80078fc <sulp+0x36>
 80078e8:	051b      	lsls	r3, r3, #20
 80078ea:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80078ee:	2400      	movs	r4, #0
 80078f0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80078f4:	4622      	mov	r2, r4
 80078f6:	462b      	mov	r3, r5
 80078f8:	f7f8 fe86 	bl	8000608 <__aeabi_dmul>
 80078fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08007900 <_strtod_l>:
 8007900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007904:	ed2d 8b02 	vpush	{d8}
 8007908:	b09b      	sub	sp, #108	; 0x6c
 800790a:	4604      	mov	r4, r0
 800790c:	9213      	str	r2, [sp, #76]	; 0x4c
 800790e:	2200      	movs	r2, #0
 8007910:	9216      	str	r2, [sp, #88]	; 0x58
 8007912:	460d      	mov	r5, r1
 8007914:	f04f 0800 	mov.w	r8, #0
 8007918:	f04f 0900 	mov.w	r9, #0
 800791c:	460a      	mov	r2, r1
 800791e:	9215      	str	r2, [sp, #84]	; 0x54
 8007920:	7811      	ldrb	r1, [r2, #0]
 8007922:	292b      	cmp	r1, #43	; 0x2b
 8007924:	d04c      	beq.n	80079c0 <_strtod_l+0xc0>
 8007926:	d83a      	bhi.n	800799e <_strtod_l+0x9e>
 8007928:	290d      	cmp	r1, #13
 800792a:	d834      	bhi.n	8007996 <_strtod_l+0x96>
 800792c:	2908      	cmp	r1, #8
 800792e:	d834      	bhi.n	800799a <_strtod_l+0x9a>
 8007930:	2900      	cmp	r1, #0
 8007932:	d03d      	beq.n	80079b0 <_strtod_l+0xb0>
 8007934:	2200      	movs	r2, #0
 8007936:	920a      	str	r2, [sp, #40]	; 0x28
 8007938:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800793a:	7832      	ldrb	r2, [r6, #0]
 800793c:	2a30      	cmp	r2, #48	; 0x30
 800793e:	f040 80b4 	bne.w	8007aaa <_strtod_l+0x1aa>
 8007942:	7872      	ldrb	r2, [r6, #1]
 8007944:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007948:	2a58      	cmp	r2, #88	; 0x58
 800794a:	d170      	bne.n	8007a2e <_strtod_l+0x12e>
 800794c:	9302      	str	r3, [sp, #8]
 800794e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007950:	9301      	str	r3, [sp, #4]
 8007952:	ab16      	add	r3, sp, #88	; 0x58
 8007954:	9300      	str	r3, [sp, #0]
 8007956:	4a8e      	ldr	r2, [pc, #568]	; (8007b90 <_strtod_l+0x290>)
 8007958:	ab17      	add	r3, sp, #92	; 0x5c
 800795a:	a915      	add	r1, sp, #84	; 0x54
 800795c:	4620      	mov	r0, r4
 800795e:	f001 f93f 	bl	8008be0 <__gethex>
 8007962:	f010 070f 	ands.w	r7, r0, #15
 8007966:	4605      	mov	r5, r0
 8007968:	d005      	beq.n	8007976 <_strtod_l+0x76>
 800796a:	2f06      	cmp	r7, #6
 800796c:	d12a      	bne.n	80079c4 <_strtod_l+0xc4>
 800796e:	3601      	adds	r6, #1
 8007970:	2300      	movs	r3, #0
 8007972:	9615      	str	r6, [sp, #84]	; 0x54
 8007974:	930a      	str	r3, [sp, #40]	; 0x28
 8007976:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007978:	2b00      	cmp	r3, #0
 800797a:	f040 857f 	bne.w	800847c <_strtod_l+0xb7c>
 800797e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007980:	b1db      	cbz	r3, 80079ba <_strtod_l+0xba>
 8007982:	4642      	mov	r2, r8
 8007984:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007988:	ec43 2b10 	vmov	d0, r2, r3
 800798c:	b01b      	add	sp, #108	; 0x6c
 800798e:	ecbd 8b02 	vpop	{d8}
 8007992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007996:	2920      	cmp	r1, #32
 8007998:	d1cc      	bne.n	8007934 <_strtod_l+0x34>
 800799a:	3201      	adds	r2, #1
 800799c:	e7bf      	b.n	800791e <_strtod_l+0x1e>
 800799e:	292d      	cmp	r1, #45	; 0x2d
 80079a0:	d1c8      	bne.n	8007934 <_strtod_l+0x34>
 80079a2:	2101      	movs	r1, #1
 80079a4:	910a      	str	r1, [sp, #40]	; 0x28
 80079a6:	1c51      	adds	r1, r2, #1
 80079a8:	9115      	str	r1, [sp, #84]	; 0x54
 80079aa:	7852      	ldrb	r2, [r2, #1]
 80079ac:	2a00      	cmp	r2, #0
 80079ae:	d1c3      	bne.n	8007938 <_strtod_l+0x38>
 80079b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80079b2:	9515      	str	r5, [sp, #84]	; 0x54
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	f040 855f 	bne.w	8008478 <_strtod_l+0xb78>
 80079ba:	4642      	mov	r2, r8
 80079bc:	464b      	mov	r3, r9
 80079be:	e7e3      	b.n	8007988 <_strtod_l+0x88>
 80079c0:	2100      	movs	r1, #0
 80079c2:	e7ef      	b.n	80079a4 <_strtod_l+0xa4>
 80079c4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80079c6:	b13a      	cbz	r2, 80079d8 <_strtod_l+0xd8>
 80079c8:	2135      	movs	r1, #53	; 0x35
 80079ca:	a818      	add	r0, sp, #96	; 0x60
 80079cc:	f7ff ff37 	bl	800783e <__copybits>
 80079d0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80079d2:	4620      	mov	r0, r4
 80079d4:	f7ff fb0a 	bl	8006fec <_Bfree>
 80079d8:	3f01      	subs	r7, #1
 80079da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80079dc:	2f04      	cmp	r7, #4
 80079de:	d806      	bhi.n	80079ee <_strtod_l+0xee>
 80079e0:	e8df f007 	tbb	[pc, r7]
 80079e4:	201d0314 	.word	0x201d0314
 80079e8:	14          	.byte	0x14
 80079e9:	00          	.byte	0x00
 80079ea:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80079ee:	05e9      	lsls	r1, r5, #23
 80079f0:	bf48      	it	mi
 80079f2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80079f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80079fa:	0d1b      	lsrs	r3, r3, #20
 80079fc:	051b      	lsls	r3, r3, #20
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1b9      	bne.n	8007976 <_strtod_l+0x76>
 8007a02:	f7fe fb05 	bl	8006010 <__errno>
 8007a06:	2322      	movs	r3, #34	; 0x22
 8007a08:	6003      	str	r3, [r0, #0]
 8007a0a:	e7b4      	b.n	8007976 <_strtod_l+0x76>
 8007a0c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007a10:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007a14:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007a18:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007a1c:	e7e7      	b.n	80079ee <_strtod_l+0xee>
 8007a1e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007b98 <_strtod_l+0x298>
 8007a22:	e7e4      	b.n	80079ee <_strtod_l+0xee>
 8007a24:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007a28:	f04f 38ff 	mov.w	r8, #4294967295
 8007a2c:	e7df      	b.n	80079ee <_strtod_l+0xee>
 8007a2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a30:	1c5a      	adds	r2, r3, #1
 8007a32:	9215      	str	r2, [sp, #84]	; 0x54
 8007a34:	785b      	ldrb	r3, [r3, #1]
 8007a36:	2b30      	cmp	r3, #48	; 0x30
 8007a38:	d0f9      	beq.n	8007a2e <_strtod_l+0x12e>
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d09b      	beq.n	8007976 <_strtod_l+0x76>
 8007a3e:	2301      	movs	r3, #1
 8007a40:	f04f 0a00 	mov.w	sl, #0
 8007a44:	9304      	str	r3, [sp, #16]
 8007a46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a48:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a4a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007a4e:	46d3      	mov	fp, sl
 8007a50:	220a      	movs	r2, #10
 8007a52:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007a54:	7806      	ldrb	r6, [r0, #0]
 8007a56:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007a5a:	b2d9      	uxtb	r1, r3
 8007a5c:	2909      	cmp	r1, #9
 8007a5e:	d926      	bls.n	8007aae <_strtod_l+0x1ae>
 8007a60:	494c      	ldr	r1, [pc, #304]	; (8007b94 <_strtod_l+0x294>)
 8007a62:	2201      	movs	r2, #1
 8007a64:	f000 ffe6 	bl	8008a34 <strncmp>
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	d030      	beq.n	8007ace <_strtod_l+0x1ce>
 8007a6c:	2000      	movs	r0, #0
 8007a6e:	4632      	mov	r2, r6
 8007a70:	9005      	str	r0, [sp, #20]
 8007a72:	465e      	mov	r6, fp
 8007a74:	4603      	mov	r3, r0
 8007a76:	2a65      	cmp	r2, #101	; 0x65
 8007a78:	d001      	beq.n	8007a7e <_strtod_l+0x17e>
 8007a7a:	2a45      	cmp	r2, #69	; 0x45
 8007a7c:	d113      	bne.n	8007aa6 <_strtod_l+0x1a6>
 8007a7e:	b91e      	cbnz	r6, 8007a88 <_strtod_l+0x188>
 8007a80:	9a04      	ldr	r2, [sp, #16]
 8007a82:	4302      	orrs	r2, r0
 8007a84:	d094      	beq.n	80079b0 <_strtod_l+0xb0>
 8007a86:	2600      	movs	r6, #0
 8007a88:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007a8a:	1c6a      	adds	r2, r5, #1
 8007a8c:	9215      	str	r2, [sp, #84]	; 0x54
 8007a8e:	786a      	ldrb	r2, [r5, #1]
 8007a90:	2a2b      	cmp	r2, #43	; 0x2b
 8007a92:	d074      	beq.n	8007b7e <_strtod_l+0x27e>
 8007a94:	2a2d      	cmp	r2, #45	; 0x2d
 8007a96:	d078      	beq.n	8007b8a <_strtod_l+0x28a>
 8007a98:	f04f 0c00 	mov.w	ip, #0
 8007a9c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007aa0:	2909      	cmp	r1, #9
 8007aa2:	d97f      	bls.n	8007ba4 <_strtod_l+0x2a4>
 8007aa4:	9515      	str	r5, [sp, #84]	; 0x54
 8007aa6:	2700      	movs	r7, #0
 8007aa8:	e09e      	b.n	8007be8 <_strtod_l+0x2e8>
 8007aaa:	2300      	movs	r3, #0
 8007aac:	e7c8      	b.n	8007a40 <_strtod_l+0x140>
 8007aae:	f1bb 0f08 	cmp.w	fp, #8
 8007ab2:	bfd8      	it	le
 8007ab4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007ab6:	f100 0001 	add.w	r0, r0, #1
 8007aba:	bfda      	itte	le
 8007abc:	fb02 3301 	mlale	r3, r2, r1, r3
 8007ac0:	9309      	strle	r3, [sp, #36]	; 0x24
 8007ac2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007ac6:	f10b 0b01 	add.w	fp, fp, #1
 8007aca:	9015      	str	r0, [sp, #84]	; 0x54
 8007acc:	e7c1      	b.n	8007a52 <_strtod_l+0x152>
 8007ace:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ad0:	1c5a      	adds	r2, r3, #1
 8007ad2:	9215      	str	r2, [sp, #84]	; 0x54
 8007ad4:	785a      	ldrb	r2, [r3, #1]
 8007ad6:	f1bb 0f00 	cmp.w	fp, #0
 8007ada:	d037      	beq.n	8007b4c <_strtod_l+0x24c>
 8007adc:	9005      	str	r0, [sp, #20]
 8007ade:	465e      	mov	r6, fp
 8007ae0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007ae4:	2b09      	cmp	r3, #9
 8007ae6:	d912      	bls.n	8007b0e <_strtod_l+0x20e>
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e7c4      	b.n	8007a76 <_strtod_l+0x176>
 8007aec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007aee:	1c5a      	adds	r2, r3, #1
 8007af0:	9215      	str	r2, [sp, #84]	; 0x54
 8007af2:	785a      	ldrb	r2, [r3, #1]
 8007af4:	3001      	adds	r0, #1
 8007af6:	2a30      	cmp	r2, #48	; 0x30
 8007af8:	d0f8      	beq.n	8007aec <_strtod_l+0x1ec>
 8007afa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007afe:	2b08      	cmp	r3, #8
 8007b00:	f200 84c1 	bhi.w	8008486 <_strtod_l+0xb86>
 8007b04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b06:	9005      	str	r0, [sp, #20]
 8007b08:	2000      	movs	r0, #0
 8007b0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b0c:	4606      	mov	r6, r0
 8007b0e:	3a30      	subs	r2, #48	; 0x30
 8007b10:	f100 0301 	add.w	r3, r0, #1
 8007b14:	d014      	beq.n	8007b40 <_strtod_l+0x240>
 8007b16:	9905      	ldr	r1, [sp, #20]
 8007b18:	4419      	add	r1, r3
 8007b1a:	9105      	str	r1, [sp, #20]
 8007b1c:	4633      	mov	r3, r6
 8007b1e:	eb00 0c06 	add.w	ip, r0, r6
 8007b22:	210a      	movs	r1, #10
 8007b24:	4563      	cmp	r3, ip
 8007b26:	d113      	bne.n	8007b50 <_strtod_l+0x250>
 8007b28:	1833      	adds	r3, r6, r0
 8007b2a:	2b08      	cmp	r3, #8
 8007b2c:	f106 0601 	add.w	r6, r6, #1
 8007b30:	4406      	add	r6, r0
 8007b32:	dc1a      	bgt.n	8007b6a <_strtod_l+0x26a>
 8007b34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b36:	230a      	movs	r3, #10
 8007b38:	fb03 2301 	mla	r3, r3, r1, r2
 8007b3c:	9309      	str	r3, [sp, #36]	; 0x24
 8007b3e:	2300      	movs	r3, #0
 8007b40:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007b42:	1c51      	adds	r1, r2, #1
 8007b44:	9115      	str	r1, [sp, #84]	; 0x54
 8007b46:	7852      	ldrb	r2, [r2, #1]
 8007b48:	4618      	mov	r0, r3
 8007b4a:	e7c9      	b.n	8007ae0 <_strtod_l+0x1e0>
 8007b4c:	4658      	mov	r0, fp
 8007b4e:	e7d2      	b.n	8007af6 <_strtod_l+0x1f6>
 8007b50:	2b08      	cmp	r3, #8
 8007b52:	f103 0301 	add.w	r3, r3, #1
 8007b56:	dc03      	bgt.n	8007b60 <_strtod_l+0x260>
 8007b58:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007b5a:	434f      	muls	r7, r1
 8007b5c:	9709      	str	r7, [sp, #36]	; 0x24
 8007b5e:	e7e1      	b.n	8007b24 <_strtod_l+0x224>
 8007b60:	2b10      	cmp	r3, #16
 8007b62:	bfd8      	it	le
 8007b64:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007b68:	e7dc      	b.n	8007b24 <_strtod_l+0x224>
 8007b6a:	2e10      	cmp	r6, #16
 8007b6c:	bfdc      	itt	le
 8007b6e:	230a      	movle	r3, #10
 8007b70:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007b74:	e7e3      	b.n	8007b3e <_strtod_l+0x23e>
 8007b76:	2300      	movs	r3, #0
 8007b78:	9305      	str	r3, [sp, #20]
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e780      	b.n	8007a80 <_strtod_l+0x180>
 8007b7e:	f04f 0c00 	mov.w	ip, #0
 8007b82:	1caa      	adds	r2, r5, #2
 8007b84:	9215      	str	r2, [sp, #84]	; 0x54
 8007b86:	78aa      	ldrb	r2, [r5, #2]
 8007b88:	e788      	b.n	8007a9c <_strtod_l+0x19c>
 8007b8a:	f04f 0c01 	mov.w	ip, #1
 8007b8e:	e7f8      	b.n	8007b82 <_strtod_l+0x282>
 8007b90:	0800b340 	.word	0x0800b340
 8007b94:	0800b33c 	.word	0x0800b33c
 8007b98:	7ff00000 	.word	0x7ff00000
 8007b9c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007b9e:	1c51      	adds	r1, r2, #1
 8007ba0:	9115      	str	r1, [sp, #84]	; 0x54
 8007ba2:	7852      	ldrb	r2, [r2, #1]
 8007ba4:	2a30      	cmp	r2, #48	; 0x30
 8007ba6:	d0f9      	beq.n	8007b9c <_strtod_l+0x29c>
 8007ba8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007bac:	2908      	cmp	r1, #8
 8007bae:	f63f af7a 	bhi.w	8007aa6 <_strtod_l+0x1a6>
 8007bb2:	3a30      	subs	r2, #48	; 0x30
 8007bb4:	9208      	str	r2, [sp, #32]
 8007bb6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007bb8:	920c      	str	r2, [sp, #48]	; 0x30
 8007bba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007bbc:	1c57      	adds	r7, r2, #1
 8007bbe:	9715      	str	r7, [sp, #84]	; 0x54
 8007bc0:	7852      	ldrb	r2, [r2, #1]
 8007bc2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007bc6:	f1be 0f09 	cmp.w	lr, #9
 8007bca:	d938      	bls.n	8007c3e <_strtod_l+0x33e>
 8007bcc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007bce:	1a7f      	subs	r7, r7, r1
 8007bd0:	2f08      	cmp	r7, #8
 8007bd2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007bd6:	dc03      	bgt.n	8007be0 <_strtod_l+0x2e0>
 8007bd8:	9908      	ldr	r1, [sp, #32]
 8007bda:	428f      	cmp	r7, r1
 8007bdc:	bfa8      	it	ge
 8007bde:	460f      	movge	r7, r1
 8007be0:	f1bc 0f00 	cmp.w	ip, #0
 8007be4:	d000      	beq.n	8007be8 <_strtod_l+0x2e8>
 8007be6:	427f      	negs	r7, r7
 8007be8:	2e00      	cmp	r6, #0
 8007bea:	d14f      	bne.n	8007c8c <_strtod_l+0x38c>
 8007bec:	9904      	ldr	r1, [sp, #16]
 8007bee:	4301      	orrs	r1, r0
 8007bf0:	f47f aec1 	bne.w	8007976 <_strtod_l+0x76>
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	f47f aedb 	bne.w	80079b0 <_strtod_l+0xb0>
 8007bfa:	2a69      	cmp	r2, #105	; 0x69
 8007bfc:	d029      	beq.n	8007c52 <_strtod_l+0x352>
 8007bfe:	dc26      	bgt.n	8007c4e <_strtod_l+0x34e>
 8007c00:	2a49      	cmp	r2, #73	; 0x49
 8007c02:	d026      	beq.n	8007c52 <_strtod_l+0x352>
 8007c04:	2a4e      	cmp	r2, #78	; 0x4e
 8007c06:	f47f aed3 	bne.w	80079b0 <_strtod_l+0xb0>
 8007c0a:	499b      	ldr	r1, [pc, #620]	; (8007e78 <_strtod_l+0x578>)
 8007c0c:	a815      	add	r0, sp, #84	; 0x54
 8007c0e:	f001 fa27 	bl	8009060 <__match>
 8007c12:	2800      	cmp	r0, #0
 8007c14:	f43f aecc 	beq.w	80079b0 <_strtod_l+0xb0>
 8007c18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	2b28      	cmp	r3, #40	; 0x28
 8007c1e:	d12f      	bne.n	8007c80 <_strtod_l+0x380>
 8007c20:	4996      	ldr	r1, [pc, #600]	; (8007e7c <_strtod_l+0x57c>)
 8007c22:	aa18      	add	r2, sp, #96	; 0x60
 8007c24:	a815      	add	r0, sp, #84	; 0x54
 8007c26:	f001 fa2f 	bl	8009088 <__hexnan>
 8007c2a:	2805      	cmp	r0, #5
 8007c2c:	d128      	bne.n	8007c80 <_strtod_l+0x380>
 8007c2e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c30:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007c34:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007c38:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007c3c:	e69b      	b.n	8007976 <_strtod_l+0x76>
 8007c3e:	9f08      	ldr	r7, [sp, #32]
 8007c40:	210a      	movs	r1, #10
 8007c42:	fb01 2107 	mla	r1, r1, r7, r2
 8007c46:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007c4a:	9208      	str	r2, [sp, #32]
 8007c4c:	e7b5      	b.n	8007bba <_strtod_l+0x2ba>
 8007c4e:	2a6e      	cmp	r2, #110	; 0x6e
 8007c50:	e7d9      	b.n	8007c06 <_strtod_l+0x306>
 8007c52:	498b      	ldr	r1, [pc, #556]	; (8007e80 <_strtod_l+0x580>)
 8007c54:	a815      	add	r0, sp, #84	; 0x54
 8007c56:	f001 fa03 	bl	8009060 <__match>
 8007c5a:	2800      	cmp	r0, #0
 8007c5c:	f43f aea8 	beq.w	80079b0 <_strtod_l+0xb0>
 8007c60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c62:	4988      	ldr	r1, [pc, #544]	; (8007e84 <_strtod_l+0x584>)
 8007c64:	3b01      	subs	r3, #1
 8007c66:	a815      	add	r0, sp, #84	; 0x54
 8007c68:	9315      	str	r3, [sp, #84]	; 0x54
 8007c6a:	f001 f9f9 	bl	8009060 <__match>
 8007c6e:	b910      	cbnz	r0, 8007c76 <_strtod_l+0x376>
 8007c70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c72:	3301      	adds	r3, #1
 8007c74:	9315      	str	r3, [sp, #84]	; 0x54
 8007c76:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8007e94 <_strtod_l+0x594>
 8007c7a:	f04f 0800 	mov.w	r8, #0
 8007c7e:	e67a      	b.n	8007976 <_strtod_l+0x76>
 8007c80:	4881      	ldr	r0, [pc, #516]	; (8007e88 <_strtod_l+0x588>)
 8007c82:	f000 ff09 	bl	8008a98 <nan>
 8007c86:	ec59 8b10 	vmov	r8, r9, d0
 8007c8a:	e674      	b.n	8007976 <_strtod_l+0x76>
 8007c8c:	9b05      	ldr	r3, [sp, #20]
 8007c8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c90:	1afb      	subs	r3, r7, r3
 8007c92:	f1bb 0f00 	cmp.w	fp, #0
 8007c96:	bf08      	it	eq
 8007c98:	46b3      	moveq	fp, r6
 8007c9a:	2e10      	cmp	r6, #16
 8007c9c:	9308      	str	r3, [sp, #32]
 8007c9e:	4635      	mov	r5, r6
 8007ca0:	bfa8      	it	ge
 8007ca2:	2510      	movge	r5, #16
 8007ca4:	f7f8 fc36 	bl	8000514 <__aeabi_ui2d>
 8007ca8:	2e09      	cmp	r6, #9
 8007caa:	4680      	mov	r8, r0
 8007cac:	4689      	mov	r9, r1
 8007cae:	dd13      	ble.n	8007cd8 <_strtod_l+0x3d8>
 8007cb0:	4b76      	ldr	r3, [pc, #472]	; (8007e8c <_strtod_l+0x58c>)
 8007cb2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007cb6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007cba:	f7f8 fca5 	bl	8000608 <__aeabi_dmul>
 8007cbe:	4680      	mov	r8, r0
 8007cc0:	4650      	mov	r0, sl
 8007cc2:	4689      	mov	r9, r1
 8007cc4:	f7f8 fc26 	bl	8000514 <__aeabi_ui2d>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	460b      	mov	r3, r1
 8007ccc:	4640      	mov	r0, r8
 8007cce:	4649      	mov	r1, r9
 8007cd0:	f7f8 fae4 	bl	800029c <__adddf3>
 8007cd4:	4680      	mov	r8, r0
 8007cd6:	4689      	mov	r9, r1
 8007cd8:	2e0f      	cmp	r6, #15
 8007cda:	dc38      	bgt.n	8007d4e <_strtod_l+0x44e>
 8007cdc:	9b08      	ldr	r3, [sp, #32]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f43f ae49 	beq.w	8007976 <_strtod_l+0x76>
 8007ce4:	dd24      	ble.n	8007d30 <_strtod_l+0x430>
 8007ce6:	2b16      	cmp	r3, #22
 8007ce8:	dc0b      	bgt.n	8007d02 <_strtod_l+0x402>
 8007cea:	4968      	ldr	r1, [pc, #416]	; (8007e8c <_strtod_l+0x58c>)
 8007cec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007cf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cf4:	4642      	mov	r2, r8
 8007cf6:	464b      	mov	r3, r9
 8007cf8:	f7f8 fc86 	bl	8000608 <__aeabi_dmul>
 8007cfc:	4680      	mov	r8, r0
 8007cfe:	4689      	mov	r9, r1
 8007d00:	e639      	b.n	8007976 <_strtod_l+0x76>
 8007d02:	9a08      	ldr	r2, [sp, #32]
 8007d04:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	db20      	blt.n	8007d4e <_strtod_l+0x44e>
 8007d0c:	4c5f      	ldr	r4, [pc, #380]	; (8007e8c <_strtod_l+0x58c>)
 8007d0e:	f1c6 060f 	rsb	r6, r6, #15
 8007d12:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007d16:	4642      	mov	r2, r8
 8007d18:	464b      	mov	r3, r9
 8007d1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d1e:	f7f8 fc73 	bl	8000608 <__aeabi_dmul>
 8007d22:	9b08      	ldr	r3, [sp, #32]
 8007d24:	1b9e      	subs	r6, r3, r6
 8007d26:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007d2a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007d2e:	e7e3      	b.n	8007cf8 <_strtod_l+0x3f8>
 8007d30:	9b08      	ldr	r3, [sp, #32]
 8007d32:	3316      	adds	r3, #22
 8007d34:	db0b      	blt.n	8007d4e <_strtod_l+0x44e>
 8007d36:	9b05      	ldr	r3, [sp, #20]
 8007d38:	1bdf      	subs	r7, r3, r7
 8007d3a:	4b54      	ldr	r3, [pc, #336]	; (8007e8c <_strtod_l+0x58c>)
 8007d3c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007d40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d44:	4640      	mov	r0, r8
 8007d46:	4649      	mov	r1, r9
 8007d48:	f7f8 fd88 	bl	800085c <__aeabi_ddiv>
 8007d4c:	e7d6      	b.n	8007cfc <_strtod_l+0x3fc>
 8007d4e:	9b08      	ldr	r3, [sp, #32]
 8007d50:	1b75      	subs	r5, r6, r5
 8007d52:	441d      	add	r5, r3
 8007d54:	2d00      	cmp	r5, #0
 8007d56:	dd70      	ble.n	8007e3a <_strtod_l+0x53a>
 8007d58:	f015 030f 	ands.w	r3, r5, #15
 8007d5c:	d00a      	beq.n	8007d74 <_strtod_l+0x474>
 8007d5e:	494b      	ldr	r1, [pc, #300]	; (8007e8c <_strtod_l+0x58c>)
 8007d60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007d64:	4642      	mov	r2, r8
 8007d66:	464b      	mov	r3, r9
 8007d68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d6c:	f7f8 fc4c 	bl	8000608 <__aeabi_dmul>
 8007d70:	4680      	mov	r8, r0
 8007d72:	4689      	mov	r9, r1
 8007d74:	f035 050f 	bics.w	r5, r5, #15
 8007d78:	d04d      	beq.n	8007e16 <_strtod_l+0x516>
 8007d7a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007d7e:	dd22      	ble.n	8007dc6 <_strtod_l+0x4c6>
 8007d80:	2500      	movs	r5, #0
 8007d82:	46ab      	mov	fp, r5
 8007d84:	9509      	str	r5, [sp, #36]	; 0x24
 8007d86:	9505      	str	r5, [sp, #20]
 8007d88:	2322      	movs	r3, #34	; 0x22
 8007d8a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007e94 <_strtod_l+0x594>
 8007d8e:	6023      	str	r3, [r4, #0]
 8007d90:	f04f 0800 	mov.w	r8, #0
 8007d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f43f aded 	beq.w	8007976 <_strtod_l+0x76>
 8007d9c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007d9e:	4620      	mov	r0, r4
 8007da0:	f7ff f924 	bl	8006fec <_Bfree>
 8007da4:	9905      	ldr	r1, [sp, #20]
 8007da6:	4620      	mov	r0, r4
 8007da8:	f7ff f920 	bl	8006fec <_Bfree>
 8007dac:	4659      	mov	r1, fp
 8007dae:	4620      	mov	r0, r4
 8007db0:	f7ff f91c 	bl	8006fec <_Bfree>
 8007db4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007db6:	4620      	mov	r0, r4
 8007db8:	f7ff f918 	bl	8006fec <_Bfree>
 8007dbc:	4629      	mov	r1, r5
 8007dbe:	4620      	mov	r0, r4
 8007dc0:	f7ff f914 	bl	8006fec <_Bfree>
 8007dc4:	e5d7      	b.n	8007976 <_strtod_l+0x76>
 8007dc6:	4b32      	ldr	r3, [pc, #200]	; (8007e90 <_strtod_l+0x590>)
 8007dc8:	9304      	str	r3, [sp, #16]
 8007dca:	2300      	movs	r3, #0
 8007dcc:	112d      	asrs	r5, r5, #4
 8007dce:	4640      	mov	r0, r8
 8007dd0:	4649      	mov	r1, r9
 8007dd2:	469a      	mov	sl, r3
 8007dd4:	2d01      	cmp	r5, #1
 8007dd6:	dc21      	bgt.n	8007e1c <_strtod_l+0x51c>
 8007dd8:	b10b      	cbz	r3, 8007dde <_strtod_l+0x4de>
 8007dda:	4680      	mov	r8, r0
 8007ddc:	4689      	mov	r9, r1
 8007dde:	492c      	ldr	r1, [pc, #176]	; (8007e90 <_strtod_l+0x590>)
 8007de0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007de4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007de8:	4642      	mov	r2, r8
 8007dea:	464b      	mov	r3, r9
 8007dec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007df0:	f7f8 fc0a 	bl	8000608 <__aeabi_dmul>
 8007df4:	4b27      	ldr	r3, [pc, #156]	; (8007e94 <_strtod_l+0x594>)
 8007df6:	460a      	mov	r2, r1
 8007df8:	400b      	ands	r3, r1
 8007dfa:	4927      	ldr	r1, [pc, #156]	; (8007e98 <_strtod_l+0x598>)
 8007dfc:	428b      	cmp	r3, r1
 8007dfe:	4680      	mov	r8, r0
 8007e00:	d8be      	bhi.n	8007d80 <_strtod_l+0x480>
 8007e02:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007e06:	428b      	cmp	r3, r1
 8007e08:	bf86      	itte	hi
 8007e0a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8007e9c <_strtod_l+0x59c>
 8007e0e:	f04f 38ff 	movhi.w	r8, #4294967295
 8007e12:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007e16:	2300      	movs	r3, #0
 8007e18:	9304      	str	r3, [sp, #16]
 8007e1a:	e07b      	b.n	8007f14 <_strtod_l+0x614>
 8007e1c:	07ea      	lsls	r2, r5, #31
 8007e1e:	d505      	bpl.n	8007e2c <_strtod_l+0x52c>
 8007e20:	9b04      	ldr	r3, [sp, #16]
 8007e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e26:	f7f8 fbef 	bl	8000608 <__aeabi_dmul>
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	9a04      	ldr	r2, [sp, #16]
 8007e2e:	3208      	adds	r2, #8
 8007e30:	f10a 0a01 	add.w	sl, sl, #1
 8007e34:	106d      	asrs	r5, r5, #1
 8007e36:	9204      	str	r2, [sp, #16]
 8007e38:	e7cc      	b.n	8007dd4 <_strtod_l+0x4d4>
 8007e3a:	d0ec      	beq.n	8007e16 <_strtod_l+0x516>
 8007e3c:	426d      	negs	r5, r5
 8007e3e:	f015 020f 	ands.w	r2, r5, #15
 8007e42:	d00a      	beq.n	8007e5a <_strtod_l+0x55a>
 8007e44:	4b11      	ldr	r3, [pc, #68]	; (8007e8c <_strtod_l+0x58c>)
 8007e46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e4a:	4640      	mov	r0, r8
 8007e4c:	4649      	mov	r1, r9
 8007e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e52:	f7f8 fd03 	bl	800085c <__aeabi_ddiv>
 8007e56:	4680      	mov	r8, r0
 8007e58:	4689      	mov	r9, r1
 8007e5a:	112d      	asrs	r5, r5, #4
 8007e5c:	d0db      	beq.n	8007e16 <_strtod_l+0x516>
 8007e5e:	2d1f      	cmp	r5, #31
 8007e60:	dd1e      	ble.n	8007ea0 <_strtod_l+0x5a0>
 8007e62:	2500      	movs	r5, #0
 8007e64:	46ab      	mov	fp, r5
 8007e66:	9509      	str	r5, [sp, #36]	; 0x24
 8007e68:	9505      	str	r5, [sp, #20]
 8007e6a:	2322      	movs	r3, #34	; 0x22
 8007e6c:	f04f 0800 	mov.w	r8, #0
 8007e70:	f04f 0900 	mov.w	r9, #0
 8007e74:	6023      	str	r3, [r4, #0]
 8007e76:	e78d      	b.n	8007d94 <_strtod_l+0x494>
 8007e78:	0800b12d 	.word	0x0800b12d
 8007e7c:	0800b354 	.word	0x0800b354
 8007e80:	0800b125 	.word	0x0800b125
 8007e84:	0800b15c 	.word	0x0800b15c
 8007e88:	0800b4e5 	.word	0x0800b4e5
 8007e8c:	0800b268 	.word	0x0800b268
 8007e90:	0800b240 	.word	0x0800b240
 8007e94:	7ff00000 	.word	0x7ff00000
 8007e98:	7ca00000 	.word	0x7ca00000
 8007e9c:	7fefffff 	.word	0x7fefffff
 8007ea0:	f015 0310 	ands.w	r3, r5, #16
 8007ea4:	bf18      	it	ne
 8007ea6:	236a      	movne	r3, #106	; 0x6a
 8007ea8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800824c <_strtod_l+0x94c>
 8007eac:	9304      	str	r3, [sp, #16]
 8007eae:	4640      	mov	r0, r8
 8007eb0:	4649      	mov	r1, r9
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	07ea      	lsls	r2, r5, #31
 8007eb6:	d504      	bpl.n	8007ec2 <_strtod_l+0x5c2>
 8007eb8:	e9da 2300 	ldrd	r2, r3, [sl]
 8007ebc:	f7f8 fba4 	bl	8000608 <__aeabi_dmul>
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	106d      	asrs	r5, r5, #1
 8007ec4:	f10a 0a08 	add.w	sl, sl, #8
 8007ec8:	d1f4      	bne.n	8007eb4 <_strtod_l+0x5b4>
 8007eca:	b10b      	cbz	r3, 8007ed0 <_strtod_l+0x5d0>
 8007ecc:	4680      	mov	r8, r0
 8007ece:	4689      	mov	r9, r1
 8007ed0:	9b04      	ldr	r3, [sp, #16]
 8007ed2:	b1bb      	cbz	r3, 8007f04 <_strtod_l+0x604>
 8007ed4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007ed8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	4649      	mov	r1, r9
 8007ee0:	dd10      	ble.n	8007f04 <_strtod_l+0x604>
 8007ee2:	2b1f      	cmp	r3, #31
 8007ee4:	f340 811e 	ble.w	8008124 <_strtod_l+0x824>
 8007ee8:	2b34      	cmp	r3, #52	; 0x34
 8007eea:	bfde      	ittt	le
 8007eec:	f04f 33ff 	movle.w	r3, #4294967295
 8007ef0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007ef4:	4093      	lslle	r3, r2
 8007ef6:	f04f 0800 	mov.w	r8, #0
 8007efa:	bfcc      	ite	gt
 8007efc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007f00:	ea03 0901 	andle.w	r9, r3, r1
 8007f04:	2200      	movs	r2, #0
 8007f06:	2300      	movs	r3, #0
 8007f08:	4640      	mov	r0, r8
 8007f0a:	4649      	mov	r1, r9
 8007f0c:	f7f8 fde4 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f10:	2800      	cmp	r0, #0
 8007f12:	d1a6      	bne.n	8007e62 <_strtod_l+0x562>
 8007f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f16:	9300      	str	r3, [sp, #0]
 8007f18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f1a:	4633      	mov	r3, r6
 8007f1c:	465a      	mov	r2, fp
 8007f1e:	4620      	mov	r0, r4
 8007f20:	f7ff f8cc 	bl	80070bc <__s2b>
 8007f24:	9009      	str	r0, [sp, #36]	; 0x24
 8007f26:	2800      	cmp	r0, #0
 8007f28:	f43f af2a 	beq.w	8007d80 <_strtod_l+0x480>
 8007f2c:	9a08      	ldr	r2, [sp, #32]
 8007f2e:	9b05      	ldr	r3, [sp, #20]
 8007f30:	2a00      	cmp	r2, #0
 8007f32:	eba3 0307 	sub.w	r3, r3, r7
 8007f36:	bfa8      	it	ge
 8007f38:	2300      	movge	r3, #0
 8007f3a:	930c      	str	r3, [sp, #48]	; 0x30
 8007f3c:	2500      	movs	r5, #0
 8007f3e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007f42:	9312      	str	r3, [sp, #72]	; 0x48
 8007f44:	46ab      	mov	fp, r5
 8007f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f48:	4620      	mov	r0, r4
 8007f4a:	6859      	ldr	r1, [r3, #4]
 8007f4c:	f7ff f80e 	bl	8006f6c <_Balloc>
 8007f50:	9005      	str	r0, [sp, #20]
 8007f52:	2800      	cmp	r0, #0
 8007f54:	f43f af18 	beq.w	8007d88 <_strtod_l+0x488>
 8007f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f5a:	691a      	ldr	r2, [r3, #16]
 8007f5c:	3202      	adds	r2, #2
 8007f5e:	f103 010c 	add.w	r1, r3, #12
 8007f62:	0092      	lsls	r2, r2, #2
 8007f64:	300c      	adds	r0, #12
 8007f66:	f000 fd87 	bl	8008a78 <memcpy>
 8007f6a:	ec49 8b10 	vmov	d0, r8, r9
 8007f6e:	aa18      	add	r2, sp, #96	; 0x60
 8007f70:	a917      	add	r1, sp, #92	; 0x5c
 8007f72:	4620      	mov	r0, r4
 8007f74:	f7ff fbd6 	bl	8007724 <__d2b>
 8007f78:	ec49 8b18 	vmov	d8, r8, r9
 8007f7c:	9016      	str	r0, [sp, #88]	; 0x58
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	f43f af02 	beq.w	8007d88 <_strtod_l+0x488>
 8007f84:	2101      	movs	r1, #1
 8007f86:	4620      	mov	r0, r4
 8007f88:	f7ff f930 	bl	80071ec <__i2b>
 8007f8c:	4683      	mov	fp, r0
 8007f8e:	2800      	cmp	r0, #0
 8007f90:	f43f aefa 	beq.w	8007d88 <_strtod_l+0x488>
 8007f94:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007f96:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007f98:	2e00      	cmp	r6, #0
 8007f9a:	bfab      	itete	ge
 8007f9c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8007f9e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8007fa0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007fa2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8007fa6:	bfac      	ite	ge
 8007fa8:	eb06 0a03 	addge.w	sl, r6, r3
 8007fac:	1b9f      	sublt	r7, r3, r6
 8007fae:	9b04      	ldr	r3, [sp, #16]
 8007fb0:	1af6      	subs	r6, r6, r3
 8007fb2:	4416      	add	r6, r2
 8007fb4:	4ba0      	ldr	r3, [pc, #640]	; (8008238 <_strtod_l+0x938>)
 8007fb6:	3e01      	subs	r6, #1
 8007fb8:	429e      	cmp	r6, r3
 8007fba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007fbe:	f280 80c4 	bge.w	800814a <_strtod_l+0x84a>
 8007fc2:	1b9b      	subs	r3, r3, r6
 8007fc4:	2b1f      	cmp	r3, #31
 8007fc6:	eba2 0203 	sub.w	r2, r2, r3
 8007fca:	f04f 0101 	mov.w	r1, #1
 8007fce:	f300 80b0 	bgt.w	8008132 <_strtod_l+0x832>
 8007fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8007fd6:	930e      	str	r3, [sp, #56]	; 0x38
 8007fd8:	2300      	movs	r3, #0
 8007fda:	930d      	str	r3, [sp, #52]	; 0x34
 8007fdc:	eb0a 0602 	add.w	r6, sl, r2
 8007fe0:	9b04      	ldr	r3, [sp, #16]
 8007fe2:	45b2      	cmp	sl, r6
 8007fe4:	4417      	add	r7, r2
 8007fe6:	441f      	add	r7, r3
 8007fe8:	4653      	mov	r3, sl
 8007fea:	bfa8      	it	ge
 8007fec:	4633      	movge	r3, r6
 8007fee:	42bb      	cmp	r3, r7
 8007ff0:	bfa8      	it	ge
 8007ff2:	463b      	movge	r3, r7
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	bfc2      	ittt	gt
 8007ff8:	1af6      	subgt	r6, r6, r3
 8007ffa:	1aff      	subgt	r7, r7, r3
 8007ffc:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008000:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008002:	2b00      	cmp	r3, #0
 8008004:	dd17      	ble.n	8008036 <_strtod_l+0x736>
 8008006:	4659      	mov	r1, fp
 8008008:	461a      	mov	r2, r3
 800800a:	4620      	mov	r0, r4
 800800c:	f7ff f9ae 	bl	800736c <__pow5mult>
 8008010:	4683      	mov	fp, r0
 8008012:	2800      	cmp	r0, #0
 8008014:	f43f aeb8 	beq.w	8007d88 <_strtod_l+0x488>
 8008018:	4601      	mov	r1, r0
 800801a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800801c:	4620      	mov	r0, r4
 800801e:	f7ff f8fb 	bl	8007218 <__multiply>
 8008022:	900b      	str	r0, [sp, #44]	; 0x2c
 8008024:	2800      	cmp	r0, #0
 8008026:	f43f aeaf 	beq.w	8007d88 <_strtod_l+0x488>
 800802a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800802c:	4620      	mov	r0, r4
 800802e:	f7fe ffdd 	bl	8006fec <_Bfree>
 8008032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008034:	9316      	str	r3, [sp, #88]	; 0x58
 8008036:	2e00      	cmp	r6, #0
 8008038:	f300 808c 	bgt.w	8008154 <_strtod_l+0x854>
 800803c:	9b08      	ldr	r3, [sp, #32]
 800803e:	2b00      	cmp	r3, #0
 8008040:	dd08      	ble.n	8008054 <_strtod_l+0x754>
 8008042:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008044:	9905      	ldr	r1, [sp, #20]
 8008046:	4620      	mov	r0, r4
 8008048:	f7ff f990 	bl	800736c <__pow5mult>
 800804c:	9005      	str	r0, [sp, #20]
 800804e:	2800      	cmp	r0, #0
 8008050:	f43f ae9a 	beq.w	8007d88 <_strtod_l+0x488>
 8008054:	2f00      	cmp	r7, #0
 8008056:	dd08      	ble.n	800806a <_strtod_l+0x76a>
 8008058:	9905      	ldr	r1, [sp, #20]
 800805a:	463a      	mov	r2, r7
 800805c:	4620      	mov	r0, r4
 800805e:	f7ff f9df 	bl	8007420 <__lshift>
 8008062:	9005      	str	r0, [sp, #20]
 8008064:	2800      	cmp	r0, #0
 8008066:	f43f ae8f 	beq.w	8007d88 <_strtod_l+0x488>
 800806a:	f1ba 0f00 	cmp.w	sl, #0
 800806e:	dd08      	ble.n	8008082 <_strtod_l+0x782>
 8008070:	4659      	mov	r1, fp
 8008072:	4652      	mov	r2, sl
 8008074:	4620      	mov	r0, r4
 8008076:	f7ff f9d3 	bl	8007420 <__lshift>
 800807a:	4683      	mov	fp, r0
 800807c:	2800      	cmp	r0, #0
 800807e:	f43f ae83 	beq.w	8007d88 <_strtod_l+0x488>
 8008082:	9a05      	ldr	r2, [sp, #20]
 8008084:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008086:	4620      	mov	r0, r4
 8008088:	f7ff fa52 	bl	8007530 <__mdiff>
 800808c:	4605      	mov	r5, r0
 800808e:	2800      	cmp	r0, #0
 8008090:	f43f ae7a 	beq.w	8007d88 <_strtod_l+0x488>
 8008094:	68c3      	ldr	r3, [r0, #12]
 8008096:	930b      	str	r3, [sp, #44]	; 0x2c
 8008098:	2300      	movs	r3, #0
 800809a:	60c3      	str	r3, [r0, #12]
 800809c:	4659      	mov	r1, fp
 800809e:	f7ff fa2b 	bl	80074f8 <__mcmp>
 80080a2:	2800      	cmp	r0, #0
 80080a4:	da60      	bge.n	8008168 <_strtod_l+0x868>
 80080a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080a8:	ea53 0308 	orrs.w	r3, r3, r8
 80080ac:	f040 8084 	bne.w	80081b8 <_strtod_l+0x8b8>
 80080b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d17f      	bne.n	80081b8 <_strtod_l+0x8b8>
 80080b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80080bc:	0d1b      	lsrs	r3, r3, #20
 80080be:	051b      	lsls	r3, r3, #20
 80080c0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80080c4:	d978      	bls.n	80081b8 <_strtod_l+0x8b8>
 80080c6:	696b      	ldr	r3, [r5, #20]
 80080c8:	b913      	cbnz	r3, 80080d0 <_strtod_l+0x7d0>
 80080ca:	692b      	ldr	r3, [r5, #16]
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	dd73      	ble.n	80081b8 <_strtod_l+0x8b8>
 80080d0:	4629      	mov	r1, r5
 80080d2:	2201      	movs	r2, #1
 80080d4:	4620      	mov	r0, r4
 80080d6:	f7ff f9a3 	bl	8007420 <__lshift>
 80080da:	4659      	mov	r1, fp
 80080dc:	4605      	mov	r5, r0
 80080de:	f7ff fa0b 	bl	80074f8 <__mcmp>
 80080e2:	2800      	cmp	r0, #0
 80080e4:	dd68      	ble.n	80081b8 <_strtod_l+0x8b8>
 80080e6:	9904      	ldr	r1, [sp, #16]
 80080e8:	4a54      	ldr	r2, [pc, #336]	; (800823c <_strtod_l+0x93c>)
 80080ea:	464b      	mov	r3, r9
 80080ec:	2900      	cmp	r1, #0
 80080ee:	f000 8084 	beq.w	80081fa <_strtod_l+0x8fa>
 80080f2:	ea02 0109 	and.w	r1, r2, r9
 80080f6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80080fa:	dc7e      	bgt.n	80081fa <_strtod_l+0x8fa>
 80080fc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008100:	f77f aeb3 	ble.w	8007e6a <_strtod_l+0x56a>
 8008104:	4b4e      	ldr	r3, [pc, #312]	; (8008240 <_strtod_l+0x940>)
 8008106:	4640      	mov	r0, r8
 8008108:	4649      	mov	r1, r9
 800810a:	2200      	movs	r2, #0
 800810c:	f7f8 fa7c 	bl	8000608 <__aeabi_dmul>
 8008110:	4b4a      	ldr	r3, [pc, #296]	; (800823c <_strtod_l+0x93c>)
 8008112:	400b      	ands	r3, r1
 8008114:	4680      	mov	r8, r0
 8008116:	4689      	mov	r9, r1
 8008118:	2b00      	cmp	r3, #0
 800811a:	f47f ae3f 	bne.w	8007d9c <_strtod_l+0x49c>
 800811e:	2322      	movs	r3, #34	; 0x22
 8008120:	6023      	str	r3, [r4, #0]
 8008122:	e63b      	b.n	8007d9c <_strtod_l+0x49c>
 8008124:	f04f 32ff 	mov.w	r2, #4294967295
 8008128:	fa02 f303 	lsl.w	r3, r2, r3
 800812c:	ea03 0808 	and.w	r8, r3, r8
 8008130:	e6e8      	b.n	8007f04 <_strtod_l+0x604>
 8008132:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008136:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800813a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800813e:	36e2      	adds	r6, #226	; 0xe2
 8008140:	fa01 f306 	lsl.w	r3, r1, r6
 8008144:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8008148:	e748      	b.n	8007fdc <_strtod_l+0x6dc>
 800814a:	2100      	movs	r1, #0
 800814c:	2301      	movs	r3, #1
 800814e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8008152:	e743      	b.n	8007fdc <_strtod_l+0x6dc>
 8008154:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008156:	4632      	mov	r2, r6
 8008158:	4620      	mov	r0, r4
 800815a:	f7ff f961 	bl	8007420 <__lshift>
 800815e:	9016      	str	r0, [sp, #88]	; 0x58
 8008160:	2800      	cmp	r0, #0
 8008162:	f47f af6b 	bne.w	800803c <_strtod_l+0x73c>
 8008166:	e60f      	b.n	8007d88 <_strtod_l+0x488>
 8008168:	46ca      	mov	sl, r9
 800816a:	d171      	bne.n	8008250 <_strtod_l+0x950>
 800816c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800816e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008172:	b352      	cbz	r2, 80081ca <_strtod_l+0x8ca>
 8008174:	4a33      	ldr	r2, [pc, #204]	; (8008244 <_strtod_l+0x944>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d12a      	bne.n	80081d0 <_strtod_l+0x8d0>
 800817a:	9b04      	ldr	r3, [sp, #16]
 800817c:	4641      	mov	r1, r8
 800817e:	b1fb      	cbz	r3, 80081c0 <_strtod_l+0x8c0>
 8008180:	4b2e      	ldr	r3, [pc, #184]	; (800823c <_strtod_l+0x93c>)
 8008182:	ea09 0303 	and.w	r3, r9, r3
 8008186:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800818a:	f04f 32ff 	mov.w	r2, #4294967295
 800818e:	d81a      	bhi.n	80081c6 <_strtod_l+0x8c6>
 8008190:	0d1b      	lsrs	r3, r3, #20
 8008192:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008196:	fa02 f303 	lsl.w	r3, r2, r3
 800819a:	4299      	cmp	r1, r3
 800819c:	d118      	bne.n	80081d0 <_strtod_l+0x8d0>
 800819e:	4b2a      	ldr	r3, [pc, #168]	; (8008248 <_strtod_l+0x948>)
 80081a0:	459a      	cmp	sl, r3
 80081a2:	d102      	bne.n	80081aa <_strtod_l+0x8aa>
 80081a4:	3101      	adds	r1, #1
 80081a6:	f43f adef 	beq.w	8007d88 <_strtod_l+0x488>
 80081aa:	4b24      	ldr	r3, [pc, #144]	; (800823c <_strtod_l+0x93c>)
 80081ac:	ea0a 0303 	and.w	r3, sl, r3
 80081b0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80081b4:	f04f 0800 	mov.w	r8, #0
 80081b8:	9b04      	ldr	r3, [sp, #16]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d1a2      	bne.n	8008104 <_strtod_l+0x804>
 80081be:	e5ed      	b.n	8007d9c <_strtod_l+0x49c>
 80081c0:	f04f 33ff 	mov.w	r3, #4294967295
 80081c4:	e7e9      	b.n	800819a <_strtod_l+0x89a>
 80081c6:	4613      	mov	r3, r2
 80081c8:	e7e7      	b.n	800819a <_strtod_l+0x89a>
 80081ca:	ea53 0308 	orrs.w	r3, r3, r8
 80081ce:	d08a      	beq.n	80080e6 <_strtod_l+0x7e6>
 80081d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081d2:	b1e3      	cbz	r3, 800820e <_strtod_l+0x90e>
 80081d4:	ea13 0f0a 	tst.w	r3, sl
 80081d8:	d0ee      	beq.n	80081b8 <_strtod_l+0x8b8>
 80081da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081dc:	9a04      	ldr	r2, [sp, #16]
 80081de:	4640      	mov	r0, r8
 80081e0:	4649      	mov	r1, r9
 80081e2:	b1c3      	cbz	r3, 8008216 <_strtod_l+0x916>
 80081e4:	f7ff fb6f 	bl	80078c6 <sulp>
 80081e8:	4602      	mov	r2, r0
 80081ea:	460b      	mov	r3, r1
 80081ec:	ec51 0b18 	vmov	r0, r1, d8
 80081f0:	f7f8 f854 	bl	800029c <__adddf3>
 80081f4:	4680      	mov	r8, r0
 80081f6:	4689      	mov	r9, r1
 80081f8:	e7de      	b.n	80081b8 <_strtod_l+0x8b8>
 80081fa:	4013      	ands	r3, r2
 80081fc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008200:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008204:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008208:	f04f 38ff 	mov.w	r8, #4294967295
 800820c:	e7d4      	b.n	80081b8 <_strtod_l+0x8b8>
 800820e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008210:	ea13 0f08 	tst.w	r3, r8
 8008214:	e7e0      	b.n	80081d8 <_strtod_l+0x8d8>
 8008216:	f7ff fb56 	bl	80078c6 <sulp>
 800821a:	4602      	mov	r2, r0
 800821c:	460b      	mov	r3, r1
 800821e:	ec51 0b18 	vmov	r0, r1, d8
 8008222:	f7f8 f839 	bl	8000298 <__aeabi_dsub>
 8008226:	2200      	movs	r2, #0
 8008228:	2300      	movs	r3, #0
 800822a:	4680      	mov	r8, r0
 800822c:	4689      	mov	r9, r1
 800822e:	f7f8 fc53 	bl	8000ad8 <__aeabi_dcmpeq>
 8008232:	2800      	cmp	r0, #0
 8008234:	d0c0      	beq.n	80081b8 <_strtod_l+0x8b8>
 8008236:	e618      	b.n	8007e6a <_strtod_l+0x56a>
 8008238:	fffffc02 	.word	0xfffffc02
 800823c:	7ff00000 	.word	0x7ff00000
 8008240:	39500000 	.word	0x39500000
 8008244:	000fffff 	.word	0x000fffff
 8008248:	7fefffff 	.word	0x7fefffff
 800824c:	0800b368 	.word	0x0800b368
 8008250:	4659      	mov	r1, fp
 8008252:	4628      	mov	r0, r5
 8008254:	f7ff fac0 	bl	80077d8 <__ratio>
 8008258:	ec57 6b10 	vmov	r6, r7, d0
 800825c:	ee10 0a10 	vmov	r0, s0
 8008260:	2200      	movs	r2, #0
 8008262:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008266:	4639      	mov	r1, r7
 8008268:	f7f8 fc4a 	bl	8000b00 <__aeabi_dcmple>
 800826c:	2800      	cmp	r0, #0
 800826e:	d071      	beq.n	8008354 <_strtod_l+0xa54>
 8008270:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008272:	2b00      	cmp	r3, #0
 8008274:	d17c      	bne.n	8008370 <_strtod_l+0xa70>
 8008276:	f1b8 0f00 	cmp.w	r8, #0
 800827a:	d15a      	bne.n	8008332 <_strtod_l+0xa32>
 800827c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008280:	2b00      	cmp	r3, #0
 8008282:	d15d      	bne.n	8008340 <_strtod_l+0xa40>
 8008284:	4b90      	ldr	r3, [pc, #576]	; (80084c8 <_strtod_l+0xbc8>)
 8008286:	2200      	movs	r2, #0
 8008288:	4630      	mov	r0, r6
 800828a:	4639      	mov	r1, r7
 800828c:	f7f8 fc2e 	bl	8000aec <__aeabi_dcmplt>
 8008290:	2800      	cmp	r0, #0
 8008292:	d15c      	bne.n	800834e <_strtod_l+0xa4e>
 8008294:	4630      	mov	r0, r6
 8008296:	4639      	mov	r1, r7
 8008298:	4b8c      	ldr	r3, [pc, #560]	; (80084cc <_strtod_l+0xbcc>)
 800829a:	2200      	movs	r2, #0
 800829c:	f7f8 f9b4 	bl	8000608 <__aeabi_dmul>
 80082a0:	4606      	mov	r6, r0
 80082a2:	460f      	mov	r7, r1
 80082a4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80082a8:	9606      	str	r6, [sp, #24]
 80082aa:	9307      	str	r3, [sp, #28]
 80082ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082b0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80082b4:	4b86      	ldr	r3, [pc, #536]	; (80084d0 <_strtod_l+0xbd0>)
 80082b6:	ea0a 0303 	and.w	r3, sl, r3
 80082ba:	930d      	str	r3, [sp, #52]	; 0x34
 80082bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80082be:	4b85      	ldr	r3, [pc, #532]	; (80084d4 <_strtod_l+0xbd4>)
 80082c0:	429a      	cmp	r2, r3
 80082c2:	f040 8090 	bne.w	80083e6 <_strtod_l+0xae6>
 80082c6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80082ca:	ec49 8b10 	vmov	d0, r8, r9
 80082ce:	f7ff f9b9 	bl	8007644 <__ulp>
 80082d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082d6:	ec51 0b10 	vmov	r0, r1, d0
 80082da:	f7f8 f995 	bl	8000608 <__aeabi_dmul>
 80082de:	4642      	mov	r2, r8
 80082e0:	464b      	mov	r3, r9
 80082e2:	f7f7 ffdb 	bl	800029c <__adddf3>
 80082e6:	460b      	mov	r3, r1
 80082e8:	4979      	ldr	r1, [pc, #484]	; (80084d0 <_strtod_l+0xbd0>)
 80082ea:	4a7b      	ldr	r2, [pc, #492]	; (80084d8 <_strtod_l+0xbd8>)
 80082ec:	4019      	ands	r1, r3
 80082ee:	4291      	cmp	r1, r2
 80082f0:	4680      	mov	r8, r0
 80082f2:	d944      	bls.n	800837e <_strtod_l+0xa7e>
 80082f4:	ee18 2a90 	vmov	r2, s17
 80082f8:	4b78      	ldr	r3, [pc, #480]	; (80084dc <_strtod_l+0xbdc>)
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d104      	bne.n	8008308 <_strtod_l+0xa08>
 80082fe:	ee18 3a10 	vmov	r3, s16
 8008302:	3301      	adds	r3, #1
 8008304:	f43f ad40 	beq.w	8007d88 <_strtod_l+0x488>
 8008308:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80084dc <_strtod_l+0xbdc>
 800830c:	f04f 38ff 	mov.w	r8, #4294967295
 8008310:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008312:	4620      	mov	r0, r4
 8008314:	f7fe fe6a 	bl	8006fec <_Bfree>
 8008318:	9905      	ldr	r1, [sp, #20]
 800831a:	4620      	mov	r0, r4
 800831c:	f7fe fe66 	bl	8006fec <_Bfree>
 8008320:	4659      	mov	r1, fp
 8008322:	4620      	mov	r0, r4
 8008324:	f7fe fe62 	bl	8006fec <_Bfree>
 8008328:	4629      	mov	r1, r5
 800832a:	4620      	mov	r0, r4
 800832c:	f7fe fe5e 	bl	8006fec <_Bfree>
 8008330:	e609      	b.n	8007f46 <_strtod_l+0x646>
 8008332:	f1b8 0f01 	cmp.w	r8, #1
 8008336:	d103      	bne.n	8008340 <_strtod_l+0xa40>
 8008338:	f1b9 0f00 	cmp.w	r9, #0
 800833c:	f43f ad95 	beq.w	8007e6a <_strtod_l+0x56a>
 8008340:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008498 <_strtod_l+0xb98>
 8008344:	4f60      	ldr	r7, [pc, #384]	; (80084c8 <_strtod_l+0xbc8>)
 8008346:	ed8d 7b06 	vstr	d7, [sp, #24]
 800834a:	2600      	movs	r6, #0
 800834c:	e7ae      	b.n	80082ac <_strtod_l+0x9ac>
 800834e:	4f5f      	ldr	r7, [pc, #380]	; (80084cc <_strtod_l+0xbcc>)
 8008350:	2600      	movs	r6, #0
 8008352:	e7a7      	b.n	80082a4 <_strtod_l+0x9a4>
 8008354:	4b5d      	ldr	r3, [pc, #372]	; (80084cc <_strtod_l+0xbcc>)
 8008356:	4630      	mov	r0, r6
 8008358:	4639      	mov	r1, r7
 800835a:	2200      	movs	r2, #0
 800835c:	f7f8 f954 	bl	8000608 <__aeabi_dmul>
 8008360:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008362:	4606      	mov	r6, r0
 8008364:	460f      	mov	r7, r1
 8008366:	2b00      	cmp	r3, #0
 8008368:	d09c      	beq.n	80082a4 <_strtod_l+0x9a4>
 800836a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800836e:	e79d      	b.n	80082ac <_strtod_l+0x9ac>
 8008370:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80084a0 <_strtod_l+0xba0>
 8008374:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008378:	ec57 6b17 	vmov	r6, r7, d7
 800837c:	e796      	b.n	80082ac <_strtod_l+0x9ac>
 800837e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008382:	9b04      	ldr	r3, [sp, #16]
 8008384:	46ca      	mov	sl, r9
 8008386:	2b00      	cmp	r3, #0
 8008388:	d1c2      	bne.n	8008310 <_strtod_l+0xa10>
 800838a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800838e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008390:	0d1b      	lsrs	r3, r3, #20
 8008392:	051b      	lsls	r3, r3, #20
 8008394:	429a      	cmp	r2, r3
 8008396:	d1bb      	bne.n	8008310 <_strtod_l+0xa10>
 8008398:	4630      	mov	r0, r6
 800839a:	4639      	mov	r1, r7
 800839c:	f7f8 fc94 	bl	8000cc8 <__aeabi_d2lz>
 80083a0:	f7f8 f904 	bl	80005ac <__aeabi_l2d>
 80083a4:	4602      	mov	r2, r0
 80083a6:	460b      	mov	r3, r1
 80083a8:	4630      	mov	r0, r6
 80083aa:	4639      	mov	r1, r7
 80083ac:	f7f7 ff74 	bl	8000298 <__aeabi_dsub>
 80083b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80083b2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80083b6:	ea43 0308 	orr.w	r3, r3, r8
 80083ba:	4313      	orrs	r3, r2
 80083bc:	4606      	mov	r6, r0
 80083be:	460f      	mov	r7, r1
 80083c0:	d054      	beq.n	800846c <_strtod_l+0xb6c>
 80083c2:	a339      	add	r3, pc, #228	; (adr r3, 80084a8 <_strtod_l+0xba8>)
 80083c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c8:	f7f8 fb90 	bl	8000aec <__aeabi_dcmplt>
 80083cc:	2800      	cmp	r0, #0
 80083ce:	f47f ace5 	bne.w	8007d9c <_strtod_l+0x49c>
 80083d2:	a337      	add	r3, pc, #220	; (adr r3, 80084b0 <_strtod_l+0xbb0>)
 80083d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d8:	4630      	mov	r0, r6
 80083da:	4639      	mov	r1, r7
 80083dc:	f7f8 fba4 	bl	8000b28 <__aeabi_dcmpgt>
 80083e0:	2800      	cmp	r0, #0
 80083e2:	d095      	beq.n	8008310 <_strtod_l+0xa10>
 80083e4:	e4da      	b.n	8007d9c <_strtod_l+0x49c>
 80083e6:	9b04      	ldr	r3, [sp, #16]
 80083e8:	b333      	cbz	r3, 8008438 <_strtod_l+0xb38>
 80083ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083ec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80083f0:	d822      	bhi.n	8008438 <_strtod_l+0xb38>
 80083f2:	a331      	add	r3, pc, #196	; (adr r3, 80084b8 <_strtod_l+0xbb8>)
 80083f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f8:	4630      	mov	r0, r6
 80083fa:	4639      	mov	r1, r7
 80083fc:	f7f8 fb80 	bl	8000b00 <__aeabi_dcmple>
 8008400:	b1a0      	cbz	r0, 800842c <_strtod_l+0xb2c>
 8008402:	4639      	mov	r1, r7
 8008404:	4630      	mov	r0, r6
 8008406:	f7f8 fbd7 	bl	8000bb8 <__aeabi_d2uiz>
 800840a:	2801      	cmp	r0, #1
 800840c:	bf38      	it	cc
 800840e:	2001      	movcc	r0, #1
 8008410:	f7f8 f880 	bl	8000514 <__aeabi_ui2d>
 8008414:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008416:	4606      	mov	r6, r0
 8008418:	460f      	mov	r7, r1
 800841a:	bb23      	cbnz	r3, 8008466 <_strtod_l+0xb66>
 800841c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008420:	9010      	str	r0, [sp, #64]	; 0x40
 8008422:	9311      	str	r3, [sp, #68]	; 0x44
 8008424:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008428:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800842c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800842e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008430:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008434:	1a9b      	subs	r3, r3, r2
 8008436:	930f      	str	r3, [sp, #60]	; 0x3c
 8008438:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800843c:	eeb0 0a48 	vmov.f32	s0, s16
 8008440:	eef0 0a68 	vmov.f32	s1, s17
 8008444:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008448:	f7ff f8fc 	bl	8007644 <__ulp>
 800844c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008450:	ec53 2b10 	vmov	r2, r3, d0
 8008454:	f7f8 f8d8 	bl	8000608 <__aeabi_dmul>
 8008458:	ec53 2b18 	vmov	r2, r3, d8
 800845c:	f7f7 ff1e 	bl	800029c <__adddf3>
 8008460:	4680      	mov	r8, r0
 8008462:	4689      	mov	r9, r1
 8008464:	e78d      	b.n	8008382 <_strtod_l+0xa82>
 8008466:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800846a:	e7db      	b.n	8008424 <_strtod_l+0xb24>
 800846c:	a314      	add	r3, pc, #80	; (adr r3, 80084c0 <_strtod_l+0xbc0>)
 800846e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008472:	f7f8 fb3b 	bl	8000aec <__aeabi_dcmplt>
 8008476:	e7b3      	b.n	80083e0 <_strtod_l+0xae0>
 8008478:	2300      	movs	r3, #0
 800847a:	930a      	str	r3, [sp, #40]	; 0x28
 800847c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800847e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008480:	6013      	str	r3, [r2, #0]
 8008482:	f7ff ba7c 	b.w	800797e <_strtod_l+0x7e>
 8008486:	2a65      	cmp	r2, #101	; 0x65
 8008488:	f43f ab75 	beq.w	8007b76 <_strtod_l+0x276>
 800848c:	2a45      	cmp	r2, #69	; 0x45
 800848e:	f43f ab72 	beq.w	8007b76 <_strtod_l+0x276>
 8008492:	2301      	movs	r3, #1
 8008494:	f7ff bbaa 	b.w	8007bec <_strtod_l+0x2ec>
 8008498:	00000000 	.word	0x00000000
 800849c:	bff00000 	.word	0xbff00000
 80084a0:	00000000 	.word	0x00000000
 80084a4:	3ff00000 	.word	0x3ff00000
 80084a8:	94a03595 	.word	0x94a03595
 80084ac:	3fdfffff 	.word	0x3fdfffff
 80084b0:	35afe535 	.word	0x35afe535
 80084b4:	3fe00000 	.word	0x3fe00000
 80084b8:	ffc00000 	.word	0xffc00000
 80084bc:	41dfffff 	.word	0x41dfffff
 80084c0:	94a03595 	.word	0x94a03595
 80084c4:	3fcfffff 	.word	0x3fcfffff
 80084c8:	3ff00000 	.word	0x3ff00000
 80084cc:	3fe00000 	.word	0x3fe00000
 80084d0:	7ff00000 	.word	0x7ff00000
 80084d4:	7fe00000 	.word	0x7fe00000
 80084d8:	7c9fffff 	.word	0x7c9fffff
 80084dc:	7fefffff 	.word	0x7fefffff

080084e0 <_strtod_r>:
 80084e0:	4b01      	ldr	r3, [pc, #4]	; (80084e8 <_strtod_r+0x8>)
 80084e2:	f7ff ba0d 	b.w	8007900 <_strtod_l>
 80084e6:	bf00      	nop
 80084e8:	20000068 	.word	0x20000068

080084ec <_strtol_l.constprop.0>:
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084f2:	d001      	beq.n	80084f8 <_strtol_l.constprop.0+0xc>
 80084f4:	2b24      	cmp	r3, #36	; 0x24
 80084f6:	d906      	bls.n	8008506 <_strtol_l.constprop.0+0x1a>
 80084f8:	f7fd fd8a 	bl	8006010 <__errno>
 80084fc:	2316      	movs	r3, #22
 80084fe:	6003      	str	r3, [r0, #0]
 8008500:	2000      	movs	r0, #0
 8008502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008506:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80085ec <_strtol_l.constprop.0+0x100>
 800850a:	460d      	mov	r5, r1
 800850c:	462e      	mov	r6, r5
 800850e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008512:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008516:	f017 0708 	ands.w	r7, r7, #8
 800851a:	d1f7      	bne.n	800850c <_strtol_l.constprop.0+0x20>
 800851c:	2c2d      	cmp	r4, #45	; 0x2d
 800851e:	d132      	bne.n	8008586 <_strtol_l.constprop.0+0x9a>
 8008520:	782c      	ldrb	r4, [r5, #0]
 8008522:	2701      	movs	r7, #1
 8008524:	1cb5      	adds	r5, r6, #2
 8008526:	2b00      	cmp	r3, #0
 8008528:	d05b      	beq.n	80085e2 <_strtol_l.constprop.0+0xf6>
 800852a:	2b10      	cmp	r3, #16
 800852c:	d109      	bne.n	8008542 <_strtol_l.constprop.0+0x56>
 800852e:	2c30      	cmp	r4, #48	; 0x30
 8008530:	d107      	bne.n	8008542 <_strtol_l.constprop.0+0x56>
 8008532:	782c      	ldrb	r4, [r5, #0]
 8008534:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008538:	2c58      	cmp	r4, #88	; 0x58
 800853a:	d14d      	bne.n	80085d8 <_strtol_l.constprop.0+0xec>
 800853c:	786c      	ldrb	r4, [r5, #1]
 800853e:	2310      	movs	r3, #16
 8008540:	3502      	adds	r5, #2
 8008542:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008546:	f108 38ff 	add.w	r8, r8, #4294967295
 800854a:	f04f 0e00 	mov.w	lr, #0
 800854e:	fbb8 f9f3 	udiv	r9, r8, r3
 8008552:	4676      	mov	r6, lr
 8008554:	fb03 8a19 	mls	sl, r3, r9, r8
 8008558:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800855c:	f1bc 0f09 	cmp.w	ip, #9
 8008560:	d816      	bhi.n	8008590 <_strtol_l.constprop.0+0xa4>
 8008562:	4664      	mov	r4, ip
 8008564:	42a3      	cmp	r3, r4
 8008566:	dd24      	ble.n	80085b2 <_strtol_l.constprop.0+0xc6>
 8008568:	f1be 3fff 	cmp.w	lr, #4294967295
 800856c:	d008      	beq.n	8008580 <_strtol_l.constprop.0+0x94>
 800856e:	45b1      	cmp	r9, r6
 8008570:	d31c      	bcc.n	80085ac <_strtol_l.constprop.0+0xc0>
 8008572:	d101      	bne.n	8008578 <_strtol_l.constprop.0+0x8c>
 8008574:	45a2      	cmp	sl, r4
 8008576:	db19      	blt.n	80085ac <_strtol_l.constprop.0+0xc0>
 8008578:	fb06 4603 	mla	r6, r6, r3, r4
 800857c:	f04f 0e01 	mov.w	lr, #1
 8008580:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008584:	e7e8      	b.n	8008558 <_strtol_l.constprop.0+0x6c>
 8008586:	2c2b      	cmp	r4, #43	; 0x2b
 8008588:	bf04      	itt	eq
 800858a:	782c      	ldrbeq	r4, [r5, #0]
 800858c:	1cb5      	addeq	r5, r6, #2
 800858e:	e7ca      	b.n	8008526 <_strtol_l.constprop.0+0x3a>
 8008590:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008594:	f1bc 0f19 	cmp.w	ip, #25
 8008598:	d801      	bhi.n	800859e <_strtol_l.constprop.0+0xb2>
 800859a:	3c37      	subs	r4, #55	; 0x37
 800859c:	e7e2      	b.n	8008564 <_strtol_l.constprop.0+0x78>
 800859e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80085a2:	f1bc 0f19 	cmp.w	ip, #25
 80085a6:	d804      	bhi.n	80085b2 <_strtol_l.constprop.0+0xc6>
 80085a8:	3c57      	subs	r4, #87	; 0x57
 80085aa:	e7db      	b.n	8008564 <_strtol_l.constprop.0+0x78>
 80085ac:	f04f 3eff 	mov.w	lr, #4294967295
 80085b0:	e7e6      	b.n	8008580 <_strtol_l.constprop.0+0x94>
 80085b2:	f1be 3fff 	cmp.w	lr, #4294967295
 80085b6:	d105      	bne.n	80085c4 <_strtol_l.constprop.0+0xd8>
 80085b8:	2322      	movs	r3, #34	; 0x22
 80085ba:	6003      	str	r3, [r0, #0]
 80085bc:	4646      	mov	r6, r8
 80085be:	b942      	cbnz	r2, 80085d2 <_strtol_l.constprop.0+0xe6>
 80085c0:	4630      	mov	r0, r6
 80085c2:	e79e      	b.n	8008502 <_strtol_l.constprop.0+0x16>
 80085c4:	b107      	cbz	r7, 80085c8 <_strtol_l.constprop.0+0xdc>
 80085c6:	4276      	negs	r6, r6
 80085c8:	2a00      	cmp	r2, #0
 80085ca:	d0f9      	beq.n	80085c0 <_strtol_l.constprop.0+0xd4>
 80085cc:	f1be 0f00 	cmp.w	lr, #0
 80085d0:	d000      	beq.n	80085d4 <_strtol_l.constprop.0+0xe8>
 80085d2:	1e69      	subs	r1, r5, #1
 80085d4:	6011      	str	r1, [r2, #0]
 80085d6:	e7f3      	b.n	80085c0 <_strtol_l.constprop.0+0xd4>
 80085d8:	2430      	movs	r4, #48	; 0x30
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d1b1      	bne.n	8008542 <_strtol_l.constprop.0+0x56>
 80085de:	2308      	movs	r3, #8
 80085e0:	e7af      	b.n	8008542 <_strtol_l.constprop.0+0x56>
 80085e2:	2c30      	cmp	r4, #48	; 0x30
 80085e4:	d0a5      	beq.n	8008532 <_strtol_l.constprop.0+0x46>
 80085e6:	230a      	movs	r3, #10
 80085e8:	e7ab      	b.n	8008542 <_strtol_l.constprop.0+0x56>
 80085ea:	bf00      	nop
 80085ec:	0800b391 	.word	0x0800b391

080085f0 <_strtol_r>:
 80085f0:	f7ff bf7c 	b.w	80084ec <_strtol_l.constprop.0>

080085f4 <__ssputs_r>:
 80085f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085f8:	688e      	ldr	r6, [r1, #8]
 80085fa:	461f      	mov	r7, r3
 80085fc:	42be      	cmp	r6, r7
 80085fe:	680b      	ldr	r3, [r1, #0]
 8008600:	4682      	mov	sl, r0
 8008602:	460c      	mov	r4, r1
 8008604:	4690      	mov	r8, r2
 8008606:	d82c      	bhi.n	8008662 <__ssputs_r+0x6e>
 8008608:	898a      	ldrh	r2, [r1, #12]
 800860a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800860e:	d026      	beq.n	800865e <__ssputs_r+0x6a>
 8008610:	6965      	ldr	r5, [r4, #20]
 8008612:	6909      	ldr	r1, [r1, #16]
 8008614:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008618:	eba3 0901 	sub.w	r9, r3, r1
 800861c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008620:	1c7b      	adds	r3, r7, #1
 8008622:	444b      	add	r3, r9
 8008624:	106d      	asrs	r5, r5, #1
 8008626:	429d      	cmp	r5, r3
 8008628:	bf38      	it	cc
 800862a:	461d      	movcc	r5, r3
 800862c:	0553      	lsls	r3, r2, #21
 800862e:	d527      	bpl.n	8008680 <__ssputs_r+0x8c>
 8008630:	4629      	mov	r1, r5
 8008632:	f7fe fc0f 	bl	8006e54 <_malloc_r>
 8008636:	4606      	mov	r6, r0
 8008638:	b360      	cbz	r0, 8008694 <__ssputs_r+0xa0>
 800863a:	6921      	ldr	r1, [r4, #16]
 800863c:	464a      	mov	r2, r9
 800863e:	f000 fa1b 	bl	8008a78 <memcpy>
 8008642:	89a3      	ldrh	r3, [r4, #12]
 8008644:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800864c:	81a3      	strh	r3, [r4, #12]
 800864e:	6126      	str	r6, [r4, #16]
 8008650:	6165      	str	r5, [r4, #20]
 8008652:	444e      	add	r6, r9
 8008654:	eba5 0509 	sub.w	r5, r5, r9
 8008658:	6026      	str	r6, [r4, #0]
 800865a:	60a5      	str	r5, [r4, #8]
 800865c:	463e      	mov	r6, r7
 800865e:	42be      	cmp	r6, r7
 8008660:	d900      	bls.n	8008664 <__ssputs_r+0x70>
 8008662:	463e      	mov	r6, r7
 8008664:	6820      	ldr	r0, [r4, #0]
 8008666:	4632      	mov	r2, r6
 8008668:	4641      	mov	r1, r8
 800866a:	f000 f9c9 	bl	8008a00 <memmove>
 800866e:	68a3      	ldr	r3, [r4, #8]
 8008670:	1b9b      	subs	r3, r3, r6
 8008672:	60a3      	str	r3, [r4, #8]
 8008674:	6823      	ldr	r3, [r4, #0]
 8008676:	4433      	add	r3, r6
 8008678:	6023      	str	r3, [r4, #0]
 800867a:	2000      	movs	r0, #0
 800867c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008680:	462a      	mov	r2, r5
 8008682:	f000 fdae 	bl	80091e2 <_realloc_r>
 8008686:	4606      	mov	r6, r0
 8008688:	2800      	cmp	r0, #0
 800868a:	d1e0      	bne.n	800864e <__ssputs_r+0x5a>
 800868c:	6921      	ldr	r1, [r4, #16]
 800868e:	4650      	mov	r0, sl
 8008690:	f7fe fb6c 	bl	8006d6c <_free_r>
 8008694:	230c      	movs	r3, #12
 8008696:	f8ca 3000 	str.w	r3, [sl]
 800869a:	89a3      	ldrh	r3, [r4, #12]
 800869c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086a0:	81a3      	strh	r3, [r4, #12]
 80086a2:	f04f 30ff 	mov.w	r0, #4294967295
 80086a6:	e7e9      	b.n	800867c <__ssputs_r+0x88>

080086a8 <_svfiprintf_r>:
 80086a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ac:	4698      	mov	r8, r3
 80086ae:	898b      	ldrh	r3, [r1, #12]
 80086b0:	061b      	lsls	r3, r3, #24
 80086b2:	b09d      	sub	sp, #116	; 0x74
 80086b4:	4607      	mov	r7, r0
 80086b6:	460d      	mov	r5, r1
 80086b8:	4614      	mov	r4, r2
 80086ba:	d50e      	bpl.n	80086da <_svfiprintf_r+0x32>
 80086bc:	690b      	ldr	r3, [r1, #16]
 80086be:	b963      	cbnz	r3, 80086da <_svfiprintf_r+0x32>
 80086c0:	2140      	movs	r1, #64	; 0x40
 80086c2:	f7fe fbc7 	bl	8006e54 <_malloc_r>
 80086c6:	6028      	str	r0, [r5, #0]
 80086c8:	6128      	str	r0, [r5, #16]
 80086ca:	b920      	cbnz	r0, 80086d6 <_svfiprintf_r+0x2e>
 80086cc:	230c      	movs	r3, #12
 80086ce:	603b      	str	r3, [r7, #0]
 80086d0:	f04f 30ff 	mov.w	r0, #4294967295
 80086d4:	e0d0      	b.n	8008878 <_svfiprintf_r+0x1d0>
 80086d6:	2340      	movs	r3, #64	; 0x40
 80086d8:	616b      	str	r3, [r5, #20]
 80086da:	2300      	movs	r3, #0
 80086dc:	9309      	str	r3, [sp, #36]	; 0x24
 80086de:	2320      	movs	r3, #32
 80086e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80086e8:	2330      	movs	r3, #48	; 0x30
 80086ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008890 <_svfiprintf_r+0x1e8>
 80086ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086f2:	f04f 0901 	mov.w	r9, #1
 80086f6:	4623      	mov	r3, r4
 80086f8:	469a      	mov	sl, r3
 80086fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086fe:	b10a      	cbz	r2, 8008704 <_svfiprintf_r+0x5c>
 8008700:	2a25      	cmp	r2, #37	; 0x25
 8008702:	d1f9      	bne.n	80086f8 <_svfiprintf_r+0x50>
 8008704:	ebba 0b04 	subs.w	fp, sl, r4
 8008708:	d00b      	beq.n	8008722 <_svfiprintf_r+0x7a>
 800870a:	465b      	mov	r3, fp
 800870c:	4622      	mov	r2, r4
 800870e:	4629      	mov	r1, r5
 8008710:	4638      	mov	r0, r7
 8008712:	f7ff ff6f 	bl	80085f4 <__ssputs_r>
 8008716:	3001      	adds	r0, #1
 8008718:	f000 80a9 	beq.w	800886e <_svfiprintf_r+0x1c6>
 800871c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800871e:	445a      	add	r2, fp
 8008720:	9209      	str	r2, [sp, #36]	; 0x24
 8008722:	f89a 3000 	ldrb.w	r3, [sl]
 8008726:	2b00      	cmp	r3, #0
 8008728:	f000 80a1 	beq.w	800886e <_svfiprintf_r+0x1c6>
 800872c:	2300      	movs	r3, #0
 800872e:	f04f 32ff 	mov.w	r2, #4294967295
 8008732:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008736:	f10a 0a01 	add.w	sl, sl, #1
 800873a:	9304      	str	r3, [sp, #16]
 800873c:	9307      	str	r3, [sp, #28]
 800873e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008742:	931a      	str	r3, [sp, #104]	; 0x68
 8008744:	4654      	mov	r4, sl
 8008746:	2205      	movs	r2, #5
 8008748:	f814 1b01 	ldrb.w	r1, [r4], #1
 800874c:	4850      	ldr	r0, [pc, #320]	; (8008890 <_svfiprintf_r+0x1e8>)
 800874e:	f7f7 fd47 	bl	80001e0 <memchr>
 8008752:	9a04      	ldr	r2, [sp, #16]
 8008754:	b9d8      	cbnz	r0, 800878e <_svfiprintf_r+0xe6>
 8008756:	06d0      	lsls	r0, r2, #27
 8008758:	bf44      	itt	mi
 800875a:	2320      	movmi	r3, #32
 800875c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008760:	0711      	lsls	r1, r2, #28
 8008762:	bf44      	itt	mi
 8008764:	232b      	movmi	r3, #43	; 0x2b
 8008766:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800876a:	f89a 3000 	ldrb.w	r3, [sl]
 800876e:	2b2a      	cmp	r3, #42	; 0x2a
 8008770:	d015      	beq.n	800879e <_svfiprintf_r+0xf6>
 8008772:	9a07      	ldr	r2, [sp, #28]
 8008774:	4654      	mov	r4, sl
 8008776:	2000      	movs	r0, #0
 8008778:	f04f 0c0a 	mov.w	ip, #10
 800877c:	4621      	mov	r1, r4
 800877e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008782:	3b30      	subs	r3, #48	; 0x30
 8008784:	2b09      	cmp	r3, #9
 8008786:	d94d      	bls.n	8008824 <_svfiprintf_r+0x17c>
 8008788:	b1b0      	cbz	r0, 80087b8 <_svfiprintf_r+0x110>
 800878a:	9207      	str	r2, [sp, #28]
 800878c:	e014      	b.n	80087b8 <_svfiprintf_r+0x110>
 800878e:	eba0 0308 	sub.w	r3, r0, r8
 8008792:	fa09 f303 	lsl.w	r3, r9, r3
 8008796:	4313      	orrs	r3, r2
 8008798:	9304      	str	r3, [sp, #16]
 800879a:	46a2      	mov	sl, r4
 800879c:	e7d2      	b.n	8008744 <_svfiprintf_r+0x9c>
 800879e:	9b03      	ldr	r3, [sp, #12]
 80087a0:	1d19      	adds	r1, r3, #4
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	9103      	str	r1, [sp, #12]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	bfbb      	ittet	lt
 80087aa:	425b      	neglt	r3, r3
 80087ac:	f042 0202 	orrlt.w	r2, r2, #2
 80087b0:	9307      	strge	r3, [sp, #28]
 80087b2:	9307      	strlt	r3, [sp, #28]
 80087b4:	bfb8      	it	lt
 80087b6:	9204      	strlt	r2, [sp, #16]
 80087b8:	7823      	ldrb	r3, [r4, #0]
 80087ba:	2b2e      	cmp	r3, #46	; 0x2e
 80087bc:	d10c      	bne.n	80087d8 <_svfiprintf_r+0x130>
 80087be:	7863      	ldrb	r3, [r4, #1]
 80087c0:	2b2a      	cmp	r3, #42	; 0x2a
 80087c2:	d134      	bne.n	800882e <_svfiprintf_r+0x186>
 80087c4:	9b03      	ldr	r3, [sp, #12]
 80087c6:	1d1a      	adds	r2, r3, #4
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	9203      	str	r2, [sp, #12]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	bfb8      	it	lt
 80087d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80087d4:	3402      	adds	r4, #2
 80087d6:	9305      	str	r3, [sp, #20]
 80087d8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80088a0 <_svfiprintf_r+0x1f8>
 80087dc:	7821      	ldrb	r1, [r4, #0]
 80087de:	2203      	movs	r2, #3
 80087e0:	4650      	mov	r0, sl
 80087e2:	f7f7 fcfd 	bl	80001e0 <memchr>
 80087e6:	b138      	cbz	r0, 80087f8 <_svfiprintf_r+0x150>
 80087e8:	9b04      	ldr	r3, [sp, #16]
 80087ea:	eba0 000a 	sub.w	r0, r0, sl
 80087ee:	2240      	movs	r2, #64	; 0x40
 80087f0:	4082      	lsls	r2, r0
 80087f2:	4313      	orrs	r3, r2
 80087f4:	3401      	adds	r4, #1
 80087f6:	9304      	str	r3, [sp, #16]
 80087f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087fc:	4825      	ldr	r0, [pc, #148]	; (8008894 <_svfiprintf_r+0x1ec>)
 80087fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008802:	2206      	movs	r2, #6
 8008804:	f7f7 fcec 	bl	80001e0 <memchr>
 8008808:	2800      	cmp	r0, #0
 800880a:	d038      	beq.n	800887e <_svfiprintf_r+0x1d6>
 800880c:	4b22      	ldr	r3, [pc, #136]	; (8008898 <_svfiprintf_r+0x1f0>)
 800880e:	bb1b      	cbnz	r3, 8008858 <_svfiprintf_r+0x1b0>
 8008810:	9b03      	ldr	r3, [sp, #12]
 8008812:	3307      	adds	r3, #7
 8008814:	f023 0307 	bic.w	r3, r3, #7
 8008818:	3308      	adds	r3, #8
 800881a:	9303      	str	r3, [sp, #12]
 800881c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800881e:	4433      	add	r3, r6
 8008820:	9309      	str	r3, [sp, #36]	; 0x24
 8008822:	e768      	b.n	80086f6 <_svfiprintf_r+0x4e>
 8008824:	fb0c 3202 	mla	r2, ip, r2, r3
 8008828:	460c      	mov	r4, r1
 800882a:	2001      	movs	r0, #1
 800882c:	e7a6      	b.n	800877c <_svfiprintf_r+0xd4>
 800882e:	2300      	movs	r3, #0
 8008830:	3401      	adds	r4, #1
 8008832:	9305      	str	r3, [sp, #20]
 8008834:	4619      	mov	r1, r3
 8008836:	f04f 0c0a 	mov.w	ip, #10
 800883a:	4620      	mov	r0, r4
 800883c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008840:	3a30      	subs	r2, #48	; 0x30
 8008842:	2a09      	cmp	r2, #9
 8008844:	d903      	bls.n	800884e <_svfiprintf_r+0x1a6>
 8008846:	2b00      	cmp	r3, #0
 8008848:	d0c6      	beq.n	80087d8 <_svfiprintf_r+0x130>
 800884a:	9105      	str	r1, [sp, #20]
 800884c:	e7c4      	b.n	80087d8 <_svfiprintf_r+0x130>
 800884e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008852:	4604      	mov	r4, r0
 8008854:	2301      	movs	r3, #1
 8008856:	e7f0      	b.n	800883a <_svfiprintf_r+0x192>
 8008858:	ab03      	add	r3, sp, #12
 800885a:	9300      	str	r3, [sp, #0]
 800885c:	462a      	mov	r2, r5
 800885e:	4b0f      	ldr	r3, [pc, #60]	; (800889c <_svfiprintf_r+0x1f4>)
 8008860:	a904      	add	r1, sp, #16
 8008862:	4638      	mov	r0, r7
 8008864:	f7fc fc98 	bl	8005198 <_printf_float>
 8008868:	1c42      	adds	r2, r0, #1
 800886a:	4606      	mov	r6, r0
 800886c:	d1d6      	bne.n	800881c <_svfiprintf_r+0x174>
 800886e:	89ab      	ldrh	r3, [r5, #12]
 8008870:	065b      	lsls	r3, r3, #25
 8008872:	f53f af2d 	bmi.w	80086d0 <_svfiprintf_r+0x28>
 8008876:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008878:	b01d      	add	sp, #116	; 0x74
 800887a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800887e:	ab03      	add	r3, sp, #12
 8008880:	9300      	str	r3, [sp, #0]
 8008882:	462a      	mov	r2, r5
 8008884:	4b05      	ldr	r3, [pc, #20]	; (800889c <_svfiprintf_r+0x1f4>)
 8008886:	a904      	add	r1, sp, #16
 8008888:	4638      	mov	r0, r7
 800888a:	f7fc ff29 	bl	80056e0 <_printf_i>
 800888e:	e7eb      	b.n	8008868 <_svfiprintf_r+0x1c0>
 8008890:	0800b491 	.word	0x0800b491
 8008894:	0800b49b 	.word	0x0800b49b
 8008898:	08005199 	.word	0x08005199
 800889c:	080085f5 	.word	0x080085f5
 80088a0:	0800b497 	.word	0x0800b497

080088a4 <__sflush_r>:
 80088a4:	898a      	ldrh	r2, [r1, #12]
 80088a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088aa:	4605      	mov	r5, r0
 80088ac:	0710      	lsls	r0, r2, #28
 80088ae:	460c      	mov	r4, r1
 80088b0:	d458      	bmi.n	8008964 <__sflush_r+0xc0>
 80088b2:	684b      	ldr	r3, [r1, #4]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	dc05      	bgt.n	80088c4 <__sflush_r+0x20>
 80088b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	dc02      	bgt.n	80088c4 <__sflush_r+0x20>
 80088be:	2000      	movs	r0, #0
 80088c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088c6:	2e00      	cmp	r6, #0
 80088c8:	d0f9      	beq.n	80088be <__sflush_r+0x1a>
 80088ca:	2300      	movs	r3, #0
 80088cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80088d0:	682f      	ldr	r7, [r5, #0]
 80088d2:	6a21      	ldr	r1, [r4, #32]
 80088d4:	602b      	str	r3, [r5, #0]
 80088d6:	d032      	beq.n	800893e <__sflush_r+0x9a>
 80088d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80088da:	89a3      	ldrh	r3, [r4, #12]
 80088dc:	075a      	lsls	r2, r3, #29
 80088de:	d505      	bpl.n	80088ec <__sflush_r+0x48>
 80088e0:	6863      	ldr	r3, [r4, #4]
 80088e2:	1ac0      	subs	r0, r0, r3
 80088e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088e6:	b10b      	cbz	r3, 80088ec <__sflush_r+0x48>
 80088e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088ea:	1ac0      	subs	r0, r0, r3
 80088ec:	2300      	movs	r3, #0
 80088ee:	4602      	mov	r2, r0
 80088f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088f2:	6a21      	ldr	r1, [r4, #32]
 80088f4:	4628      	mov	r0, r5
 80088f6:	47b0      	blx	r6
 80088f8:	1c43      	adds	r3, r0, #1
 80088fa:	89a3      	ldrh	r3, [r4, #12]
 80088fc:	d106      	bne.n	800890c <__sflush_r+0x68>
 80088fe:	6829      	ldr	r1, [r5, #0]
 8008900:	291d      	cmp	r1, #29
 8008902:	d82b      	bhi.n	800895c <__sflush_r+0xb8>
 8008904:	4a29      	ldr	r2, [pc, #164]	; (80089ac <__sflush_r+0x108>)
 8008906:	410a      	asrs	r2, r1
 8008908:	07d6      	lsls	r6, r2, #31
 800890a:	d427      	bmi.n	800895c <__sflush_r+0xb8>
 800890c:	2200      	movs	r2, #0
 800890e:	6062      	str	r2, [r4, #4]
 8008910:	04d9      	lsls	r1, r3, #19
 8008912:	6922      	ldr	r2, [r4, #16]
 8008914:	6022      	str	r2, [r4, #0]
 8008916:	d504      	bpl.n	8008922 <__sflush_r+0x7e>
 8008918:	1c42      	adds	r2, r0, #1
 800891a:	d101      	bne.n	8008920 <__sflush_r+0x7c>
 800891c:	682b      	ldr	r3, [r5, #0]
 800891e:	b903      	cbnz	r3, 8008922 <__sflush_r+0x7e>
 8008920:	6560      	str	r0, [r4, #84]	; 0x54
 8008922:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008924:	602f      	str	r7, [r5, #0]
 8008926:	2900      	cmp	r1, #0
 8008928:	d0c9      	beq.n	80088be <__sflush_r+0x1a>
 800892a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800892e:	4299      	cmp	r1, r3
 8008930:	d002      	beq.n	8008938 <__sflush_r+0x94>
 8008932:	4628      	mov	r0, r5
 8008934:	f7fe fa1a 	bl	8006d6c <_free_r>
 8008938:	2000      	movs	r0, #0
 800893a:	6360      	str	r0, [r4, #52]	; 0x34
 800893c:	e7c0      	b.n	80088c0 <__sflush_r+0x1c>
 800893e:	2301      	movs	r3, #1
 8008940:	4628      	mov	r0, r5
 8008942:	47b0      	blx	r6
 8008944:	1c41      	adds	r1, r0, #1
 8008946:	d1c8      	bne.n	80088da <__sflush_r+0x36>
 8008948:	682b      	ldr	r3, [r5, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d0c5      	beq.n	80088da <__sflush_r+0x36>
 800894e:	2b1d      	cmp	r3, #29
 8008950:	d001      	beq.n	8008956 <__sflush_r+0xb2>
 8008952:	2b16      	cmp	r3, #22
 8008954:	d101      	bne.n	800895a <__sflush_r+0xb6>
 8008956:	602f      	str	r7, [r5, #0]
 8008958:	e7b1      	b.n	80088be <__sflush_r+0x1a>
 800895a:	89a3      	ldrh	r3, [r4, #12]
 800895c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008960:	81a3      	strh	r3, [r4, #12]
 8008962:	e7ad      	b.n	80088c0 <__sflush_r+0x1c>
 8008964:	690f      	ldr	r7, [r1, #16]
 8008966:	2f00      	cmp	r7, #0
 8008968:	d0a9      	beq.n	80088be <__sflush_r+0x1a>
 800896a:	0793      	lsls	r3, r2, #30
 800896c:	680e      	ldr	r6, [r1, #0]
 800896e:	bf08      	it	eq
 8008970:	694b      	ldreq	r3, [r1, #20]
 8008972:	600f      	str	r7, [r1, #0]
 8008974:	bf18      	it	ne
 8008976:	2300      	movne	r3, #0
 8008978:	eba6 0807 	sub.w	r8, r6, r7
 800897c:	608b      	str	r3, [r1, #8]
 800897e:	f1b8 0f00 	cmp.w	r8, #0
 8008982:	dd9c      	ble.n	80088be <__sflush_r+0x1a>
 8008984:	6a21      	ldr	r1, [r4, #32]
 8008986:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008988:	4643      	mov	r3, r8
 800898a:	463a      	mov	r2, r7
 800898c:	4628      	mov	r0, r5
 800898e:	47b0      	blx	r6
 8008990:	2800      	cmp	r0, #0
 8008992:	dc06      	bgt.n	80089a2 <__sflush_r+0xfe>
 8008994:	89a3      	ldrh	r3, [r4, #12]
 8008996:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800899a:	81a3      	strh	r3, [r4, #12]
 800899c:	f04f 30ff 	mov.w	r0, #4294967295
 80089a0:	e78e      	b.n	80088c0 <__sflush_r+0x1c>
 80089a2:	4407      	add	r7, r0
 80089a4:	eba8 0800 	sub.w	r8, r8, r0
 80089a8:	e7e9      	b.n	800897e <__sflush_r+0xda>
 80089aa:	bf00      	nop
 80089ac:	dfbffffe 	.word	0xdfbffffe

080089b0 <_fflush_r>:
 80089b0:	b538      	push	{r3, r4, r5, lr}
 80089b2:	690b      	ldr	r3, [r1, #16]
 80089b4:	4605      	mov	r5, r0
 80089b6:	460c      	mov	r4, r1
 80089b8:	b913      	cbnz	r3, 80089c0 <_fflush_r+0x10>
 80089ba:	2500      	movs	r5, #0
 80089bc:	4628      	mov	r0, r5
 80089be:	bd38      	pop	{r3, r4, r5, pc}
 80089c0:	b118      	cbz	r0, 80089ca <_fflush_r+0x1a>
 80089c2:	6a03      	ldr	r3, [r0, #32]
 80089c4:	b90b      	cbnz	r3, 80089ca <_fflush_r+0x1a>
 80089c6:	f7fd fa37 	bl	8005e38 <__sinit>
 80089ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d0f3      	beq.n	80089ba <_fflush_r+0xa>
 80089d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80089d4:	07d0      	lsls	r0, r2, #31
 80089d6:	d404      	bmi.n	80089e2 <_fflush_r+0x32>
 80089d8:	0599      	lsls	r1, r3, #22
 80089da:	d402      	bmi.n	80089e2 <_fflush_r+0x32>
 80089dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089de:	f7fd fb41 	bl	8006064 <__retarget_lock_acquire_recursive>
 80089e2:	4628      	mov	r0, r5
 80089e4:	4621      	mov	r1, r4
 80089e6:	f7ff ff5d 	bl	80088a4 <__sflush_r>
 80089ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089ec:	07da      	lsls	r2, r3, #31
 80089ee:	4605      	mov	r5, r0
 80089f0:	d4e4      	bmi.n	80089bc <_fflush_r+0xc>
 80089f2:	89a3      	ldrh	r3, [r4, #12]
 80089f4:	059b      	lsls	r3, r3, #22
 80089f6:	d4e1      	bmi.n	80089bc <_fflush_r+0xc>
 80089f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089fa:	f7fd fb34 	bl	8006066 <__retarget_lock_release_recursive>
 80089fe:	e7dd      	b.n	80089bc <_fflush_r+0xc>

08008a00 <memmove>:
 8008a00:	4288      	cmp	r0, r1
 8008a02:	b510      	push	{r4, lr}
 8008a04:	eb01 0402 	add.w	r4, r1, r2
 8008a08:	d902      	bls.n	8008a10 <memmove+0x10>
 8008a0a:	4284      	cmp	r4, r0
 8008a0c:	4623      	mov	r3, r4
 8008a0e:	d807      	bhi.n	8008a20 <memmove+0x20>
 8008a10:	1e43      	subs	r3, r0, #1
 8008a12:	42a1      	cmp	r1, r4
 8008a14:	d008      	beq.n	8008a28 <memmove+0x28>
 8008a16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a1e:	e7f8      	b.n	8008a12 <memmove+0x12>
 8008a20:	4402      	add	r2, r0
 8008a22:	4601      	mov	r1, r0
 8008a24:	428a      	cmp	r2, r1
 8008a26:	d100      	bne.n	8008a2a <memmove+0x2a>
 8008a28:	bd10      	pop	{r4, pc}
 8008a2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a32:	e7f7      	b.n	8008a24 <memmove+0x24>

08008a34 <strncmp>:
 8008a34:	b510      	push	{r4, lr}
 8008a36:	b16a      	cbz	r2, 8008a54 <strncmp+0x20>
 8008a38:	3901      	subs	r1, #1
 8008a3a:	1884      	adds	r4, r0, r2
 8008a3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a40:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d103      	bne.n	8008a50 <strncmp+0x1c>
 8008a48:	42a0      	cmp	r0, r4
 8008a4a:	d001      	beq.n	8008a50 <strncmp+0x1c>
 8008a4c:	2a00      	cmp	r2, #0
 8008a4e:	d1f5      	bne.n	8008a3c <strncmp+0x8>
 8008a50:	1ad0      	subs	r0, r2, r3
 8008a52:	bd10      	pop	{r4, pc}
 8008a54:	4610      	mov	r0, r2
 8008a56:	e7fc      	b.n	8008a52 <strncmp+0x1e>

08008a58 <_sbrk_r>:
 8008a58:	b538      	push	{r3, r4, r5, lr}
 8008a5a:	4d06      	ldr	r5, [pc, #24]	; (8008a74 <_sbrk_r+0x1c>)
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	4604      	mov	r4, r0
 8008a60:	4608      	mov	r0, r1
 8008a62:	602b      	str	r3, [r5, #0]
 8008a64:	f7f9 faee 	bl	8002044 <_sbrk>
 8008a68:	1c43      	adds	r3, r0, #1
 8008a6a:	d102      	bne.n	8008a72 <_sbrk_r+0x1a>
 8008a6c:	682b      	ldr	r3, [r5, #0]
 8008a6e:	b103      	cbz	r3, 8008a72 <_sbrk_r+0x1a>
 8008a70:	6023      	str	r3, [r4, #0]
 8008a72:	bd38      	pop	{r3, r4, r5, pc}
 8008a74:	20000424 	.word	0x20000424

08008a78 <memcpy>:
 8008a78:	440a      	add	r2, r1
 8008a7a:	4291      	cmp	r1, r2
 8008a7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a80:	d100      	bne.n	8008a84 <memcpy+0xc>
 8008a82:	4770      	bx	lr
 8008a84:	b510      	push	{r4, lr}
 8008a86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a8e:	4291      	cmp	r1, r2
 8008a90:	d1f9      	bne.n	8008a86 <memcpy+0xe>
 8008a92:	bd10      	pop	{r4, pc}
 8008a94:	0000      	movs	r0, r0
	...

08008a98 <nan>:
 8008a98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008aa0 <nan+0x8>
 8008a9c:	4770      	bx	lr
 8008a9e:	bf00      	nop
 8008aa0:	00000000 	.word	0x00000000
 8008aa4:	7ff80000 	.word	0x7ff80000

08008aa8 <__assert_func>:
 8008aa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008aaa:	4614      	mov	r4, r2
 8008aac:	461a      	mov	r2, r3
 8008aae:	4b09      	ldr	r3, [pc, #36]	; (8008ad4 <__assert_func+0x2c>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4605      	mov	r5, r0
 8008ab4:	68d8      	ldr	r0, [r3, #12]
 8008ab6:	b14c      	cbz	r4, 8008acc <__assert_func+0x24>
 8008ab8:	4b07      	ldr	r3, [pc, #28]	; (8008ad8 <__assert_func+0x30>)
 8008aba:	9100      	str	r1, [sp, #0]
 8008abc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ac0:	4906      	ldr	r1, [pc, #24]	; (8008adc <__assert_func+0x34>)
 8008ac2:	462b      	mov	r3, r5
 8008ac4:	f000 fbca 	bl	800925c <fiprintf>
 8008ac8:	f000 fbda 	bl	8009280 <abort>
 8008acc:	4b04      	ldr	r3, [pc, #16]	; (8008ae0 <__assert_func+0x38>)
 8008ace:	461c      	mov	r4, r3
 8008ad0:	e7f3      	b.n	8008aba <__assert_func+0x12>
 8008ad2:	bf00      	nop
 8008ad4:	20000064 	.word	0x20000064
 8008ad8:	0800b4aa 	.word	0x0800b4aa
 8008adc:	0800b4b7 	.word	0x0800b4b7
 8008ae0:	0800b4e5 	.word	0x0800b4e5

08008ae4 <_calloc_r>:
 8008ae4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ae6:	fba1 2402 	umull	r2, r4, r1, r2
 8008aea:	b94c      	cbnz	r4, 8008b00 <_calloc_r+0x1c>
 8008aec:	4611      	mov	r1, r2
 8008aee:	9201      	str	r2, [sp, #4]
 8008af0:	f7fe f9b0 	bl	8006e54 <_malloc_r>
 8008af4:	9a01      	ldr	r2, [sp, #4]
 8008af6:	4605      	mov	r5, r0
 8008af8:	b930      	cbnz	r0, 8008b08 <_calloc_r+0x24>
 8008afa:	4628      	mov	r0, r5
 8008afc:	b003      	add	sp, #12
 8008afe:	bd30      	pop	{r4, r5, pc}
 8008b00:	220c      	movs	r2, #12
 8008b02:	6002      	str	r2, [r0, #0]
 8008b04:	2500      	movs	r5, #0
 8008b06:	e7f8      	b.n	8008afa <_calloc_r+0x16>
 8008b08:	4621      	mov	r1, r4
 8008b0a:	f7fd fa2e 	bl	8005f6a <memset>
 8008b0e:	e7f4      	b.n	8008afa <_calloc_r+0x16>

08008b10 <rshift>:
 8008b10:	6903      	ldr	r3, [r0, #16]
 8008b12:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008b16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b1a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008b1e:	f100 0414 	add.w	r4, r0, #20
 8008b22:	dd45      	ble.n	8008bb0 <rshift+0xa0>
 8008b24:	f011 011f 	ands.w	r1, r1, #31
 8008b28:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008b2c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008b30:	d10c      	bne.n	8008b4c <rshift+0x3c>
 8008b32:	f100 0710 	add.w	r7, r0, #16
 8008b36:	4629      	mov	r1, r5
 8008b38:	42b1      	cmp	r1, r6
 8008b3a:	d334      	bcc.n	8008ba6 <rshift+0x96>
 8008b3c:	1a9b      	subs	r3, r3, r2
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	1eea      	subs	r2, r5, #3
 8008b42:	4296      	cmp	r6, r2
 8008b44:	bf38      	it	cc
 8008b46:	2300      	movcc	r3, #0
 8008b48:	4423      	add	r3, r4
 8008b4a:	e015      	b.n	8008b78 <rshift+0x68>
 8008b4c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008b50:	f1c1 0820 	rsb	r8, r1, #32
 8008b54:	40cf      	lsrs	r7, r1
 8008b56:	f105 0e04 	add.w	lr, r5, #4
 8008b5a:	46a1      	mov	r9, r4
 8008b5c:	4576      	cmp	r6, lr
 8008b5e:	46f4      	mov	ip, lr
 8008b60:	d815      	bhi.n	8008b8e <rshift+0x7e>
 8008b62:	1a9a      	subs	r2, r3, r2
 8008b64:	0092      	lsls	r2, r2, #2
 8008b66:	3a04      	subs	r2, #4
 8008b68:	3501      	adds	r5, #1
 8008b6a:	42ae      	cmp	r6, r5
 8008b6c:	bf38      	it	cc
 8008b6e:	2200      	movcc	r2, #0
 8008b70:	18a3      	adds	r3, r4, r2
 8008b72:	50a7      	str	r7, [r4, r2]
 8008b74:	b107      	cbz	r7, 8008b78 <rshift+0x68>
 8008b76:	3304      	adds	r3, #4
 8008b78:	1b1a      	subs	r2, r3, r4
 8008b7a:	42a3      	cmp	r3, r4
 8008b7c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008b80:	bf08      	it	eq
 8008b82:	2300      	moveq	r3, #0
 8008b84:	6102      	str	r2, [r0, #16]
 8008b86:	bf08      	it	eq
 8008b88:	6143      	streq	r3, [r0, #20]
 8008b8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b8e:	f8dc c000 	ldr.w	ip, [ip]
 8008b92:	fa0c fc08 	lsl.w	ip, ip, r8
 8008b96:	ea4c 0707 	orr.w	r7, ip, r7
 8008b9a:	f849 7b04 	str.w	r7, [r9], #4
 8008b9e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008ba2:	40cf      	lsrs	r7, r1
 8008ba4:	e7da      	b.n	8008b5c <rshift+0x4c>
 8008ba6:	f851 cb04 	ldr.w	ip, [r1], #4
 8008baa:	f847 cf04 	str.w	ip, [r7, #4]!
 8008bae:	e7c3      	b.n	8008b38 <rshift+0x28>
 8008bb0:	4623      	mov	r3, r4
 8008bb2:	e7e1      	b.n	8008b78 <rshift+0x68>

08008bb4 <__hexdig_fun>:
 8008bb4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008bb8:	2b09      	cmp	r3, #9
 8008bba:	d802      	bhi.n	8008bc2 <__hexdig_fun+0xe>
 8008bbc:	3820      	subs	r0, #32
 8008bbe:	b2c0      	uxtb	r0, r0
 8008bc0:	4770      	bx	lr
 8008bc2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008bc6:	2b05      	cmp	r3, #5
 8008bc8:	d801      	bhi.n	8008bce <__hexdig_fun+0x1a>
 8008bca:	3847      	subs	r0, #71	; 0x47
 8008bcc:	e7f7      	b.n	8008bbe <__hexdig_fun+0xa>
 8008bce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008bd2:	2b05      	cmp	r3, #5
 8008bd4:	d801      	bhi.n	8008bda <__hexdig_fun+0x26>
 8008bd6:	3827      	subs	r0, #39	; 0x27
 8008bd8:	e7f1      	b.n	8008bbe <__hexdig_fun+0xa>
 8008bda:	2000      	movs	r0, #0
 8008bdc:	4770      	bx	lr
	...

08008be0 <__gethex>:
 8008be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be4:	4617      	mov	r7, r2
 8008be6:	680a      	ldr	r2, [r1, #0]
 8008be8:	b085      	sub	sp, #20
 8008bea:	f102 0b02 	add.w	fp, r2, #2
 8008bee:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008bf2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008bf6:	4681      	mov	r9, r0
 8008bf8:	468a      	mov	sl, r1
 8008bfa:	9302      	str	r3, [sp, #8]
 8008bfc:	32fe      	adds	r2, #254	; 0xfe
 8008bfe:	eb02 030b 	add.w	r3, r2, fp
 8008c02:	46d8      	mov	r8, fp
 8008c04:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008c08:	9301      	str	r3, [sp, #4]
 8008c0a:	2830      	cmp	r0, #48	; 0x30
 8008c0c:	d0f7      	beq.n	8008bfe <__gethex+0x1e>
 8008c0e:	f7ff ffd1 	bl	8008bb4 <__hexdig_fun>
 8008c12:	4604      	mov	r4, r0
 8008c14:	2800      	cmp	r0, #0
 8008c16:	d138      	bne.n	8008c8a <__gethex+0xaa>
 8008c18:	49a7      	ldr	r1, [pc, #668]	; (8008eb8 <__gethex+0x2d8>)
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	4640      	mov	r0, r8
 8008c1e:	f7ff ff09 	bl	8008a34 <strncmp>
 8008c22:	4606      	mov	r6, r0
 8008c24:	2800      	cmp	r0, #0
 8008c26:	d169      	bne.n	8008cfc <__gethex+0x11c>
 8008c28:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008c2c:	465d      	mov	r5, fp
 8008c2e:	f7ff ffc1 	bl	8008bb4 <__hexdig_fun>
 8008c32:	2800      	cmp	r0, #0
 8008c34:	d064      	beq.n	8008d00 <__gethex+0x120>
 8008c36:	465a      	mov	r2, fp
 8008c38:	7810      	ldrb	r0, [r2, #0]
 8008c3a:	2830      	cmp	r0, #48	; 0x30
 8008c3c:	4690      	mov	r8, r2
 8008c3e:	f102 0201 	add.w	r2, r2, #1
 8008c42:	d0f9      	beq.n	8008c38 <__gethex+0x58>
 8008c44:	f7ff ffb6 	bl	8008bb4 <__hexdig_fun>
 8008c48:	2301      	movs	r3, #1
 8008c4a:	fab0 f480 	clz	r4, r0
 8008c4e:	0964      	lsrs	r4, r4, #5
 8008c50:	465e      	mov	r6, fp
 8008c52:	9301      	str	r3, [sp, #4]
 8008c54:	4642      	mov	r2, r8
 8008c56:	4615      	mov	r5, r2
 8008c58:	3201      	adds	r2, #1
 8008c5a:	7828      	ldrb	r0, [r5, #0]
 8008c5c:	f7ff ffaa 	bl	8008bb4 <__hexdig_fun>
 8008c60:	2800      	cmp	r0, #0
 8008c62:	d1f8      	bne.n	8008c56 <__gethex+0x76>
 8008c64:	4994      	ldr	r1, [pc, #592]	; (8008eb8 <__gethex+0x2d8>)
 8008c66:	2201      	movs	r2, #1
 8008c68:	4628      	mov	r0, r5
 8008c6a:	f7ff fee3 	bl	8008a34 <strncmp>
 8008c6e:	b978      	cbnz	r0, 8008c90 <__gethex+0xb0>
 8008c70:	b946      	cbnz	r6, 8008c84 <__gethex+0xa4>
 8008c72:	1c6e      	adds	r6, r5, #1
 8008c74:	4632      	mov	r2, r6
 8008c76:	4615      	mov	r5, r2
 8008c78:	3201      	adds	r2, #1
 8008c7a:	7828      	ldrb	r0, [r5, #0]
 8008c7c:	f7ff ff9a 	bl	8008bb4 <__hexdig_fun>
 8008c80:	2800      	cmp	r0, #0
 8008c82:	d1f8      	bne.n	8008c76 <__gethex+0x96>
 8008c84:	1b73      	subs	r3, r6, r5
 8008c86:	009e      	lsls	r6, r3, #2
 8008c88:	e004      	b.n	8008c94 <__gethex+0xb4>
 8008c8a:	2400      	movs	r4, #0
 8008c8c:	4626      	mov	r6, r4
 8008c8e:	e7e1      	b.n	8008c54 <__gethex+0x74>
 8008c90:	2e00      	cmp	r6, #0
 8008c92:	d1f7      	bne.n	8008c84 <__gethex+0xa4>
 8008c94:	782b      	ldrb	r3, [r5, #0]
 8008c96:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008c9a:	2b50      	cmp	r3, #80	; 0x50
 8008c9c:	d13d      	bne.n	8008d1a <__gethex+0x13a>
 8008c9e:	786b      	ldrb	r3, [r5, #1]
 8008ca0:	2b2b      	cmp	r3, #43	; 0x2b
 8008ca2:	d02f      	beq.n	8008d04 <__gethex+0x124>
 8008ca4:	2b2d      	cmp	r3, #45	; 0x2d
 8008ca6:	d031      	beq.n	8008d0c <__gethex+0x12c>
 8008ca8:	1c69      	adds	r1, r5, #1
 8008caa:	f04f 0b00 	mov.w	fp, #0
 8008cae:	7808      	ldrb	r0, [r1, #0]
 8008cb0:	f7ff ff80 	bl	8008bb4 <__hexdig_fun>
 8008cb4:	1e42      	subs	r2, r0, #1
 8008cb6:	b2d2      	uxtb	r2, r2
 8008cb8:	2a18      	cmp	r2, #24
 8008cba:	d82e      	bhi.n	8008d1a <__gethex+0x13a>
 8008cbc:	f1a0 0210 	sub.w	r2, r0, #16
 8008cc0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008cc4:	f7ff ff76 	bl	8008bb4 <__hexdig_fun>
 8008cc8:	f100 3cff 	add.w	ip, r0, #4294967295
 8008ccc:	fa5f fc8c 	uxtb.w	ip, ip
 8008cd0:	f1bc 0f18 	cmp.w	ip, #24
 8008cd4:	d91d      	bls.n	8008d12 <__gethex+0x132>
 8008cd6:	f1bb 0f00 	cmp.w	fp, #0
 8008cda:	d000      	beq.n	8008cde <__gethex+0xfe>
 8008cdc:	4252      	negs	r2, r2
 8008cde:	4416      	add	r6, r2
 8008ce0:	f8ca 1000 	str.w	r1, [sl]
 8008ce4:	b1dc      	cbz	r4, 8008d1e <__gethex+0x13e>
 8008ce6:	9b01      	ldr	r3, [sp, #4]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	bf14      	ite	ne
 8008cec:	f04f 0800 	movne.w	r8, #0
 8008cf0:	f04f 0806 	moveq.w	r8, #6
 8008cf4:	4640      	mov	r0, r8
 8008cf6:	b005      	add	sp, #20
 8008cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cfc:	4645      	mov	r5, r8
 8008cfe:	4626      	mov	r6, r4
 8008d00:	2401      	movs	r4, #1
 8008d02:	e7c7      	b.n	8008c94 <__gethex+0xb4>
 8008d04:	f04f 0b00 	mov.w	fp, #0
 8008d08:	1ca9      	adds	r1, r5, #2
 8008d0a:	e7d0      	b.n	8008cae <__gethex+0xce>
 8008d0c:	f04f 0b01 	mov.w	fp, #1
 8008d10:	e7fa      	b.n	8008d08 <__gethex+0x128>
 8008d12:	230a      	movs	r3, #10
 8008d14:	fb03 0002 	mla	r0, r3, r2, r0
 8008d18:	e7d0      	b.n	8008cbc <__gethex+0xdc>
 8008d1a:	4629      	mov	r1, r5
 8008d1c:	e7e0      	b.n	8008ce0 <__gethex+0x100>
 8008d1e:	eba5 0308 	sub.w	r3, r5, r8
 8008d22:	3b01      	subs	r3, #1
 8008d24:	4621      	mov	r1, r4
 8008d26:	2b07      	cmp	r3, #7
 8008d28:	dc0a      	bgt.n	8008d40 <__gethex+0x160>
 8008d2a:	4648      	mov	r0, r9
 8008d2c:	f7fe f91e 	bl	8006f6c <_Balloc>
 8008d30:	4604      	mov	r4, r0
 8008d32:	b940      	cbnz	r0, 8008d46 <__gethex+0x166>
 8008d34:	4b61      	ldr	r3, [pc, #388]	; (8008ebc <__gethex+0x2dc>)
 8008d36:	4602      	mov	r2, r0
 8008d38:	21e4      	movs	r1, #228	; 0xe4
 8008d3a:	4861      	ldr	r0, [pc, #388]	; (8008ec0 <__gethex+0x2e0>)
 8008d3c:	f7ff feb4 	bl	8008aa8 <__assert_func>
 8008d40:	3101      	adds	r1, #1
 8008d42:	105b      	asrs	r3, r3, #1
 8008d44:	e7ef      	b.n	8008d26 <__gethex+0x146>
 8008d46:	f100 0a14 	add.w	sl, r0, #20
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	495a      	ldr	r1, [pc, #360]	; (8008eb8 <__gethex+0x2d8>)
 8008d4e:	f8cd a004 	str.w	sl, [sp, #4]
 8008d52:	469b      	mov	fp, r3
 8008d54:	45a8      	cmp	r8, r5
 8008d56:	d342      	bcc.n	8008dde <__gethex+0x1fe>
 8008d58:	9801      	ldr	r0, [sp, #4]
 8008d5a:	f840 bb04 	str.w	fp, [r0], #4
 8008d5e:	eba0 000a 	sub.w	r0, r0, sl
 8008d62:	1080      	asrs	r0, r0, #2
 8008d64:	6120      	str	r0, [r4, #16]
 8008d66:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8008d6a:	4658      	mov	r0, fp
 8008d6c:	f7fe f9f0 	bl	8007150 <__hi0bits>
 8008d70:	683d      	ldr	r5, [r7, #0]
 8008d72:	eba8 0000 	sub.w	r0, r8, r0
 8008d76:	42a8      	cmp	r0, r5
 8008d78:	dd59      	ble.n	8008e2e <__gethex+0x24e>
 8008d7a:	eba0 0805 	sub.w	r8, r0, r5
 8008d7e:	4641      	mov	r1, r8
 8008d80:	4620      	mov	r0, r4
 8008d82:	f7fe fd7f 	bl	8007884 <__any_on>
 8008d86:	4683      	mov	fp, r0
 8008d88:	b1b8      	cbz	r0, 8008dba <__gethex+0x1da>
 8008d8a:	f108 33ff 	add.w	r3, r8, #4294967295
 8008d8e:	1159      	asrs	r1, r3, #5
 8008d90:	f003 021f 	and.w	r2, r3, #31
 8008d94:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008d98:	f04f 0b01 	mov.w	fp, #1
 8008d9c:	fa0b f202 	lsl.w	r2, fp, r2
 8008da0:	420a      	tst	r2, r1
 8008da2:	d00a      	beq.n	8008dba <__gethex+0x1da>
 8008da4:	455b      	cmp	r3, fp
 8008da6:	dd06      	ble.n	8008db6 <__gethex+0x1d6>
 8008da8:	f1a8 0102 	sub.w	r1, r8, #2
 8008dac:	4620      	mov	r0, r4
 8008dae:	f7fe fd69 	bl	8007884 <__any_on>
 8008db2:	2800      	cmp	r0, #0
 8008db4:	d138      	bne.n	8008e28 <__gethex+0x248>
 8008db6:	f04f 0b02 	mov.w	fp, #2
 8008dba:	4641      	mov	r1, r8
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	f7ff fea7 	bl	8008b10 <rshift>
 8008dc2:	4446      	add	r6, r8
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	42b3      	cmp	r3, r6
 8008dc8:	da41      	bge.n	8008e4e <__gethex+0x26e>
 8008dca:	4621      	mov	r1, r4
 8008dcc:	4648      	mov	r0, r9
 8008dce:	f7fe f90d 	bl	8006fec <_Bfree>
 8008dd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	6013      	str	r3, [r2, #0]
 8008dd8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8008ddc:	e78a      	b.n	8008cf4 <__gethex+0x114>
 8008dde:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008de2:	2a2e      	cmp	r2, #46	; 0x2e
 8008de4:	d014      	beq.n	8008e10 <__gethex+0x230>
 8008de6:	2b20      	cmp	r3, #32
 8008de8:	d106      	bne.n	8008df8 <__gethex+0x218>
 8008dea:	9b01      	ldr	r3, [sp, #4]
 8008dec:	f843 bb04 	str.w	fp, [r3], #4
 8008df0:	f04f 0b00 	mov.w	fp, #0
 8008df4:	9301      	str	r3, [sp, #4]
 8008df6:	465b      	mov	r3, fp
 8008df8:	7828      	ldrb	r0, [r5, #0]
 8008dfa:	9303      	str	r3, [sp, #12]
 8008dfc:	f7ff feda 	bl	8008bb4 <__hexdig_fun>
 8008e00:	9b03      	ldr	r3, [sp, #12]
 8008e02:	f000 000f 	and.w	r0, r0, #15
 8008e06:	4098      	lsls	r0, r3
 8008e08:	ea4b 0b00 	orr.w	fp, fp, r0
 8008e0c:	3304      	adds	r3, #4
 8008e0e:	e7a1      	b.n	8008d54 <__gethex+0x174>
 8008e10:	45a8      	cmp	r8, r5
 8008e12:	d8e8      	bhi.n	8008de6 <__gethex+0x206>
 8008e14:	2201      	movs	r2, #1
 8008e16:	4628      	mov	r0, r5
 8008e18:	9303      	str	r3, [sp, #12]
 8008e1a:	f7ff fe0b 	bl	8008a34 <strncmp>
 8008e1e:	4926      	ldr	r1, [pc, #152]	; (8008eb8 <__gethex+0x2d8>)
 8008e20:	9b03      	ldr	r3, [sp, #12]
 8008e22:	2800      	cmp	r0, #0
 8008e24:	d1df      	bne.n	8008de6 <__gethex+0x206>
 8008e26:	e795      	b.n	8008d54 <__gethex+0x174>
 8008e28:	f04f 0b03 	mov.w	fp, #3
 8008e2c:	e7c5      	b.n	8008dba <__gethex+0x1da>
 8008e2e:	da0b      	bge.n	8008e48 <__gethex+0x268>
 8008e30:	eba5 0800 	sub.w	r8, r5, r0
 8008e34:	4621      	mov	r1, r4
 8008e36:	4642      	mov	r2, r8
 8008e38:	4648      	mov	r0, r9
 8008e3a:	f7fe faf1 	bl	8007420 <__lshift>
 8008e3e:	eba6 0608 	sub.w	r6, r6, r8
 8008e42:	4604      	mov	r4, r0
 8008e44:	f100 0a14 	add.w	sl, r0, #20
 8008e48:	f04f 0b00 	mov.w	fp, #0
 8008e4c:	e7ba      	b.n	8008dc4 <__gethex+0x1e4>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	42b3      	cmp	r3, r6
 8008e52:	dd73      	ble.n	8008f3c <__gethex+0x35c>
 8008e54:	1b9e      	subs	r6, r3, r6
 8008e56:	42b5      	cmp	r5, r6
 8008e58:	dc34      	bgt.n	8008ec4 <__gethex+0x2e4>
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2b02      	cmp	r3, #2
 8008e5e:	d023      	beq.n	8008ea8 <__gethex+0x2c8>
 8008e60:	2b03      	cmp	r3, #3
 8008e62:	d025      	beq.n	8008eb0 <__gethex+0x2d0>
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d115      	bne.n	8008e94 <__gethex+0x2b4>
 8008e68:	42b5      	cmp	r5, r6
 8008e6a:	d113      	bne.n	8008e94 <__gethex+0x2b4>
 8008e6c:	2d01      	cmp	r5, #1
 8008e6e:	d10b      	bne.n	8008e88 <__gethex+0x2a8>
 8008e70:	9a02      	ldr	r2, [sp, #8]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6013      	str	r3, [r2, #0]
 8008e76:	2301      	movs	r3, #1
 8008e78:	6123      	str	r3, [r4, #16]
 8008e7a:	f8ca 3000 	str.w	r3, [sl]
 8008e7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e80:	f04f 0862 	mov.w	r8, #98	; 0x62
 8008e84:	601c      	str	r4, [r3, #0]
 8008e86:	e735      	b.n	8008cf4 <__gethex+0x114>
 8008e88:	1e69      	subs	r1, r5, #1
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	f7fe fcfa 	bl	8007884 <__any_on>
 8008e90:	2800      	cmp	r0, #0
 8008e92:	d1ed      	bne.n	8008e70 <__gethex+0x290>
 8008e94:	4621      	mov	r1, r4
 8008e96:	4648      	mov	r0, r9
 8008e98:	f7fe f8a8 	bl	8006fec <_Bfree>
 8008e9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	6013      	str	r3, [r2, #0]
 8008ea2:	f04f 0850 	mov.w	r8, #80	; 0x50
 8008ea6:	e725      	b.n	8008cf4 <__gethex+0x114>
 8008ea8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d1f2      	bne.n	8008e94 <__gethex+0x2b4>
 8008eae:	e7df      	b.n	8008e70 <__gethex+0x290>
 8008eb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d1dc      	bne.n	8008e70 <__gethex+0x290>
 8008eb6:	e7ed      	b.n	8008e94 <__gethex+0x2b4>
 8008eb8:	0800b33c 	.word	0x0800b33c
 8008ebc:	0800b1d5 	.word	0x0800b1d5
 8008ec0:	0800b4e6 	.word	0x0800b4e6
 8008ec4:	f106 38ff 	add.w	r8, r6, #4294967295
 8008ec8:	f1bb 0f00 	cmp.w	fp, #0
 8008ecc:	d133      	bne.n	8008f36 <__gethex+0x356>
 8008ece:	f1b8 0f00 	cmp.w	r8, #0
 8008ed2:	d004      	beq.n	8008ede <__gethex+0x2fe>
 8008ed4:	4641      	mov	r1, r8
 8008ed6:	4620      	mov	r0, r4
 8008ed8:	f7fe fcd4 	bl	8007884 <__any_on>
 8008edc:	4683      	mov	fp, r0
 8008ede:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008ee8:	f008 081f 	and.w	r8, r8, #31
 8008eec:	fa03 f308 	lsl.w	r3, r3, r8
 8008ef0:	4213      	tst	r3, r2
 8008ef2:	4631      	mov	r1, r6
 8008ef4:	4620      	mov	r0, r4
 8008ef6:	bf18      	it	ne
 8008ef8:	f04b 0b02 	orrne.w	fp, fp, #2
 8008efc:	1bad      	subs	r5, r5, r6
 8008efe:	f7ff fe07 	bl	8008b10 <rshift>
 8008f02:	687e      	ldr	r6, [r7, #4]
 8008f04:	f04f 0802 	mov.w	r8, #2
 8008f08:	f1bb 0f00 	cmp.w	fp, #0
 8008f0c:	d04a      	beq.n	8008fa4 <__gethex+0x3c4>
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2b02      	cmp	r3, #2
 8008f12:	d016      	beq.n	8008f42 <__gethex+0x362>
 8008f14:	2b03      	cmp	r3, #3
 8008f16:	d018      	beq.n	8008f4a <__gethex+0x36a>
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d109      	bne.n	8008f30 <__gethex+0x350>
 8008f1c:	f01b 0f02 	tst.w	fp, #2
 8008f20:	d006      	beq.n	8008f30 <__gethex+0x350>
 8008f22:	f8da 3000 	ldr.w	r3, [sl]
 8008f26:	ea4b 0b03 	orr.w	fp, fp, r3
 8008f2a:	f01b 0f01 	tst.w	fp, #1
 8008f2e:	d10f      	bne.n	8008f50 <__gethex+0x370>
 8008f30:	f048 0810 	orr.w	r8, r8, #16
 8008f34:	e036      	b.n	8008fa4 <__gethex+0x3c4>
 8008f36:	f04f 0b01 	mov.w	fp, #1
 8008f3a:	e7d0      	b.n	8008ede <__gethex+0x2fe>
 8008f3c:	f04f 0801 	mov.w	r8, #1
 8008f40:	e7e2      	b.n	8008f08 <__gethex+0x328>
 8008f42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f44:	f1c3 0301 	rsb	r3, r3, #1
 8008f48:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d0ef      	beq.n	8008f30 <__gethex+0x350>
 8008f50:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008f54:	f104 0214 	add.w	r2, r4, #20
 8008f58:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8008f5c:	9301      	str	r3, [sp, #4]
 8008f5e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8008f62:	2300      	movs	r3, #0
 8008f64:	4694      	mov	ip, r2
 8008f66:	f852 1b04 	ldr.w	r1, [r2], #4
 8008f6a:	f1b1 3fff 	cmp.w	r1, #4294967295
 8008f6e:	d01e      	beq.n	8008fae <__gethex+0x3ce>
 8008f70:	3101      	adds	r1, #1
 8008f72:	f8cc 1000 	str.w	r1, [ip]
 8008f76:	f1b8 0f02 	cmp.w	r8, #2
 8008f7a:	f104 0214 	add.w	r2, r4, #20
 8008f7e:	d13d      	bne.n	8008ffc <__gethex+0x41c>
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	3b01      	subs	r3, #1
 8008f84:	42ab      	cmp	r3, r5
 8008f86:	d10b      	bne.n	8008fa0 <__gethex+0x3c0>
 8008f88:	1169      	asrs	r1, r5, #5
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	f005 051f 	and.w	r5, r5, #31
 8008f90:	fa03 f505 	lsl.w	r5, r3, r5
 8008f94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f98:	421d      	tst	r5, r3
 8008f9a:	bf18      	it	ne
 8008f9c:	f04f 0801 	movne.w	r8, #1
 8008fa0:	f048 0820 	orr.w	r8, r8, #32
 8008fa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fa6:	601c      	str	r4, [r3, #0]
 8008fa8:	9b02      	ldr	r3, [sp, #8]
 8008faa:	601e      	str	r6, [r3, #0]
 8008fac:	e6a2      	b.n	8008cf4 <__gethex+0x114>
 8008fae:	4290      	cmp	r0, r2
 8008fb0:	f842 3c04 	str.w	r3, [r2, #-4]
 8008fb4:	d8d6      	bhi.n	8008f64 <__gethex+0x384>
 8008fb6:	68a2      	ldr	r2, [r4, #8]
 8008fb8:	4593      	cmp	fp, r2
 8008fba:	db17      	blt.n	8008fec <__gethex+0x40c>
 8008fbc:	6861      	ldr	r1, [r4, #4]
 8008fbe:	4648      	mov	r0, r9
 8008fc0:	3101      	adds	r1, #1
 8008fc2:	f7fd ffd3 	bl	8006f6c <_Balloc>
 8008fc6:	4682      	mov	sl, r0
 8008fc8:	b918      	cbnz	r0, 8008fd2 <__gethex+0x3f2>
 8008fca:	4b1b      	ldr	r3, [pc, #108]	; (8009038 <__gethex+0x458>)
 8008fcc:	4602      	mov	r2, r0
 8008fce:	2184      	movs	r1, #132	; 0x84
 8008fd0:	e6b3      	b.n	8008d3a <__gethex+0x15a>
 8008fd2:	6922      	ldr	r2, [r4, #16]
 8008fd4:	3202      	adds	r2, #2
 8008fd6:	f104 010c 	add.w	r1, r4, #12
 8008fda:	0092      	lsls	r2, r2, #2
 8008fdc:	300c      	adds	r0, #12
 8008fde:	f7ff fd4b 	bl	8008a78 <memcpy>
 8008fe2:	4621      	mov	r1, r4
 8008fe4:	4648      	mov	r0, r9
 8008fe6:	f7fe f801 	bl	8006fec <_Bfree>
 8008fea:	4654      	mov	r4, sl
 8008fec:	6922      	ldr	r2, [r4, #16]
 8008fee:	1c51      	adds	r1, r2, #1
 8008ff0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008ff4:	6121      	str	r1, [r4, #16]
 8008ff6:	2101      	movs	r1, #1
 8008ff8:	6151      	str	r1, [r2, #20]
 8008ffa:	e7bc      	b.n	8008f76 <__gethex+0x396>
 8008ffc:	6921      	ldr	r1, [r4, #16]
 8008ffe:	4559      	cmp	r1, fp
 8009000:	dd0b      	ble.n	800901a <__gethex+0x43a>
 8009002:	2101      	movs	r1, #1
 8009004:	4620      	mov	r0, r4
 8009006:	f7ff fd83 	bl	8008b10 <rshift>
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	3601      	adds	r6, #1
 800900e:	42b3      	cmp	r3, r6
 8009010:	f6ff aedb 	blt.w	8008dca <__gethex+0x1ea>
 8009014:	f04f 0801 	mov.w	r8, #1
 8009018:	e7c2      	b.n	8008fa0 <__gethex+0x3c0>
 800901a:	f015 051f 	ands.w	r5, r5, #31
 800901e:	d0f9      	beq.n	8009014 <__gethex+0x434>
 8009020:	9b01      	ldr	r3, [sp, #4]
 8009022:	441a      	add	r2, r3
 8009024:	f1c5 0520 	rsb	r5, r5, #32
 8009028:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800902c:	f7fe f890 	bl	8007150 <__hi0bits>
 8009030:	42a8      	cmp	r0, r5
 8009032:	dbe6      	blt.n	8009002 <__gethex+0x422>
 8009034:	e7ee      	b.n	8009014 <__gethex+0x434>
 8009036:	bf00      	nop
 8009038:	0800b1d5 	.word	0x0800b1d5

0800903c <L_shift>:
 800903c:	f1c2 0208 	rsb	r2, r2, #8
 8009040:	0092      	lsls	r2, r2, #2
 8009042:	b570      	push	{r4, r5, r6, lr}
 8009044:	f1c2 0620 	rsb	r6, r2, #32
 8009048:	6843      	ldr	r3, [r0, #4]
 800904a:	6804      	ldr	r4, [r0, #0]
 800904c:	fa03 f506 	lsl.w	r5, r3, r6
 8009050:	432c      	orrs	r4, r5
 8009052:	40d3      	lsrs	r3, r2
 8009054:	6004      	str	r4, [r0, #0]
 8009056:	f840 3f04 	str.w	r3, [r0, #4]!
 800905a:	4288      	cmp	r0, r1
 800905c:	d3f4      	bcc.n	8009048 <L_shift+0xc>
 800905e:	bd70      	pop	{r4, r5, r6, pc}

08009060 <__match>:
 8009060:	b530      	push	{r4, r5, lr}
 8009062:	6803      	ldr	r3, [r0, #0]
 8009064:	3301      	adds	r3, #1
 8009066:	f811 4b01 	ldrb.w	r4, [r1], #1
 800906a:	b914      	cbnz	r4, 8009072 <__match+0x12>
 800906c:	6003      	str	r3, [r0, #0]
 800906e:	2001      	movs	r0, #1
 8009070:	bd30      	pop	{r4, r5, pc}
 8009072:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009076:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800907a:	2d19      	cmp	r5, #25
 800907c:	bf98      	it	ls
 800907e:	3220      	addls	r2, #32
 8009080:	42a2      	cmp	r2, r4
 8009082:	d0f0      	beq.n	8009066 <__match+0x6>
 8009084:	2000      	movs	r0, #0
 8009086:	e7f3      	b.n	8009070 <__match+0x10>

08009088 <__hexnan>:
 8009088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800908c:	680b      	ldr	r3, [r1, #0]
 800908e:	6801      	ldr	r1, [r0, #0]
 8009090:	115e      	asrs	r6, r3, #5
 8009092:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009096:	f013 031f 	ands.w	r3, r3, #31
 800909a:	b087      	sub	sp, #28
 800909c:	bf18      	it	ne
 800909e:	3604      	addne	r6, #4
 80090a0:	2500      	movs	r5, #0
 80090a2:	1f37      	subs	r7, r6, #4
 80090a4:	4682      	mov	sl, r0
 80090a6:	4690      	mov	r8, r2
 80090a8:	9301      	str	r3, [sp, #4]
 80090aa:	f846 5c04 	str.w	r5, [r6, #-4]
 80090ae:	46b9      	mov	r9, r7
 80090b0:	463c      	mov	r4, r7
 80090b2:	9502      	str	r5, [sp, #8]
 80090b4:	46ab      	mov	fp, r5
 80090b6:	784a      	ldrb	r2, [r1, #1]
 80090b8:	1c4b      	adds	r3, r1, #1
 80090ba:	9303      	str	r3, [sp, #12]
 80090bc:	b342      	cbz	r2, 8009110 <__hexnan+0x88>
 80090be:	4610      	mov	r0, r2
 80090c0:	9105      	str	r1, [sp, #20]
 80090c2:	9204      	str	r2, [sp, #16]
 80090c4:	f7ff fd76 	bl	8008bb4 <__hexdig_fun>
 80090c8:	2800      	cmp	r0, #0
 80090ca:	d14f      	bne.n	800916c <__hexnan+0xe4>
 80090cc:	9a04      	ldr	r2, [sp, #16]
 80090ce:	9905      	ldr	r1, [sp, #20]
 80090d0:	2a20      	cmp	r2, #32
 80090d2:	d818      	bhi.n	8009106 <__hexnan+0x7e>
 80090d4:	9b02      	ldr	r3, [sp, #8]
 80090d6:	459b      	cmp	fp, r3
 80090d8:	dd13      	ble.n	8009102 <__hexnan+0x7a>
 80090da:	454c      	cmp	r4, r9
 80090dc:	d206      	bcs.n	80090ec <__hexnan+0x64>
 80090de:	2d07      	cmp	r5, #7
 80090e0:	dc04      	bgt.n	80090ec <__hexnan+0x64>
 80090e2:	462a      	mov	r2, r5
 80090e4:	4649      	mov	r1, r9
 80090e6:	4620      	mov	r0, r4
 80090e8:	f7ff ffa8 	bl	800903c <L_shift>
 80090ec:	4544      	cmp	r4, r8
 80090ee:	d950      	bls.n	8009192 <__hexnan+0x10a>
 80090f0:	2300      	movs	r3, #0
 80090f2:	f1a4 0904 	sub.w	r9, r4, #4
 80090f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80090fa:	f8cd b008 	str.w	fp, [sp, #8]
 80090fe:	464c      	mov	r4, r9
 8009100:	461d      	mov	r5, r3
 8009102:	9903      	ldr	r1, [sp, #12]
 8009104:	e7d7      	b.n	80090b6 <__hexnan+0x2e>
 8009106:	2a29      	cmp	r2, #41	; 0x29
 8009108:	d155      	bne.n	80091b6 <__hexnan+0x12e>
 800910a:	3102      	adds	r1, #2
 800910c:	f8ca 1000 	str.w	r1, [sl]
 8009110:	f1bb 0f00 	cmp.w	fp, #0
 8009114:	d04f      	beq.n	80091b6 <__hexnan+0x12e>
 8009116:	454c      	cmp	r4, r9
 8009118:	d206      	bcs.n	8009128 <__hexnan+0xa0>
 800911a:	2d07      	cmp	r5, #7
 800911c:	dc04      	bgt.n	8009128 <__hexnan+0xa0>
 800911e:	462a      	mov	r2, r5
 8009120:	4649      	mov	r1, r9
 8009122:	4620      	mov	r0, r4
 8009124:	f7ff ff8a 	bl	800903c <L_shift>
 8009128:	4544      	cmp	r4, r8
 800912a:	d934      	bls.n	8009196 <__hexnan+0x10e>
 800912c:	f1a8 0204 	sub.w	r2, r8, #4
 8009130:	4623      	mov	r3, r4
 8009132:	f853 1b04 	ldr.w	r1, [r3], #4
 8009136:	f842 1f04 	str.w	r1, [r2, #4]!
 800913a:	429f      	cmp	r7, r3
 800913c:	d2f9      	bcs.n	8009132 <__hexnan+0xaa>
 800913e:	1b3b      	subs	r3, r7, r4
 8009140:	f023 0303 	bic.w	r3, r3, #3
 8009144:	3304      	adds	r3, #4
 8009146:	3e03      	subs	r6, #3
 8009148:	3401      	adds	r4, #1
 800914a:	42a6      	cmp	r6, r4
 800914c:	bf38      	it	cc
 800914e:	2304      	movcc	r3, #4
 8009150:	4443      	add	r3, r8
 8009152:	2200      	movs	r2, #0
 8009154:	f843 2b04 	str.w	r2, [r3], #4
 8009158:	429f      	cmp	r7, r3
 800915a:	d2fb      	bcs.n	8009154 <__hexnan+0xcc>
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	b91b      	cbnz	r3, 8009168 <__hexnan+0xe0>
 8009160:	4547      	cmp	r7, r8
 8009162:	d126      	bne.n	80091b2 <__hexnan+0x12a>
 8009164:	2301      	movs	r3, #1
 8009166:	603b      	str	r3, [r7, #0]
 8009168:	2005      	movs	r0, #5
 800916a:	e025      	b.n	80091b8 <__hexnan+0x130>
 800916c:	3501      	adds	r5, #1
 800916e:	2d08      	cmp	r5, #8
 8009170:	f10b 0b01 	add.w	fp, fp, #1
 8009174:	dd06      	ble.n	8009184 <__hexnan+0xfc>
 8009176:	4544      	cmp	r4, r8
 8009178:	d9c3      	bls.n	8009102 <__hexnan+0x7a>
 800917a:	2300      	movs	r3, #0
 800917c:	f844 3c04 	str.w	r3, [r4, #-4]
 8009180:	2501      	movs	r5, #1
 8009182:	3c04      	subs	r4, #4
 8009184:	6822      	ldr	r2, [r4, #0]
 8009186:	f000 000f 	and.w	r0, r0, #15
 800918a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800918e:	6020      	str	r0, [r4, #0]
 8009190:	e7b7      	b.n	8009102 <__hexnan+0x7a>
 8009192:	2508      	movs	r5, #8
 8009194:	e7b5      	b.n	8009102 <__hexnan+0x7a>
 8009196:	9b01      	ldr	r3, [sp, #4]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d0df      	beq.n	800915c <__hexnan+0xd4>
 800919c:	f1c3 0320 	rsb	r3, r3, #32
 80091a0:	f04f 32ff 	mov.w	r2, #4294967295
 80091a4:	40da      	lsrs	r2, r3
 80091a6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80091aa:	4013      	ands	r3, r2
 80091ac:	f846 3c04 	str.w	r3, [r6, #-4]
 80091b0:	e7d4      	b.n	800915c <__hexnan+0xd4>
 80091b2:	3f04      	subs	r7, #4
 80091b4:	e7d2      	b.n	800915c <__hexnan+0xd4>
 80091b6:	2004      	movs	r0, #4
 80091b8:	b007      	add	sp, #28
 80091ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080091be <__ascii_mbtowc>:
 80091be:	b082      	sub	sp, #8
 80091c0:	b901      	cbnz	r1, 80091c4 <__ascii_mbtowc+0x6>
 80091c2:	a901      	add	r1, sp, #4
 80091c4:	b142      	cbz	r2, 80091d8 <__ascii_mbtowc+0x1a>
 80091c6:	b14b      	cbz	r3, 80091dc <__ascii_mbtowc+0x1e>
 80091c8:	7813      	ldrb	r3, [r2, #0]
 80091ca:	600b      	str	r3, [r1, #0]
 80091cc:	7812      	ldrb	r2, [r2, #0]
 80091ce:	1e10      	subs	r0, r2, #0
 80091d0:	bf18      	it	ne
 80091d2:	2001      	movne	r0, #1
 80091d4:	b002      	add	sp, #8
 80091d6:	4770      	bx	lr
 80091d8:	4610      	mov	r0, r2
 80091da:	e7fb      	b.n	80091d4 <__ascii_mbtowc+0x16>
 80091dc:	f06f 0001 	mvn.w	r0, #1
 80091e0:	e7f8      	b.n	80091d4 <__ascii_mbtowc+0x16>

080091e2 <_realloc_r>:
 80091e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091e6:	4680      	mov	r8, r0
 80091e8:	4614      	mov	r4, r2
 80091ea:	460e      	mov	r6, r1
 80091ec:	b921      	cbnz	r1, 80091f8 <_realloc_r+0x16>
 80091ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091f2:	4611      	mov	r1, r2
 80091f4:	f7fd be2e 	b.w	8006e54 <_malloc_r>
 80091f8:	b92a      	cbnz	r2, 8009206 <_realloc_r+0x24>
 80091fa:	f7fd fdb7 	bl	8006d6c <_free_r>
 80091fe:	4625      	mov	r5, r4
 8009200:	4628      	mov	r0, r5
 8009202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009206:	f000 f842 	bl	800928e <_malloc_usable_size_r>
 800920a:	4284      	cmp	r4, r0
 800920c:	4607      	mov	r7, r0
 800920e:	d802      	bhi.n	8009216 <_realloc_r+0x34>
 8009210:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009214:	d812      	bhi.n	800923c <_realloc_r+0x5a>
 8009216:	4621      	mov	r1, r4
 8009218:	4640      	mov	r0, r8
 800921a:	f7fd fe1b 	bl	8006e54 <_malloc_r>
 800921e:	4605      	mov	r5, r0
 8009220:	2800      	cmp	r0, #0
 8009222:	d0ed      	beq.n	8009200 <_realloc_r+0x1e>
 8009224:	42bc      	cmp	r4, r7
 8009226:	4622      	mov	r2, r4
 8009228:	4631      	mov	r1, r6
 800922a:	bf28      	it	cs
 800922c:	463a      	movcs	r2, r7
 800922e:	f7ff fc23 	bl	8008a78 <memcpy>
 8009232:	4631      	mov	r1, r6
 8009234:	4640      	mov	r0, r8
 8009236:	f7fd fd99 	bl	8006d6c <_free_r>
 800923a:	e7e1      	b.n	8009200 <_realloc_r+0x1e>
 800923c:	4635      	mov	r5, r6
 800923e:	e7df      	b.n	8009200 <_realloc_r+0x1e>

08009240 <__ascii_wctomb>:
 8009240:	b149      	cbz	r1, 8009256 <__ascii_wctomb+0x16>
 8009242:	2aff      	cmp	r2, #255	; 0xff
 8009244:	bf85      	ittet	hi
 8009246:	238a      	movhi	r3, #138	; 0x8a
 8009248:	6003      	strhi	r3, [r0, #0]
 800924a:	700a      	strbls	r2, [r1, #0]
 800924c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009250:	bf98      	it	ls
 8009252:	2001      	movls	r0, #1
 8009254:	4770      	bx	lr
 8009256:	4608      	mov	r0, r1
 8009258:	4770      	bx	lr
	...

0800925c <fiprintf>:
 800925c:	b40e      	push	{r1, r2, r3}
 800925e:	b503      	push	{r0, r1, lr}
 8009260:	4601      	mov	r1, r0
 8009262:	ab03      	add	r3, sp, #12
 8009264:	4805      	ldr	r0, [pc, #20]	; (800927c <fiprintf+0x20>)
 8009266:	f853 2b04 	ldr.w	r2, [r3], #4
 800926a:	6800      	ldr	r0, [r0, #0]
 800926c:	9301      	str	r3, [sp, #4]
 800926e:	f000 f83f 	bl	80092f0 <_vfiprintf_r>
 8009272:	b002      	add	sp, #8
 8009274:	f85d eb04 	ldr.w	lr, [sp], #4
 8009278:	b003      	add	sp, #12
 800927a:	4770      	bx	lr
 800927c:	20000064 	.word	0x20000064

08009280 <abort>:
 8009280:	b508      	push	{r3, lr}
 8009282:	2006      	movs	r0, #6
 8009284:	f000 fa0c 	bl	80096a0 <raise>
 8009288:	2001      	movs	r0, #1
 800928a:	f7f8 fe63 	bl	8001f54 <_exit>

0800928e <_malloc_usable_size_r>:
 800928e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009292:	1f18      	subs	r0, r3, #4
 8009294:	2b00      	cmp	r3, #0
 8009296:	bfbc      	itt	lt
 8009298:	580b      	ldrlt	r3, [r1, r0]
 800929a:	18c0      	addlt	r0, r0, r3
 800929c:	4770      	bx	lr

0800929e <__sfputc_r>:
 800929e:	6893      	ldr	r3, [r2, #8]
 80092a0:	3b01      	subs	r3, #1
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	b410      	push	{r4}
 80092a6:	6093      	str	r3, [r2, #8]
 80092a8:	da08      	bge.n	80092bc <__sfputc_r+0x1e>
 80092aa:	6994      	ldr	r4, [r2, #24]
 80092ac:	42a3      	cmp	r3, r4
 80092ae:	db01      	blt.n	80092b4 <__sfputc_r+0x16>
 80092b0:	290a      	cmp	r1, #10
 80092b2:	d103      	bne.n	80092bc <__sfputc_r+0x1e>
 80092b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092b8:	f000 b934 	b.w	8009524 <__swbuf_r>
 80092bc:	6813      	ldr	r3, [r2, #0]
 80092be:	1c58      	adds	r0, r3, #1
 80092c0:	6010      	str	r0, [r2, #0]
 80092c2:	7019      	strb	r1, [r3, #0]
 80092c4:	4608      	mov	r0, r1
 80092c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092ca:	4770      	bx	lr

080092cc <__sfputs_r>:
 80092cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ce:	4606      	mov	r6, r0
 80092d0:	460f      	mov	r7, r1
 80092d2:	4614      	mov	r4, r2
 80092d4:	18d5      	adds	r5, r2, r3
 80092d6:	42ac      	cmp	r4, r5
 80092d8:	d101      	bne.n	80092de <__sfputs_r+0x12>
 80092da:	2000      	movs	r0, #0
 80092dc:	e007      	b.n	80092ee <__sfputs_r+0x22>
 80092de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092e2:	463a      	mov	r2, r7
 80092e4:	4630      	mov	r0, r6
 80092e6:	f7ff ffda 	bl	800929e <__sfputc_r>
 80092ea:	1c43      	adds	r3, r0, #1
 80092ec:	d1f3      	bne.n	80092d6 <__sfputs_r+0xa>
 80092ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080092f0 <_vfiprintf_r>:
 80092f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092f4:	460d      	mov	r5, r1
 80092f6:	b09d      	sub	sp, #116	; 0x74
 80092f8:	4614      	mov	r4, r2
 80092fa:	4698      	mov	r8, r3
 80092fc:	4606      	mov	r6, r0
 80092fe:	b118      	cbz	r0, 8009308 <_vfiprintf_r+0x18>
 8009300:	6a03      	ldr	r3, [r0, #32]
 8009302:	b90b      	cbnz	r3, 8009308 <_vfiprintf_r+0x18>
 8009304:	f7fc fd98 	bl	8005e38 <__sinit>
 8009308:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800930a:	07d9      	lsls	r1, r3, #31
 800930c:	d405      	bmi.n	800931a <_vfiprintf_r+0x2a>
 800930e:	89ab      	ldrh	r3, [r5, #12]
 8009310:	059a      	lsls	r2, r3, #22
 8009312:	d402      	bmi.n	800931a <_vfiprintf_r+0x2a>
 8009314:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009316:	f7fc fea5 	bl	8006064 <__retarget_lock_acquire_recursive>
 800931a:	89ab      	ldrh	r3, [r5, #12]
 800931c:	071b      	lsls	r3, r3, #28
 800931e:	d501      	bpl.n	8009324 <_vfiprintf_r+0x34>
 8009320:	692b      	ldr	r3, [r5, #16]
 8009322:	b99b      	cbnz	r3, 800934c <_vfiprintf_r+0x5c>
 8009324:	4629      	mov	r1, r5
 8009326:	4630      	mov	r0, r6
 8009328:	f000 f93a 	bl	80095a0 <__swsetup_r>
 800932c:	b170      	cbz	r0, 800934c <_vfiprintf_r+0x5c>
 800932e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009330:	07dc      	lsls	r4, r3, #31
 8009332:	d504      	bpl.n	800933e <_vfiprintf_r+0x4e>
 8009334:	f04f 30ff 	mov.w	r0, #4294967295
 8009338:	b01d      	add	sp, #116	; 0x74
 800933a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800933e:	89ab      	ldrh	r3, [r5, #12]
 8009340:	0598      	lsls	r0, r3, #22
 8009342:	d4f7      	bmi.n	8009334 <_vfiprintf_r+0x44>
 8009344:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009346:	f7fc fe8e 	bl	8006066 <__retarget_lock_release_recursive>
 800934a:	e7f3      	b.n	8009334 <_vfiprintf_r+0x44>
 800934c:	2300      	movs	r3, #0
 800934e:	9309      	str	r3, [sp, #36]	; 0x24
 8009350:	2320      	movs	r3, #32
 8009352:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009356:	f8cd 800c 	str.w	r8, [sp, #12]
 800935a:	2330      	movs	r3, #48	; 0x30
 800935c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009510 <_vfiprintf_r+0x220>
 8009360:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009364:	f04f 0901 	mov.w	r9, #1
 8009368:	4623      	mov	r3, r4
 800936a:	469a      	mov	sl, r3
 800936c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009370:	b10a      	cbz	r2, 8009376 <_vfiprintf_r+0x86>
 8009372:	2a25      	cmp	r2, #37	; 0x25
 8009374:	d1f9      	bne.n	800936a <_vfiprintf_r+0x7a>
 8009376:	ebba 0b04 	subs.w	fp, sl, r4
 800937a:	d00b      	beq.n	8009394 <_vfiprintf_r+0xa4>
 800937c:	465b      	mov	r3, fp
 800937e:	4622      	mov	r2, r4
 8009380:	4629      	mov	r1, r5
 8009382:	4630      	mov	r0, r6
 8009384:	f7ff ffa2 	bl	80092cc <__sfputs_r>
 8009388:	3001      	adds	r0, #1
 800938a:	f000 80a9 	beq.w	80094e0 <_vfiprintf_r+0x1f0>
 800938e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009390:	445a      	add	r2, fp
 8009392:	9209      	str	r2, [sp, #36]	; 0x24
 8009394:	f89a 3000 	ldrb.w	r3, [sl]
 8009398:	2b00      	cmp	r3, #0
 800939a:	f000 80a1 	beq.w	80094e0 <_vfiprintf_r+0x1f0>
 800939e:	2300      	movs	r3, #0
 80093a0:	f04f 32ff 	mov.w	r2, #4294967295
 80093a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093a8:	f10a 0a01 	add.w	sl, sl, #1
 80093ac:	9304      	str	r3, [sp, #16]
 80093ae:	9307      	str	r3, [sp, #28]
 80093b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093b4:	931a      	str	r3, [sp, #104]	; 0x68
 80093b6:	4654      	mov	r4, sl
 80093b8:	2205      	movs	r2, #5
 80093ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093be:	4854      	ldr	r0, [pc, #336]	; (8009510 <_vfiprintf_r+0x220>)
 80093c0:	f7f6 ff0e 	bl	80001e0 <memchr>
 80093c4:	9a04      	ldr	r2, [sp, #16]
 80093c6:	b9d8      	cbnz	r0, 8009400 <_vfiprintf_r+0x110>
 80093c8:	06d1      	lsls	r1, r2, #27
 80093ca:	bf44      	itt	mi
 80093cc:	2320      	movmi	r3, #32
 80093ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093d2:	0713      	lsls	r3, r2, #28
 80093d4:	bf44      	itt	mi
 80093d6:	232b      	movmi	r3, #43	; 0x2b
 80093d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093dc:	f89a 3000 	ldrb.w	r3, [sl]
 80093e0:	2b2a      	cmp	r3, #42	; 0x2a
 80093e2:	d015      	beq.n	8009410 <_vfiprintf_r+0x120>
 80093e4:	9a07      	ldr	r2, [sp, #28]
 80093e6:	4654      	mov	r4, sl
 80093e8:	2000      	movs	r0, #0
 80093ea:	f04f 0c0a 	mov.w	ip, #10
 80093ee:	4621      	mov	r1, r4
 80093f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093f4:	3b30      	subs	r3, #48	; 0x30
 80093f6:	2b09      	cmp	r3, #9
 80093f8:	d94d      	bls.n	8009496 <_vfiprintf_r+0x1a6>
 80093fa:	b1b0      	cbz	r0, 800942a <_vfiprintf_r+0x13a>
 80093fc:	9207      	str	r2, [sp, #28]
 80093fe:	e014      	b.n	800942a <_vfiprintf_r+0x13a>
 8009400:	eba0 0308 	sub.w	r3, r0, r8
 8009404:	fa09 f303 	lsl.w	r3, r9, r3
 8009408:	4313      	orrs	r3, r2
 800940a:	9304      	str	r3, [sp, #16]
 800940c:	46a2      	mov	sl, r4
 800940e:	e7d2      	b.n	80093b6 <_vfiprintf_r+0xc6>
 8009410:	9b03      	ldr	r3, [sp, #12]
 8009412:	1d19      	adds	r1, r3, #4
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	9103      	str	r1, [sp, #12]
 8009418:	2b00      	cmp	r3, #0
 800941a:	bfbb      	ittet	lt
 800941c:	425b      	neglt	r3, r3
 800941e:	f042 0202 	orrlt.w	r2, r2, #2
 8009422:	9307      	strge	r3, [sp, #28]
 8009424:	9307      	strlt	r3, [sp, #28]
 8009426:	bfb8      	it	lt
 8009428:	9204      	strlt	r2, [sp, #16]
 800942a:	7823      	ldrb	r3, [r4, #0]
 800942c:	2b2e      	cmp	r3, #46	; 0x2e
 800942e:	d10c      	bne.n	800944a <_vfiprintf_r+0x15a>
 8009430:	7863      	ldrb	r3, [r4, #1]
 8009432:	2b2a      	cmp	r3, #42	; 0x2a
 8009434:	d134      	bne.n	80094a0 <_vfiprintf_r+0x1b0>
 8009436:	9b03      	ldr	r3, [sp, #12]
 8009438:	1d1a      	adds	r2, r3, #4
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	9203      	str	r2, [sp, #12]
 800943e:	2b00      	cmp	r3, #0
 8009440:	bfb8      	it	lt
 8009442:	f04f 33ff 	movlt.w	r3, #4294967295
 8009446:	3402      	adds	r4, #2
 8009448:	9305      	str	r3, [sp, #20]
 800944a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009520 <_vfiprintf_r+0x230>
 800944e:	7821      	ldrb	r1, [r4, #0]
 8009450:	2203      	movs	r2, #3
 8009452:	4650      	mov	r0, sl
 8009454:	f7f6 fec4 	bl	80001e0 <memchr>
 8009458:	b138      	cbz	r0, 800946a <_vfiprintf_r+0x17a>
 800945a:	9b04      	ldr	r3, [sp, #16]
 800945c:	eba0 000a 	sub.w	r0, r0, sl
 8009460:	2240      	movs	r2, #64	; 0x40
 8009462:	4082      	lsls	r2, r0
 8009464:	4313      	orrs	r3, r2
 8009466:	3401      	adds	r4, #1
 8009468:	9304      	str	r3, [sp, #16]
 800946a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800946e:	4829      	ldr	r0, [pc, #164]	; (8009514 <_vfiprintf_r+0x224>)
 8009470:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009474:	2206      	movs	r2, #6
 8009476:	f7f6 feb3 	bl	80001e0 <memchr>
 800947a:	2800      	cmp	r0, #0
 800947c:	d03f      	beq.n	80094fe <_vfiprintf_r+0x20e>
 800947e:	4b26      	ldr	r3, [pc, #152]	; (8009518 <_vfiprintf_r+0x228>)
 8009480:	bb1b      	cbnz	r3, 80094ca <_vfiprintf_r+0x1da>
 8009482:	9b03      	ldr	r3, [sp, #12]
 8009484:	3307      	adds	r3, #7
 8009486:	f023 0307 	bic.w	r3, r3, #7
 800948a:	3308      	adds	r3, #8
 800948c:	9303      	str	r3, [sp, #12]
 800948e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009490:	443b      	add	r3, r7
 8009492:	9309      	str	r3, [sp, #36]	; 0x24
 8009494:	e768      	b.n	8009368 <_vfiprintf_r+0x78>
 8009496:	fb0c 3202 	mla	r2, ip, r2, r3
 800949a:	460c      	mov	r4, r1
 800949c:	2001      	movs	r0, #1
 800949e:	e7a6      	b.n	80093ee <_vfiprintf_r+0xfe>
 80094a0:	2300      	movs	r3, #0
 80094a2:	3401      	adds	r4, #1
 80094a4:	9305      	str	r3, [sp, #20]
 80094a6:	4619      	mov	r1, r3
 80094a8:	f04f 0c0a 	mov.w	ip, #10
 80094ac:	4620      	mov	r0, r4
 80094ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094b2:	3a30      	subs	r2, #48	; 0x30
 80094b4:	2a09      	cmp	r2, #9
 80094b6:	d903      	bls.n	80094c0 <_vfiprintf_r+0x1d0>
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d0c6      	beq.n	800944a <_vfiprintf_r+0x15a>
 80094bc:	9105      	str	r1, [sp, #20]
 80094be:	e7c4      	b.n	800944a <_vfiprintf_r+0x15a>
 80094c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80094c4:	4604      	mov	r4, r0
 80094c6:	2301      	movs	r3, #1
 80094c8:	e7f0      	b.n	80094ac <_vfiprintf_r+0x1bc>
 80094ca:	ab03      	add	r3, sp, #12
 80094cc:	9300      	str	r3, [sp, #0]
 80094ce:	462a      	mov	r2, r5
 80094d0:	4b12      	ldr	r3, [pc, #72]	; (800951c <_vfiprintf_r+0x22c>)
 80094d2:	a904      	add	r1, sp, #16
 80094d4:	4630      	mov	r0, r6
 80094d6:	f7fb fe5f 	bl	8005198 <_printf_float>
 80094da:	4607      	mov	r7, r0
 80094dc:	1c78      	adds	r0, r7, #1
 80094de:	d1d6      	bne.n	800948e <_vfiprintf_r+0x19e>
 80094e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094e2:	07d9      	lsls	r1, r3, #31
 80094e4:	d405      	bmi.n	80094f2 <_vfiprintf_r+0x202>
 80094e6:	89ab      	ldrh	r3, [r5, #12]
 80094e8:	059a      	lsls	r2, r3, #22
 80094ea:	d402      	bmi.n	80094f2 <_vfiprintf_r+0x202>
 80094ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094ee:	f7fc fdba 	bl	8006066 <__retarget_lock_release_recursive>
 80094f2:	89ab      	ldrh	r3, [r5, #12]
 80094f4:	065b      	lsls	r3, r3, #25
 80094f6:	f53f af1d 	bmi.w	8009334 <_vfiprintf_r+0x44>
 80094fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094fc:	e71c      	b.n	8009338 <_vfiprintf_r+0x48>
 80094fe:	ab03      	add	r3, sp, #12
 8009500:	9300      	str	r3, [sp, #0]
 8009502:	462a      	mov	r2, r5
 8009504:	4b05      	ldr	r3, [pc, #20]	; (800951c <_vfiprintf_r+0x22c>)
 8009506:	a904      	add	r1, sp, #16
 8009508:	4630      	mov	r0, r6
 800950a:	f7fc f8e9 	bl	80056e0 <_printf_i>
 800950e:	e7e4      	b.n	80094da <_vfiprintf_r+0x1ea>
 8009510:	0800b491 	.word	0x0800b491
 8009514:	0800b49b 	.word	0x0800b49b
 8009518:	08005199 	.word	0x08005199
 800951c:	080092cd 	.word	0x080092cd
 8009520:	0800b497 	.word	0x0800b497

08009524 <__swbuf_r>:
 8009524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009526:	460e      	mov	r6, r1
 8009528:	4614      	mov	r4, r2
 800952a:	4605      	mov	r5, r0
 800952c:	b118      	cbz	r0, 8009536 <__swbuf_r+0x12>
 800952e:	6a03      	ldr	r3, [r0, #32]
 8009530:	b90b      	cbnz	r3, 8009536 <__swbuf_r+0x12>
 8009532:	f7fc fc81 	bl	8005e38 <__sinit>
 8009536:	69a3      	ldr	r3, [r4, #24]
 8009538:	60a3      	str	r3, [r4, #8]
 800953a:	89a3      	ldrh	r3, [r4, #12]
 800953c:	071a      	lsls	r2, r3, #28
 800953e:	d525      	bpl.n	800958c <__swbuf_r+0x68>
 8009540:	6923      	ldr	r3, [r4, #16]
 8009542:	b31b      	cbz	r3, 800958c <__swbuf_r+0x68>
 8009544:	6823      	ldr	r3, [r4, #0]
 8009546:	6922      	ldr	r2, [r4, #16]
 8009548:	1a98      	subs	r0, r3, r2
 800954a:	6963      	ldr	r3, [r4, #20]
 800954c:	b2f6      	uxtb	r6, r6
 800954e:	4283      	cmp	r3, r0
 8009550:	4637      	mov	r7, r6
 8009552:	dc04      	bgt.n	800955e <__swbuf_r+0x3a>
 8009554:	4621      	mov	r1, r4
 8009556:	4628      	mov	r0, r5
 8009558:	f7ff fa2a 	bl	80089b0 <_fflush_r>
 800955c:	b9e0      	cbnz	r0, 8009598 <__swbuf_r+0x74>
 800955e:	68a3      	ldr	r3, [r4, #8]
 8009560:	3b01      	subs	r3, #1
 8009562:	60a3      	str	r3, [r4, #8]
 8009564:	6823      	ldr	r3, [r4, #0]
 8009566:	1c5a      	adds	r2, r3, #1
 8009568:	6022      	str	r2, [r4, #0]
 800956a:	701e      	strb	r6, [r3, #0]
 800956c:	6962      	ldr	r2, [r4, #20]
 800956e:	1c43      	adds	r3, r0, #1
 8009570:	429a      	cmp	r2, r3
 8009572:	d004      	beq.n	800957e <__swbuf_r+0x5a>
 8009574:	89a3      	ldrh	r3, [r4, #12]
 8009576:	07db      	lsls	r3, r3, #31
 8009578:	d506      	bpl.n	8009588 <__swbuf_r+0x64>
 800957a:	2e0a      	cmp	r6, #10
 800957c:	d104      	bne.n	8009588 <__swbuf_r+0x64>
 800957e:	4621      	mov	r1, r4
 8009580:	4628      	mov	r0, r5
 8009582:	f7ff fa15 	bl	80089b0 <_fflush_r>
 8009586:	b938      	cbnz	r0, 8009598 <__swbuf_r+0x74>
 8009588:	4638      	mov	r0, r7
 800958a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800958c:	4621      	mov	r1, r4
 800958e:	4628      	mov	r0, r5
 8009590:	f000 f806 	bl	80095a0 <__swsetup_r>
 8009594:	2800      	cmp	r0, #0
 8009596:	d0d5      	beq.n	8009544 <__swbuf_r+0x20>
 8009598:	f04f 37ff 	mov.w	r7, #4294967295
 800959c:	e7f4      	b.n	8009588 <__swbuf_r+0x64>
	...

080095a0 <__swsetup_r>:
 80095a0:	b538      	push	{r3, r4, r5, lr}
 80095a2:	4b2a      	ldr	r3, [pc, #168]	; (800964c <__swsetup_r+0xac>)
 80095a4:	4605      	mov	r5, r0
 80095a6:	6818      	ldr	r0, [r3, #0]
 80095a8:	460c      	mov	r4, r1
 80095aa:	b118      	cbz	r0, 80095b4 <__swsetup_r+0x14>
 80095ac:	6a03      	ldr	r3, [r0, #32]
 80095ae:	b90b      	cbnz	r3, 80095b4 <__swsetup_r+0x14>
 80095b0:	f7fc fc42 	bl	8005e38 <__sinit>
 80095b4:	89a3      	ldrh	r3, [r4, #12]
 80095b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095ba:	0718      	lsls	r0, r3, #28
 80095bc:	d422      	bmi.n	8009604 <__swsetup_r+0x64>
 80095be:	06d9      	lsls	r1, r3, #27
 80095c0:	d407      	bmi.n	80095d2 <__swsetup_r+0x32>
 80095c2:	2309      	movs	r3, #9
 80095c4:	602b      	str	r3, [r5, #0]
 80095c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80095ca:	81a3      	strh	r3, [r4, #12]
 80095cc:	f04f 30ff 	mov.w	r0, #4294967295
 80095d0:	e034      	b.n	800963c <__swsetup_r+0x9c>
 80095d2:	0758      	lsls	r0, r3, #29
 80095d4:	d512      	bpl.n	80095fc <__swsetup_r+0x5c>
 80095d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095d8:	b141      	cbz	r1, 80095ec <__swsetup_r+0x4c>
 80095da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095de:	4299      	cmp	r1, r3
 80095e0:	d002      	beq.n	80095e8 <__swsetup_r+0x48>
 80095e2:	4628      	mov	r0, r5
 80095e4:	f7fd fbc2 	bl	8006d6c <_free_r>
 80095e8:	2300      	movs	r3, #0
 80095ea:	6363      	str	r3, [r4, #52]	; 0x34
 80095ec:	89a3      	ldrh	r3, [r4, #12]
 80095ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80095f2:	81a3      	strh	r3, [r4, #12]
 80095f4:	2300      	movs	r3, #0
 80095f6:	6063      	str	r3, [r4, #4]
 80095f8:	6923      	ldr	r3, [r4, #16]
 80095fa:	6023      	str	r3, [r4, #0]
 80095fc:	89a3      	ldrh	r3, [r4, #12]
 80095fe:	f043 0308 	orr.w	r3, r3, #8
 8009602:	81a3      	strh	r3, [r4, #12]
 8009604:	6923      	ldr	r3, [r4, #16]
 8009606:	b94b      	cbnz	r3, 800961c <__swsetup_r+0x7c>
 8009608:	89a3      	ldrh	r3, [r4, #12]
 800960a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800960e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009612:	d003      	beq.n	800961c <__swsetup_r+0x7c>
 8009614:	4621      	mov	r1, r4
 8009616:	4628      	mov	r0, r5
 8009618:	f000 f884 	bl	8009724 <__smakebuf_r>
 800961c:	89a0      	ldrh	r0, [r4, #12]
 800961e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009622:	f010 0301 	ands.w	r3, r0, #1
 8009626:	d00a      	beq.n	800963e <__swsetup_r+0x9e>
 8009628:	2300      	movs	r3, #0
 800962a:	60a3      	str	r3, [r4, #8]
 800962c:	6963      	ldr	r3, [r4, #20]
 800962e:	425b      	negs	r3, r3
 8009630:	61a3      	str	r3, [r4, #24]
 8009632:	6923      	ldr	r3, [r4, #16]
 8009634:	b943      	cbnz	r3, 8009648 <__swsetup_r+0xa8>
 8009636:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800963a:	d1c4      	bne.n	80095c6 <__swsetup_r+0x26>
 800963c:	bd38      	pop	{r3, r4, r5, pc}
 800963e:	0781      	lsls	r1, r0, #30
 8009640:	bf58      	it	pl
 8009642:	6963      	ldrpl	r3, [r4, #20]
 8009644:	60a3      	str	r3, [r4, #8]
 8009646:	e7f4      	b.n	8009632 <__swsetup_r+0x92>
 8009648:	2000      	movs	r0, #0
 800964a:	e7f7      	b.n	800963c <__swsetup_r+0x9c>
 800964c:	20000064 	.word	0x20000064

08009650 <_raise_r>:
 8009650:	291f      	cmp	r1, #31
 8009652:	b538      	push	{r3, r4, r5, lr}
 8009654:	4604      	mov	r4, r0
 8009656:	460d      	mov	r5, r1
 8009658:	d904      	bls.n	8009664 <_raise_r+0x14>
 800965a:	2316      	movs	r3, #22
 800965c:	6003      	str	r3, [r0, #0]
 800965e:	f04f 30ff 	mov.w	r0, #4294967295
 8009662:	bd38      	pop	{r3, r4, r5, pc}
 8009664:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009666:	b112      	cbz	r2, 800966e <_raise_r+0x1e>
 8009668:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800966c:	b94b      	cbnz	r3, 8009682 <_raise_r+0x32>
 800966e:	4620      	mov	r0, r4
 8009670:	f000 f830 	bl	80096d4 <_getpid_r>
 8009674:	462a      	mov	r2, r5
 8009676:	4601      	mov	r1, r0
 8009678:	4620      	mov	r0, r4
 800967a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800967e:	f000 b817 	b.w	80096b0 <_kill_r>
 8009682:	2b01      	cmp	r3, #1
 8009684:	d00a      	beq.n	800969c <_raise_r+0x4c>
 8009686:	1c59      	adds	r1, r3, #1
 8009688:	d103      	bne.n	8009692 <_raise_r+0x42>
 800968a:	2316      	movs	r3, #22
 800968c:	6003      	str	r3, [r0, #0]
 800968e:	2001      	movs	r0, #1
 8009690:	e7e7      	b.n	8009662 <_raise_r+0x12>
 8009692:	2400      	movs	r4, #0
 8009694:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009698:	4628      	mov	r0, r5
 800969a:	4798      	blx	r3
 800969c:	2000      	movs	r0, #0
 800969e:	e7e0      	b.n	8009662 <_raise_r+0x12>

080096a0 <raise>:
 80096a0:	4b02      	ldr	r3, [pc, #8]	; (80096ac <raise+0xc>)
 80096a2:	4601      	mov	r1, r0
 80096a4:	6818      	ldr	r0, [r3, #0]
 80096a6:	f7ff bfd3 	b.w	8009650 <_raise_r>
 80096aa:	bf00      	nop
 80096ac:	20000064 	.word	0x20000064

080096b0 <_kill_r>:
 80096b0:	b538      	push	{r3, r4, r5, lr}
 80096b2:	4d07      	ldr	r5, [pc, #28]	; (80096d0 <_kill_r+0x20>)
 80096b4:	2300      	movs	r3, #0
 80096b6:	4604      	mov	r4, r0
 80096b8:	4608      	mov	r0, r1
 80096ba:	4611      	mov	r1, r2
 80096bc:	602b      	str	r3, [r5, #0]
 80096be:	f7f8 fc39 	bl	8001f34 <_kill>
 80096c2:	1c43      	adds	r3, r0, #1
 80096c4:	d102      	bne.n	80096cc <_kill_r+0x1c>
 80096c6:	682b      	ldr	r3, [r5, #0]
 80096c8:	b103      	cbz	r3, 80096cc <_kill_r+0x1c>
 80096ca:	6023      	str	r3, [r4, #0]
 80096cc:	bd38      	pop	{r3, r4, r5, pc}
 80096ce:	bf00      	nop
 80096d0:	20000424 	.word	0x20000424

080096d4 <_getpid_r>:
 80096d4:	f7f8 bc26 	b.w	8001f24 <_getpid>

080096d8 <__swhatbuf_r>:
 80096d8:	b570      	push	{r4, r5, r6, lr}
 80096da:	460c      	mov	r4, r1
 80096dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096e0:	2900      	cmp	r1, #0
 80096e2:	b096      	sub	sp, #88	; 0x58
 80096e4:	4615      	mov	r5, r2
 80096e6:	461e      	mov	r6, r3
 80096e8:	da0d      	bge.n	8009706 <__swhatbuf_r+0x2e>
 80096ea:	89a3      	ldrh	r3, [r4, #12]
 80096ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 80096f0:	f04f 0100 	mov.w	r1, #0
 80096f4:	bf0c      	ite	eq
 80096f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80096fa:	2340      	movne	r3, #64	; 0x40
 80096fc:	2000      	movs	r0, #0
 80096fe:	6031      	str	r1, [r6, #0]
 8009700:	602b      	str	r3, [r5, #0]
 8009702:	b016      	add	sp, #88	; 0x58
 8009704:	bd70      	pop	{r4, r5, r6, pc}
 8009706:	466a      	mov	r2, sp
 8009708:	f000 f848 	bl	800979c <_fstat_r>
 800970c:	2800      	cmp	r0, #0
 800970e:	dbec      	blt.n	80096ea <__swhatbuf_r+0x12>
 8009710:	9901      	ldr	r1, [sp, #4]
 8009712:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009716:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800971a:	4259      	negs	r1, r3
 800971c:	4159      	adcs	r1, r3
 800971e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009722:	e7eb      	b.n	80096fc <__swhatbuf_r+0x24>

08009724 <__smakebuf_r>:
 8009724:	898b      	ldrh	r3, [r1, #12]
 8009726:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009728:	079d      	lsls	r5, r3, #30
 800972a:	4606      	mov	r6, r0
 800972c:	460c      	mov	r4, r1
 800972e:	d507      	bpl.n	8009740 <__smakebuf_r+0x1c>
 8009730:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009734:	6023      	str	r3, [r4, #0]
 8009736:	6123      	str	r3, [r4, #16]
 8009738:	2301      	movs	r3, #1
 800973a:	6163      	str	r3, [r4, #20]
 800973c:	b002      	add	sp, #8
 800973e:	bd70      	pop	{r4, r5, r6, pc}
 8009740:	ab01      	add	r3, sp, #4
 8009742:	466a      	mov	r2, sp
 8009744:	f7ff ffc8 	bl	80096d8 <__swhatbuf_r>
 8009748:	9900      	ldr	r1, [sp, #0]
 800974a:	4605      	mov	r5, r0
 800974c:	4630      	mov	r0, r6
 800974e:	f7fd fb81 	bl	8006e54 <_malloc_r>
 8009752:	b948      	cbnz	r0, 8009768 <__smakebuf_r+0x44>
 8009754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009758:	059a      	lsls	r2, r3, #22
 800975a:	d4ef      	bmi.n	800973c <__smakebuf_r+0x18>
 800975c:	f023 0303 	bic.w	r3, r3, #3
 8009760:	f043 0302 	orr.w	r3, r3, #2
 8009764:	81a3      	strh	r3, [r4, #12]
 8009766:	e7e3      	b.n	8009730 <__smakebuf_r+0xc>
 8009768:	89a3      	ldrh	r3, [r4, #12]
 800976a:	6020      	str	r0, [r4, #0]
 800976c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009770:	81a3      	strh	r3, [r4, #12]
 8009772:	9b00      	ldr	r3, [sp, #0]
 8009774:	6163      	str	r3, [r4, #20]
 8009776:	9b01      	ldr	r3, [sp, #4]
 8009778:	6120      	str	r0, [r4, #16]
 800977a:	b15b      	cbz	r3, 8009794 <__smakebuf_r+0x70>
 800977c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009780:	4630      	mov	r0, r6
 8009782:	f000 f81d 	bl	80097c0 <_isatty_r>
 8009786:	b128      	cbz	r0, 8009794 <__smakebuf_r+0x70>
 8009788:	89a3      	ldrh	r3, [r4, #12]
 800978a:	f023 0303 	bic.w	r3, r3, #3
 800978e:	f043 0301 	orr.w	r3, r3, #1
 8009792:	81a3      	strh	r3, [r4, #12]
 8009794:	89a3      	ldrh	r3, [r4, #12]
 8009796:	431d      	orrs	r5, r3
 8009798:	81a5      	strh	r5, [r4, #12]
 800979a:	e7cf      	b.n	800973c <__smakebuf_r+0x18>

0800979c <_fstat_r>:
 800979c:	b538      	push	{r3, r4, r5, lr}
 800979e:	4d07      	ldr	r5, [pc, #28]	; (80097bc <_fstat_r+0x20>)
 80097a0:	2300      	movs	r3, #0
 80097a2:	4604      	mov	r4, r0
 80097a4:	4608      	mov	r0, r1
 80097a6:	4611      	mov	r1, r2
 80097a8:	602b      	str	r3, [r5, #0]
 80097aa:	f7f8 fc22 	bl	8001ff2 <_fstat>
 80097ae:	1c43      	adds	r3, r0, #1
 80097b0:	d102      	bne.n	80097b8 <_fstat_r+0x1c>
 80097b2:	682b      	ldr	r3, [r5, #0]
 80097b4:	b103      	cbz	r3, 80097b8 <_fstat_r+0x1c>
 80097b6:	6023      	str	r3, [r4, #0]
 80097b8:	bd38      	pop	{r3, r4, r5, pc}
 80097ba:	bf00      	nop
 80097bc:	20000424 	.word	0x20000424

080097c0 <_isatty_r>:
 80097c0:	b538      	push	{r3, r4, r5, lr}
 80097c2:	4d06      	ldr	r5, [pc, #24]	; (80097dc <_isatty_r+0x1c>)
 80097c4:	2300      	movs	r3, #0
 80097c6:	4604      	mov	r4, r0
 80097c8:	4608      	mov	r0, r1
 80097ca:	602b      	str	r3, [r5, #0]
 80097cc:	f7f8 fc21 	bl	8002012 <_isatty>
 80097d0:	1c43      	adds	r3, r0, #1
 80097d2:	d102      	bne.n	80097da <_isatty_r+0x1a>
 80097d4:	682b      	ldr	r3, [r5, #0]
 80097d6:	b103      	cbz	r3, 80097da <_isatty_r+0x1a>
 80097d8:	6023      	str	r3, [r4, #0]
 80097da:	bd38      	pop	{r3, r4, r5, pc}
 80097dc:	20000424 	.word	0x20000424

080097e0 <pow>:
 80097e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097e2:	ed2d 8b02 	vpush	{d8}
 80097e6:	eeb0 8a40 	vmov.f32	s16, s0
 80097ea:	eef0 8a60 	vmov.f32	s17, s1
 80097ee:	ec55 4b11 	vmov	r4, r5, d1
 80097f2:	f000 f8b5 	bl	8009960 <__ieee754_pow>
 80097f6:	4622      	mov	r2, r4
 80097f8:	462b      	mov	r3, r5
 80097fa:	4620      	mov	r0, r4
 80097fc:	4629      	mov	r1, r5
 80097fe:	ec57 6b10 	vmov	r6, r7, d0
 8009802:	f7f7 f99b 	bl	8000b3c <__aeabi_dcmpun>
 8009806:	2800      	cmp	r0, #0
 8009808:	d13b      	bne.n	8009882 <pow+0xa2>
 800980a:	ec51 0b18 	vmov	r0, r1, d8
 800980e:	2200      	movs	r2, #0
 8009810:	2300      	movs	r3, #0
 8009812:	f7f7 f961 	bl	8000ad8 <__aeabi_dcmpeq>
 8009816:	b1b8      	cbz	r0, 8009848 <pow+0x68>
 8009818:	2200      	movs	r2, #0
 800981a:	2300      	movs	r3, #0
 800981c:	4620      	mov	r0, r4
 800981e:	4629      	mov	r1, r5
 8009820:	f7f7 f95a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009824:	2800      	cmp	r0, #0
 8009826:	d146      	bne.n	80098b6 <pow+0xd6>
 8009828:	ec45 4b10 	vmov	d0, r4, r5
 800982c:	f000 f88c 	bl	8009948 <finite>
 8009830:	b338      	cbz	r0, 8009882 <pow+0xa2>
 8009832:	2200      	movs	r2, #0
 8009834:	2300      	movs	r3, #0
 8009836:	4620      	mov	r0, r4
 8009838:	4629      	mov	r1, r5
 800983a:	f7f7 f957 	bl	8000aec <__aeabi_dcmplt>
 800983e:	b300      	cbz	r0, 8009882 <pow+0xa2>
 8009840:	f7fc fbe6 	bl	8006010 <__errno>
 8009844:	2322      	movs	r3, #34	; 0x22
 8009846:	e01b      	b.n	8009880 <pow+0xa0>
 8009848:	ec47 6b10 	vmov	d0, r6, r7
 800984c:	f000 f87c 	bl	8009948 <finite>
 8009850:	b9e0      	cbnz	r0, 800988c <pow+0xac>
 8009852:	eeb0 0a48 	vmov.f32	s0, s16
 8009856:	eef0 0a68 	vmov.f32	s1, s17
 800985a:	f000 f875 	bl	8009948 <finite>
 800985e:	b1a8      	cbz	r0, 800988c <pow+0xac>
 8009860:	ec45 4b10 	vmov	d0, r4, r5
 8009864:	f000 f870 	bl	8009948 <finite>
 8009868:	b180      	cbz	r0, 800988c <pow+0xac>
 800986a:	4632      	mov	r2, r6
 800986c:	463b      	mov	r3, r7
 800986e:	4630      	mov	r0, r6
 8009870:	4639      	mov	r1, r7
 8009872:	f7f7 f963 	bl	8000b3c <__aeabi_dcmpun>
 8009876:	2800      	cmp	r0, #0
 8009878:	d0e2      	beq.n	8009840 <pow+0x60>
 800987a:	f7fc fbc9 	bl	8006010 <__errno>
 800987e:	2321      	movs	r3, #33	; 0x21
 8009880:	6003      	str	r3, [r0, #0]
 8009882:	ecbd 8b02 	vpop	{d8}
 8009886:	ec47 6b10 	vmov	d0, r6, r7
 800988a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800988c:	2200      	movs	r2, #0
 800988e:	2300      	movs	r3, #0
 8009890:	4630      	mov	r0, r6
 8009892:	4639      	mov	r1, r7
 8009894:	f7f7 f920 	bl	8000ad8 <__aeabi_dcmpeq>
 8009898:	2800      	cmp	r0, #0
 800989a:	d0f2      	beq.n	8009882 <pow+0xa2>
 800989c:	eeb0 0a48 	vmov.f32	s0, s16
 80098a0:	eef0 0a68 	vmov.f32	s1, s17
 80098a4:	f000 f850 	bl	8009948 <finite>
 80098a8:	2800      	cmp	r0, #0
 80098aa:	d0ea      	beq.n	8009882 <pow+0xa2>
 80098ac:	ec45 4b10 	vmov	d0, r4, r5
 80098b0:	f000 f84a 	bl	8009948 <finite>
 80098b4:	e7c3      	b.n	800983e <pow+0x5e>
 80098b6:	4f01      	ldr	r7, [pc, #4]	; (80098bc <pow+0xdc>)
 80098b8:	2600      	movs	r6, #0
 80098ba:	e7e2      	b.n	8009882 <pow+0xa2>
 80098bc:	3ff00000 	.word	0x3ff00000

080098c0 <cosf>:
 80098c0:	ee10 3a10 	vmov	r3, s0
 80098c4:	b507      	push	{r0, r1, r2, lr}
 80098c6:	4a1e      	ldr	r2, [pc, #120]	; (8009940 <cosf+0x80>)
 80098c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80098cc:	4293      	cmp	r3, r2
 80098ce:	dc06      	bgt.n	80098de <cosf+0x1e>
 80098d0:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8009944 <cosf+0x84>
 80098d4:	b003      	add	sp, #12
 80098d6:	f85d eb04 	ldr.w	lr, [sp], #4
 80098da:	f000 bd75 	b.w	800a3c8 <__kernel_cosf>
 80098de:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80098e2:	db04      	blt.n	80098ee <cosf+0x2e>
 80098e4:	ee30 0a40 	vsub.f32	s0, s0, s0
 80098e8:	b003      	add	sp, #12
 80098ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80098ee:	4668      	mov	r0, sp
 80098f0:	f000 fe10 	bl	800a514 <__ieee754_rem_pio2f>
 80098f4:	f000 0003 	and.w	r0, r0, #3
 80098f8:	2801      	cmp	r0, #1
 80098fa:	d009      	beq.n	8009910 <cosf+0x50>
 80098fc:	2802      	cmp	r0, #2
 80098fe:	d010      	beq.n	8009922 <cosf+0x62>
 8009900:	b9b0      	cbnz	r0, 8009930 <cosf+0x70>
 8009902:	eddd 0a01 	vldr	s1, [sp, #4]
 8009906:	ed9d 0a00 	vldr	s0, [sp]
 800990a:	f000 fd5d 	bl	800a3c8 <__kernel_cosf>
 800990e:	e7eb      	b.n	80098e8 <cosf+0x28>
 8009910:	eddd 0a01 	vldr	s1, [sp, #4]
 8009914:	ed9d 0a00 	vldr	s0, [sp]
 8009918:	f000 fdb4 	bl	800a484 <__kernel_sinf>
 800991c:	eeb1 0a40 	vneg.f32	s0, s0
 8009920:	e7e2      	b.n	80098e8 <cosf+0x28>
 8009922:	eddd 0a01 	vldr	s1, [sp, #4]
 8009926:	ed9d 0a00 	vldr	s0, [sp]
 800992a:	f000 fd4d 	bl	800a3c8 <__kernel_cosf>
 800992e:	e7f5      	b.n	800991c <cosf+0x5c>
 8009930:	eddd 0a01 	vldr	s1, [sp, #4]
 8009934:	ed9d 0a00 	vldr	s0, [sp]
 8009938:	2001      	movs	r0, #1
 800993a:	f000 fda3 	bl	800a484 <__kernel_sinf>
 800993e:	e7d3      	b.n	80098e8 <cosf+0x28>
 8009940:	3f490fd8 	.word	0x3f490fd8
 8009944:	00000000 	.word	0x00000000

08009948 <finite>:
 8009948:	b082      	sub	sp, #8
 800994a:	ed8d 0b00 	vstr	d0, [sp]
 800994e:	9801      	ldr	r0, [sp, #4]
 8009950:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009954:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009958:	0fc0      	lsrs	r0, r0, #31
 800995a:	b002      	add	sp, #8
 800995c:	4770      	bx	lr
	...

08009960 <__ieee754_pow>:
 8009960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009964:	ed2d 8b06 	vpush	{d8-d10}
 8009968:	b089      	sub	sp, #36	; 0x24
 800996a:	ed8d 1b00 	vstr	d1, [sp]
 800996e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009972:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009976:	ea58 0102 	orrs.w	r1, r8, r2
 800997a:	ec57 6b10 	vmov	r6, r7, d0
 800997e:	d115      	bne.n	80099ac <__ieee754_pow+0x4c>
 8009980:	19b3      	adds	r3, r6, r6
 8009982:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8009986:	4152      	adcs	r2, r2
 8009988:	4299      	cmp	r1, r3
 800998a:	4b89      	ldr	r3, [pc, #548]	; (8009bb0 <__ieee754_pow+0x250>)
 800998c:	4193      	sbcs	r3, r2
 800998e:	f080 84d1 	bcs.w	800a334 <__ieee754_pow+0x9d4>
 8009992:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009996:	4630      	mov	r0, r6
 8009998:	4639      	mov	r1, r7
 800999a:	f7f6 fc7f 	bl	800029c <__adddf3>
 800999e:	ec41 0b10 	vmov	d0, r0, r1
 80099a2:	b009      	add	sp, #36	; 0x24
 80099a4:	ecbd 8b06 	vpop	{d8-d10}
 80099a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ac:	4b81      	ldr	r3, [pc, #516]	; (8009bb4 <__ieee754_pow+0x254>)
 80099ae:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80099b2:	429c      	cmp	r4, r3
 80099b4:	ee10 aa10 	vmov	sl, s0
 80099b8:	463d      	mov	r5, r7
 80099ba:	dc06      	bgt.n	80099ca <__ieee754_pow+0x6a>
 80099bc:	d101      	bne.n	80099c2 <__ieee754_pow+0x62>
 80099be:	2e00      	cmp	r6, #0
 80099c0:	d1e7      	bne.n	8009992 <__ieee754_pow+0x32>
 80099c2:	4598      	cmp	r8, r3
 80099c4:	dc01      	bgt.n	80099ca <__ieee754_pow+0x6a>
 80099c6:	d10f      	bne.n	80099e8 <__ieee754_pow+0x88>
 80099c8:	b172      	cbz	r2, 80099e8 <__ieee754_pow+0x88>
 80099ca:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80099ce:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80099d2:	ea55 050a 	orrs.w	r5, r5, sl
 80099d6:	d1dc      	bne.n	8009992 <__ieee754_pow+0x32>
 80099d8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80099dc:	18db      	adds	r3, r3, r3
 80099de:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80099e2:	4152      	adcs	r2, r2
 80099e4:	429d      	cmp	r5, r3
 80099e6:	e7d0      	b.n	800998a <__ieee754_pow+0x2a>
 80099e8:	2d00      	cmp	r5, #0
 80099ea:	da3b      	bge.n	8009a64 <__ieee754_pow+0x104>
 80099ec:	4b72      	ldr	r3, [pc, #456]	; (8009bb8 <__ieee754_pow+0x258>)
 80099ee:	4598      	cmp	r8, r3
 80099f0:	dc51      	bgt.n	8009a96 <__ieee754_pow+0x136>
 80099f2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80099f6:	4598      	cmp	r8, r3
 80099f8:	f340 84ab 	ble.w	800a352 <__ieee754_pow+0x9f2>
 80099fc:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009a00:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009a04:	2b14      	cmp	r3, #20
 8009a06:	dd0f      	ble.n	8009a28 <__ieee754_pow+0xc8>
 8009a08:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009a0c:	fa22 f103 	lsr.w	r1, r2, r3
 8009a10:	fa01 f303 	lsl.w	r3, r1, r3
 8009a14:	4293      	cmp	r3, r2
 8009a16:	f040 849c 	bne.w	800a352 <__ieee754_pow+0x9f2>
 8009a1a:	f001 0101 	and.w	r1, r1, #1
 8009a1e:	f1c1 0302 	rsb	r3, r1, #2
 8009a22:	9304      	str	r3, [sp, #16]
 8009a24:	b182      	cbz	r2, 8009a48 <__ieee754_pow+0xe8>
 8009a26:	e05f      	b.n	8009ae8 <__ieee754_pow+0x188>
 8009a28:	2a00      	cmp	r2, #0
 8009a2a:	d15b      	bne.n	8009ae4 <__ieee754_pow+0x184>
 8009a2c:	f1c3 0314 	rsb	r3, r3, #20
 8009a30:	fa48 f103 	asr.w	r1, r8, r3
 8009a34:	fa01 f303 	lsl.w	r3, r1, r3
 8009a38:	4543      	cmp	r3, r8
 8009a3a:	f040 8487 	bne.w	800a34c <__ieee754_pow+0x9ec>
 8009a3e:	f001 0101 	and.w	r1, r1, #1
 8009a42:	f1c1 0302 	rsb	r3, r1, #2
 8009a46:	9304      	str	r3, [sp, #16]
 8009a48:	4b5c      	ldr	r3, [pc, #368]	; (8009bbc <__ieee754_pow+0x25c>)
 8009a4a:	4598      	cmp	r8, r3
 8009a4c:	d132      	bne.n	8009ab4 <__ieee754_pow+0x154>
 8009a4e:	f1b9 0f00 	cmp.w	r9, #0
 8009a52:	f280 8477 	bge.w	800a344 <__ieee754_pow+0x9e4>
 8009a56:	4959      	ldr	r1, [pc, #356]	; (8009bbc <__ieee754_pow+0x25c>)
 8009a58:	4632      	mov	r2, r6
 8009a5a:	463b      	mov	r3, r7
 8009a5c:	2000      	movs	r0, #0
 8009a5e:	f7f6 fefd 	bl	800085c <__aeabi_ddiv>
 8009a62:	e79c      	b.n	800999e <__ieee754_pow+0x3e>
 8009a64:	2300      	movs	r3, #0
 8009a66:	9304      	str	r3, [sp, #16]
 8009a68:	2a00      	cmp	r2, #0
 8009a6a:	d13d      	bne.n	8009ae8 <__ieee754_pow+0x188>
 8009a6c:	4b51      	ldr	r3, [pc, #324]	; (8009bb4 <__ieee754_pow+0x254>)
 8009a6e:	4598      	cmp	r8, r3
 8009a70:	d1ea      	bne.n	8009a48 <__ieee754_pow+0xe8>
 8009a72:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009a76:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009a7a:	ea53 030a 	orrs.w	r3, r3, sl
 8009a7e:	f000 8459 	beq.w	800a334 <__ieee754_pow+0x9d4>
 8009a82:	4b4f      	ldr	r3, [pc, #316]	; (8009bc0 <__ieee754_pow+0x260>)
 8009a84:	429c      	cmp	r4, r3
 8009a86:	dd08      	ble.n	8009a9a <__ieee754_pow+0x13a>
 8009a88:	f1b9 0f00 	cmp.w	r9, #0
 8009a8c:	f2c0 8456 	blt.w	800a33c <__ieee754_pow+0x9dc>
 8009a90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a94:	e783      	b.n	800999e <__ieee754_pow+0x3e>
 8009a96:	2302      	movs	r3, #2
 8009a98:	e7e5      	b.n	8009a66 <__ieee754_pow+0x106>
 8009a9a:	f1b9 0f00 	cmp.w	r9, #0
 8009a9e:	f04f 0000 	mov.w	r0, #0
 8009aa2:	f04f 0100 	mov.w	r1, #0
 8009aa6:	f6bf af7a 	bge.w	800999e <__ieee754_pow+0x3e>
 8009aaa:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009aae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009ab2:	e774      	b.n	800999e <__ieee754_pow+0x3e>
 8009ab4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009ab8:	d106      	bne.n	8009ac8 <__ieee754_pow+0x168>
 8009aba:	4632      	mov	r2, r6
 8009abc:	463b      	mov	r3, r7
 8009abe:	4630      	mov	r0, r6
 8009ac0:	4639      	mov	r1, r7
 8009ac2:	f7f6 fda1 	bl	8000608 <__aeabi_dmul>
 8009ac6:	e76a      	b.n	800999e <__ieee754_pow+0x3e>
 8009ac8:	4b3e      	ldr	r3, [pc, #248]	; (8009bc4 <__ieee754_pow+0x264>)
 8009aca:	4599      	cmp	r9, r3
 8009acc:	d10c      	bne.n	8009ae8 <__ieee754_pow+0x188>
 8009ace:	2d00      	cmp	r5, #0
 8009ad0:	db0a      	blt.n	8009ae8 <__ieee754_pow+0x188>
 8009ad2:	ec47 6b10 	vmov	d0, r6, r7
 8009ad6:	b009      	add	sp, #36	; 0x24
 8009ad8:	ecbd 8b06 	vpop	{d8-d10}
 8009adc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae0:	f000 befc 	b.w	800a8dc <__ieee754_sqrt>
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	9304      	str	r3, [sp, #16]
 8009ae8:	ec47 6b10 	vmov	d0, r6, r7
 8009aec:	f000 fc62 	bl	800a3b4 <fabs>
 8009af0:	ec51 0b10 	vmov	r0, r1, d0
 8009af4:	f1ba 0f00 	cmp.w	sl, #0
 8009af8:	d129      	bne.n	8009b4e <__ieee754_pow+0x1ee>
 8009afa:	b124      	cbz	r4, 8009b06 <__ieee754_pow+0x1a6>
 8009afc:	4b2f      	ldr	r3, [pc, #188]	; (8009bbc <__ieee754_pow+0x25c>)
 8009afe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d123      	bne.n	8009b4e <__ieee754_pow+0x1ee>
 8009b06:	f1b9 0f00 	cmp.w	r9, #0
 8009b0a:	da05      	bge.n	8009b18 <__ieee754_pow+0x1b8>
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	460b      	mov	r3, r1
 8009b10:	2000      	movs	r0, #0
 8009b12:	492a      	ldr	r1, [pc, #168]	; (8009bbc <__ieee754_pow+0x25c>)
 8009b14:	f7f6 fea2 	bl	800085c <__aeabi_ddiv>
 8009b18:	2d00      	cmp	r5, #0
 8009b1a:	f6bf af40 	bge.w	800999e <__ieee754_pow+0x3e>
 8009b1e:	9b04      	ldr	r3, [sp, #16]
 8009b20:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009b24:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009b28:	431c      	orrs	r4, r3
 8009b2a:	d108      	bne.n	8009b3e <__ieee754_pow+0x1de>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	460b      	mov	r3, r1
 8009b30:	4610      	mov	r0, r2
 8009b32:	4619      	mov	r1, r3
 8009b34:	f7f6 fbb0 	bl	8000298 <__aeabi_dsub>
 8009b38:	4602      	mov	r2, r0
 8009b3a:	460b      	mov	r3, r1
 8009b3c:	e78f      	b.n	8009a5e <__ieee754_pow+0xfe>
 8009b3e:	9b04      	ldr	r3, [sp, #16]
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	f47f af2c 	bne.w	800999e <__ieee754_pow+0x3e>
 8009b46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	e727      	b.n	800999e <__ieee754_pow+0x3e>
 8009b4e:	0feb      	lsrs	r3, r5, #31
 8009b50:	3b01      	subs	r3, #1
 8009b52:	9306      	str	r3, [sp, #24]
 8009b54:	9a06      	ldr	r2, [sp, #24]
 8009b56:	9b04      	ldr	r3, [sp, #16]
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	d102      	bne.n	8009b62 <__ieee754_pow+0x202>
 8009b5c:	4632      	mov	r2, r6
 8009b5e:	463b      	mov	r3, r7
 8009b60:	e7e6      	b.n	8009b30 <__ieee754_pow+0x1d0>
 8009b62:	4b19      	ldr	r3, [pc, #100]	; (8009bc8 <__ieee754_pow+0x268>)
 8009b64:	4598      	cmp	r8, r3
 8009b66:	f340 80fb 	ble.w	8009d60 <__ieee754_pow+0x400>
 8009b6a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009b6e:	4598      	cmp	r8, r3
 8009b70:	4b13      	ldr	r3, [pc, #76]	; (8009bc0 <__ieee754_pow+0x260>)
 8009b72:	dd0c      	ble.n	8009b8e <__ieee754_pow+0x22e>
 8009b74:	429c      	cmp	r4, r3
 8009b76:	dc0f      	bgt.n	8009b98 <__ieee754_pow+0x238>
 8009b78:	f1b9 0f00 	cmp.w	r9, #0
 8009b7c:	da0f      	bge.n	8009b9e <__ieee754_pow+0x23e>
 8009b7e:	2000      	movs	r0, #0
 8009b80:	b009      	add	sp, #36	; 0x24
 8009b82:	ecbd 8b06 	vpop	{d8-d10}
 8009b86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b8a:	f000 be9e 	b.w	800a8ca <__math_oflow>
 8009b8e:	429c      	cmp	r4, r3
 8009b90:	dbf2      	blt.n	8009b78 <__ieee754_pow+0x218>
 8009b92:	4b0a      	ldr	r3, [pc, #40]	; (8009bbc <__ieee754_pow+0x25c>)
 8009b94:	429c      	cmp	r4, r3
 8009b96:	dd19      	ble.n	8009bcc <__ieee754_pow+0x26c>
 8009b98:	f1b9 0f00 	cmp.w	r9, #0
 8009b9c:	dcef      	bgt.n	8009b7e <__ieee754_pow+0x21e>
 8009b9e:	2000      	movs	r0, #0
 8009ba0:	b009      	add	sp, #36	; 0x24
 8009ba2:	ecbd 8b06 	vpop	{d8-d10}
 8009ba6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009baa:	f000 be85 	b.w	800a8b8 <__math_uflow>
 8009bae:	bf00      	nop
 8009bb0:	fff00000 	.word	0xfff00000
 8009bb4:	7ff00000 	.word	0x7ff00000
 8009bb8:	433fffff 	.word	0x433fffff
 8009bbc:	3ff00000 	.word	0x3ff00000
 8009bc0:	3fefffff 	.word	0x3fefffff
 8009bc4:	3fe00000 	.word	0x3fe00000
 8009bc8:	41e00000 	.word	0x41e00000
 8009bcc:	4b60      	ldr	r3, [pc, #384]	; (8009d50 <__ieee754_pow+0x3f0>)
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f7f6 fb62 	bl	8000298 <__aeabi_dsub>
 8009bd4:	a354      	add	r3, pc, #336	; (adr r3, 8009d28 <__ieee754_pow+0x3c8>)
 8009bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bda:	4604      	mov	r4, r0
 8009bdc:	460d      	mov	r5, r1
 8009bde:	f7f6 fd13 	bl	8000608 <__aeabi_dmul>
 8009be2:	a353      	add	r3, pc, #332	; (adr r3, 8009d30 <__ieee754_pow+0x3d0>)
 8009be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be8:	4606      	mov	r6, r0
 8009bea:	460f      	mov	r7, r1
 8009bec:	4620      	mov	r0, r4
 8009bee:	4629      	mov	r1, r5
 8009bf0:	f7f6 fd0a 	bl	8000608 <__aeabi_dmul>
 8009bf4:	4b57      	ldr	r3, [pc, #348]	; (8009d54 <__ieee754_pow+0x3f4>)
 8009bf6:	4682      	mov	sl, r0
 8009bf8:	468b      	mov	fp, r1
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	4620      	mov	r0, r4
 8009bfe:	4629      	mov	r1, r5
 8009c00:	f7f6 fd02 	bl	8000608 <__aeabi_dmul>
 8009c04:	4602      	mov	r2, r0
 8009c06:	460b      	mov	r3, r1
 8009c08:	a14b      	add	r1, pc, #300	; (adr r1, 8009d38 <__ieee754_pow+0x3d8>)
 8009c0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c0e:	f7f6 fb43 	bl	8000298 <__aeabi_dsub>
 8009c12:	4622      	mov	r2, r4
 8009c14:	462b      	mov	r3, r5
 8009c16:	f7f6 fcf7 	bl	8000608 <__aeabi_dmul>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	2000      	movs	r0, #0
 8009c20:	494d      	ldr	r1, [pc, #308]	; (8009d58 <__ieee754_pow+0x3f8>)
 8009c22:	f7f6 fb39 	bl	8000298 <__aeabi_dsub>
 8009c26:	4622      	mov	r2, r4
 8009c28:	4680      	mov	r8, r0
 8009c2a:	4689      	mov	r9, r1
 8009c2c:	462b      	mov	r3, r5
 8009c2e:	4620      	mov	r0, r4
 8009c30:	4629      	mov	r1, r5
 8009c32:	f7f6 fce9 	bl	8000608 <__aeabi_dmul>
 8009c36:	4602      	mov	r2, r0
 8009c38:	460b      	mov	r3, r1
 8009c3a:	4640      	mov	r0, r8
 8009c3c:	4649      	mov	r1, r9
 8009c3e:	f7f6 fce3 	bl	8000608 <__aeabi_dmul>
 8009c42:	a33f      	add	r3, pc, #252	; (adr r3, 8009d40 <__ieee754_pow+0x3e0>)
 8009c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c48:	f7f6 fcde 	bl	8000608 <__aeabi_dmul>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	460b      	mov	r3, r1
 8009c50:	4650      	mov	r0, sl
 8009c52:	4659      	mov	r1, fp
 8009c54:	f7f6 fb20 	bl	8000298 <__aeabi_dsub>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	4680      	mov	r8, r0
 8009c5e:	4689      	mov	r9, r1
 8009c60:	4630      	mov	r0, r6
 8009c62:	4639      	mov	r1, r7
 8009c64:	f7f6 fb1a 	bl	800029c <__adddf3>
 8009c68:	2000      	movs	r0, #0
 8009c6a:	4632      	mov	r2, r6
 8009c6c:	463b      	mov	r3, r7
 8009c6e:	4604      	mov	r4, r0
 8009c70:	460d      	mov	r5, r1
 8009c72:	f7f6 fb11 	bl	8000298 <__aeabi_dsub>
 8009c76:	4602      	mov	r2, r0
 8009c78:	460b      	mov	r3, r1
 8009c7a:	4640      	mov	r0, r8
 8009c7c:	4649      	mov	r1, r9
 8009c7e:	f7f6 fb0b 	bl	8000298 <__aeabi_dsub>
 8009c82:	9b04      	ldr	r3, [sp, #16]
 8009c84:	9a06      	ldr	r2, [sp, #24]
 8009c86:	3b01      	subs	r3, #1
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	4682      	mov	sl, r0
 8009c8c:	468b      	mov	fp, r1
 8009c8e:	f040 81e7 	bne.w	800a060 <__ieee754_pow+0x700>
 8009c92:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8009d48 <__ieee754_pow+0x3e8>
 8009c96:	eeb0 8a47 	vmov.f32	s16, s14
 8009c9a:	eef0 8a67 	vmov.f32	s17, s15
 8009c9e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009ca2:	2600      	movs	r6, #0
 8009ca4:	4632      	mov	r2, r6
 8009ca6:	463b      	mov	r3, r7
 8009ca8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009cac:	f7f6 faf4 	bl	8000298 <__aeabi_dsub>
 8009cb0:	4622      	mov	r2, r4
 8009cb2:	462b      	mov	r3, r5
 8009cb4:	f7f6 fca8 	bl	8000608 <__aeabi_dmul>
 8009cb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009cbc:	4680      	mov	r8, r0
 8009cbe:	4689      	mov	r9, r1
 8009cc0:	4650      	mov	r0, sl
 8009cc2:	4659      	mov	r1, fp
 8009cc4:	f7f6 fca0 	bl	8000608 <__aeabi_dmul>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	460b      	mov	r3, r1
 8009ccc:	4640      	mov	r0, r8
 8009cce:	4649      	mov	r1, r9
 8009cd0:	f7f6 fae4 	bl	800029c <__adddf3>
 8009cd4:	4632      	mov	r2, r6
 8009cd6:	463b      	mov	r3, r7
 8009cd8:	4680      	mov	r8, r0
 8009cda:	4689      	mov	r9, r1
 8009cdc:	4620      	mov	r0, r4
 8009cde:	4629      	mov	r1, r5
 8009ce0:	f7f6 fc92 	bl	8000608 <__aeabi_dmul>
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	4604      	mov	r4, r0
 8009ce8:	460d      	mov	r5, r1
 8009cea:	4602      	mov	r2, r0
 8009cec:	4649      	mov	r1, r9
 8009cee:	4640      	mov	r0, r8
 8009cf0:	f7f6 fad4 	bl	800029c <__adddf3>
 8009cf4:	4b19      	ldr	r3, [pc, #100]	; (8009d5c <__ieee754_pow+0x3fc>)
 8009cf6:	4299      	cmp	r1, r3
 8009cf8:	ec45 4b19 	vmov	d9, r4, r5
 8009cfc:	4606      	mov	r6, r0
 8009cfe:	460f      	mov	r7, r1
 8009d00:	468b      	mov	fp, r1
 8009d02:	f340 82f0 	ble.w	800a2e6 <__ieee754_pow+0x986>
 8009d06:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009d0a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009d0e:	4303      	orrs	r3, r0
 8009d10:	f000 81e4 	beq.w	800a0dc <__ieee754_pow+0x77c>
 8009d14:	ec51 0b18 	vmov	r0, r1, d8
 8009d18:	2200      	movs	r2, #0
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	f7f6 fee6 	bl	8000aec <__aeabi_dcmplt>
 8009d20:	3800      	subs	r0, #0
 8009d22:	bf18      	it	ne
 8009d24:	2001      	movne	r0, #1
 8009d26:	e72b      	b.n	8009b80 <__ieee754_pow+0x220>
 8009d28:	60000000 	.word	0x60000000
 8009d2c:	3ff71547 	.word	0x3ff71547
 8009d30:	f85ddf44 	.word	0xf85ddf44
 8009d34:	3e54ae0b 	.word	0x3e54ae0b
 8009d38:	55555555 	.word	0x55555555
 8009d3c:	3fd55555 	.word	0x3fd55555
 8009d40:	652b82fe 	.word	0x652b82fe
 8009d44:	3ff71547 	.word	0x3ff71547
 8009d48:	00000000 	.word	0x00000000
 8009d4c:	bff00000 	.word	0xbff00000
 8009d50:	3ff00000 	.word	0x3ff00000
 8009d54:	3fd00000 	.word	0x3fd00000
 8009d58:	3fe00000 	.word	0x3fe00000
 8009d5c:	408fffff 	.word	0x408fffff
 8009d60:	4bd5      	ldr	r3, [pc, #852]	; (800a0b8 <__ieee754_pow+0x758>)
 8009d62:	402b      	ands	r3, r5
 8009d64:	2200      	movs	r2, #0
 8009d66:	b92b      	cbnz	r3, 8009d74 <__ieee754_pow+0x414>
 8009d68:	4bd4      	ldr	r3, [pc, #848]	; (800a0bc <__ieee754_pow+0x75c>)
 8009d6a:	f7f6 fc4d 	bl	8000608 <__aeabi_dmul>
 8009d6e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009d72:	460c      	mov	r4, r1
 8009d74:	1523      	asrs	r3, r4, #20
 8009d76:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009d7a:	4413      	add	r3, r2
 8009d7c:	9305      	str	r3, [sp, #20]
 8009d7e:	4bd0      	ldr	r3, [pc, #832]	; (800a0c0 <__ieee754_pow+0x760>)
 8009d80:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009d84:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009d88:	429c      	cmp	r4, r3
 8009d8a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009d8e:	dd08      	ble.n	8009da2 <__ieee754_pow+0x442>
 8009d90:	4bcc      	ldr	r3, [pc, #816]	; (800a0c4 <__ieee754_pow+0x764>)
 8009d92:	429c      	cmp	r4, r3
 8009d94:	f340 8162 	ble.w	800a05c <__ieee754_pow+0x6fc>
 8009d98:	9b05      	ldr	r3, [sp, #20]
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	9305      	str	r3, [sp, #20]
 8009d9e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009da2:	2400      	movs	r4, #0
 8009da4:	00e3      	lsls	r3, r4, #3
 8009da6:	9307      	str	r3, [sp, #28]
 8009da8:	4bc7      	ldr	r3, [pc, #796]	; (800a0c8 <__ieee754_pow+0x768>)
 8009daa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009dae:	ed93 7b00 	vldr	d7, [r3]
 8009db2:	4629      	mov	r1, r5
 8009db4:	ec53 2b17 	vmov	r2, r3, d7
 8009db8:	eeb0 9a47 	vmov.f32	s18, s14
 8009dbc:	eef0 9a67 	vmov.f32	s19, s15
 8009dc0:	4682      	mov	sl, r0
 8009dc2:	f7f6 fa69 	bl	8000298 <__aeabi_dsub>
 8009dc6:	4652      	mov	r2, sl
 8009dc8:	4606      	mov	r6, r0
 8009dca:	460f      	mov	r7, r1
 8009dcc:	462b      	mov	r3, r5
 8009dce:	ec51 0b19 	vmov	r0, r1, d9
 8009dd2:	f7f6 fa63 	bl	800029c <__adddf3>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	460b      	mov	r3, r1
 8009dda:	2000      	movs	r0, #0
 8009ddc:	49bb      	ldr	r1, [pc, #748]	; (800a0cc <__ieee754_pow+0x76c>)
 8009dde:	f7f6 fd3d 	bl	800085c <__aeabi_ddiv>
 8009de2:	ec41 0b1a 	vmov	d10, r0, r1
 8009de6:	4602      	mov	r2, r0
 8009de8:	460b      	mov	r3, r1
 8009dea:	4630      	mov	r0, r6
 8009dec:	4639      	mov	r1, r7
 8009dee:	f7f6 fc0b 	bl	8000608 <__aeabi_dmul>
 8009df2:	2300      	movs	r3, #0
 8009df4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009df8:	9302      	str	r3, [sp, #8]
 8009dfa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009dfe:	46ab      	mov	fp, r5
 8009e00:	106d      	asrs	r5, r5, #1
 8009e02:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009e06:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009e0a:	ec41 0b18 	vmov	d8, r0, r1
 8009e0e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009e12:	2200      	movs	r2, #0
 8009e14:	4640      	mov	r0, r8
 8009e16:	4649      	mov	r1, r9
 8009e18:	4614      	mov	r4, r2
 8009e1a:	461d      	mov	r5, r3
 8009e1c:	f7f6 fbf4 	bl	8000608 <__aeabi_dmul>
 8009e20:	4602      	mov	r2, r0
 8009e22:	460b      	mov	r3, r1
 8009e24:	4630      	mov	r0, r6
 8009e26:	4639      	mov	r1, r7
 8009e28:	f7f6 fa36 	bl	8000298 <__aeabi_dsub>
 8009e2c:	ec53 2b19 	vmov	r2, r3, d9
 8009e30:	4606      	mov	r6, r0
 8009e32:	460f      	mov	r7, r1
 8009e34:	4620      	mov	r0, r4
 8009e36:	4629      	mov	r1, r5
 8009e38:	f7f6 fa2e 	bl	8000298 <__aeabi_dsub>
 8009e3c:	4602      	mov	r2, r0
 8009e3e:	460b      	mov	r3, r1
 8009e40:	4650      	mov	r0, sl
 8009e42:	4659      	mov	r1, fp
 8009e44:	f7f6 fa28 	bl	8000298 <__aeabi_dsub>
 8009e48:	4642      	mov	r2, r8
 8009e4a:	464b      	mov	r3, r9
 8009e4c:	f7f6 fbdc 	bl	8000608 <__aeabi_dmul>
 8009e50:	4602      	mov	r2, r0
 8009e52:	460b      	mov	r3, r1
 8009e54:	4630      	mov	r0, r6
 8009e56:	4639      	mov	r1, r7
 8009e58:	f7f6 fa1e 	bl	8000298 <__aeabi_dsub>
 8009e5c:	ec53 2b1a 	vmov	r2, r3, d10
 8009e60:	f7f6 fbd2 	bl	8000608 <__aeabi_dmul>
 8009e64:	ec53 2b18 	vmov	r2, r3, d8
 8009e68:	ec41 0b19 	vmov	d9, r0, r1
 8009e6c:	ec51 0b18 	vmov	r0, r1, d8
 8009e70:	f7f6 fbca 	bl	8000608 <__aeabi_dmul>
 8009e74:	a37c      	add	r3, pc, #496	; (adr r3, 800a068 <__ieee754_pow+0x708>)
 8009e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7a:	4604      	mov	r4, r0
 8009e7c:	460d      	mov	r5, r1
 8009e7e:	f7f6 fbc3 	bl	8000608 <__aeabi_dmul>
 8009e82:	a37b      	add	r3, pc, #492	; (adr r3, 800a070 <__ieee754_pow+0x710>)
 8009e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e88:	f7f6 fa08 	bl	800029c <__adddf3>
 8009e8c:	4622      	mov	r2, r4
 8009e8e:	462b      	mov	r3, r5
 8009e90:	f7f6 fbba 	bl	8000608 <__aeabi_dmul>
 8009e94:	a378      	add	r3, pc, #480	; (adr r3, 800a078 <__ieee754_pow+0x718>)
 8009e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9a:	f7f6 f9ff 	bl	800029c <__adddf3>
 8009e9e:	4622      	mov	r2, r4
 8009ea0:	462b      	mov	r3, r5
 8009ea2:	f7f6 fbb1 	bl	8000608 <__aeabi_dmul>
 8009ea6:	a376      	add	r3, pc, #472	; (adr r3, 800a080 <__ieee754_pow+0x720>)
 8009ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eac:	f7f6 f9f6 	bl	800029c <__adddf3>
 8009eb0:	4622      	mov	r2, r4
 8009eb2:	462b      	mov	r3, r5
 8009eb4:	f7f6 fba8 	bl	8000608 <__aeabi_dmul>
 8009eb8:	a373      	add	r3, pc, #460	; (adr r3, 800a088 <__ieee754_pow+0x728>)
 8009eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ebe:	f7f6 f9ed 	bl	800029c <__adddf3>
 8009ec2:	4622      	mov	r2, r4
 8009ec4:	462b      	mov	r3, r5
 8009ec6:	f7f6 fb9f 	bl	8000608 <__aeabi_dmul>
 8009eca:	a371      	add	r3, pc, #452	; (adr r3, 800a090 <__ieee754_pow+0x730>)
 8009ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed0:	f7f6 f9e4 	bl	800029c <__adddf3>
 8009ed4:	4622      	mov	r2, r4
 8009ed6:	4606      	mov	r6, r0
 8009ed8:	460f      	mov	r7, r1
 8009eda:	462b      	mov	r3, r5
 8009edc:	4620      	mov	r0, r4
 8009ede:	4629      	mov	r1, r5
 8009ee0:	f7f6 fb92 	bl	8000608 <__aeabi_dmul>
 8009ee4:	4602      	mov	r2, r0
 8009ee6:	460b      	mov	r3, r1
 8009ee8:	4630      	mov	r0, r6
 8009eea:	4639      	mov	r1, r7
 8009eec:	f7f6 fb8c 	bl	8000608 <__aeabi_dmul>
 8009ef0:	4642      	mov	r2, r8
 8009ef2:	4604      	mov	r4, r0
 8009ef4:	460d      	mov	r5, r1
 8009ef6:	464b      	mov	r3, r9
 8009ef8:	ec51 0b18 	vmov	r0, r1, d8
 8009efc:	f7f6 f9ce 	bl	800029c <__adddf3>
 8009f00:	ec53 2b19 	vmov	r2, r3, d9
 8009f04:	f7f6 fb80 	bl	8000608 <__aeabi_dmul>
 8009f08:	4622      	mov	r2, r4
 8009f0a:	462b      	mov	r3, r5
 8009f0c:	f7f6 f9c6 	bl	800029c <__adddf3>
 8009f10:	4642      	mov	r2, r8
 8009f12:	4682      	mov	sl, r0
 8009f14:	468b      	mov	fp, r1
 8009f16:	464b      	mov	r3, r9
 8009f18:	4640      	mov	r0, r8
 8009f1a:	4649      	mov	r1, r9
 8009f1c:	f7f6 fb74 	bl	8000608 <__aeabi_dmul>
 8009f20:	4b6b      	ldr	r3, [pc, #428]	; (800a0d0 <__ieee754_pow+0x770>)
 8009f22:	2200      	movs	r2, #0
 8009f24:	4606      	mov	r6, r0
 8009f26:	460f      	mov	r7, r1
 8009f28:	f7f6 f9b8 	bl	800029c <__adddf3>
 8009f2c:	4652      	mov	r2, sl
 8009f2e:	465b      	mov	r3, fp
 8009f30:	f7f6 f9b4 	bl	800029c <__adddf3>
 8009f34:	2000      	movs	r0, #0
 8009f36:	4604      	mov	r4, r0
 8009f38:	460d      	mov	r5, r1
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	4640      	mov	r0, r8
 8009f40:	4649      	mov	r1, r9
 8009f42:	f7f6 fb61 	bl	8000608 <__aeabi_dmul>
 8009f46:	4b62      	ldr	r3, [pc, #392]	; (800a0d0 <__ieee754_pow+0x770>)
 8009f48:	4680      	mov	r8, r0
 8009f4a:	4689      	mov	r9, r1
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	4620      	mov	r0, r4
 8009f50:	4629      	mov	r1, r5
 8009f52:	f7f6 f9a1 	bl	8000298 <__aeabi_dsub>
 8009f56:	4632      	mov	r2, r6
 8009f58:	463b      	mov	r3, r7
 8009f5a:	f7f6 f99d 	bl	8000298 <__aeabi_dsub>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	460b      	mov	r3, r1
 8009f62:	4650      	mov	r0, sl
 8009f64:	4659      	mov	r1, fp
 8009f66:	f7f6 f997 	bl	8000298 <__aeabi_dsub>
 8009f6a:	ec53 2b18 	vmov	r2, r3, d8
 8009f6e:	f7f6 fb4b 	bl	8000608 <__aeabi_dmul>
 8009f72:	4622      	mov	r2, r4
 8009f74:	4606      	mov	r6, r0
 8009f76:	460f      	mov	r7, r1
 8009f78:	462b      	mov	r3, r5
 8009f7a:	ec51 0b19 	vmov	r0, r1, d9
 8009f7e:	f7f6 fb43 	bl	8000608 <__aeabi_dmul>
 8009f82:	4602      	mov	r2, r0
 8009f84:	460b      	mov	r3, r1
 8009f86:	4630      	mov	r0, r6
 8009f88:	4639      	mov	r1, r7
 8009f8a:	f7f6 f987 	bl	800029c <__adddf3>
 8009f8e:	4606      	mov	r6, r0
 8009f90:	460f      	mov	r7, r1
 8009f92:	4602      	mov	r2, r0
 8009f94:	460b      	mov	r3, r1
 8009f96:	4640      	mov	r0, r8
 8009f98:	4649      	mov	r1, r9
 8009f9a:	f7f6 f97f 	bl	800029c <__adddf3>
 8009f9e:	a33e      	add	r3, pc, #248	; (adr r3, 800a098 <__ieee754_pow+0x738>)
 8009fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa4:	2000      	movs	r0, #0
 8009fa6:	4604      	mov	r4, r0
 8009fa8:	460d      	mov	r5, r1
 8009faa:	f7f6 fb2d 	bl	8000608 <__aeabi_dmul>
 8009fae:	4642      	mov	r2, r8
 8009fb0:	ec41 0b18 	vmov	d8, r0, r1
 8009fb4:	464b      	mov	r3, r9
 8009fb6:	4620      	mov	r0, r4
 8009fb8:	4629      	mov	r1, r5
 8009fba:	f7f6 f96d 	bl	8000298 <__aeabi_dsub>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	4630      	mov	r0, r6
 8009fc4:	4639      	mov	r1, r7
 8009fc6:	f7f6 f967 	bl	8000298 <__aeabi_dsub>
 8009fca:	a335      	add	r3, pc, #212	; (adr r3, 800a0a0 <__ieee754_pow+0x740>)
 8009fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd0:	f7f6 fb1a 	bl	8000608 <__aeabi_dmul>
 8009fd4:	a334      	add	r3, pc, #208	; (adr r3, 800a0a8 <__ieee754_pow+0x748>)
 8009fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fda:	4606      	mov	r6, r0
 8009fdc:	460f      	mov	r7, r1
 8009fde:	4620      	mov	r0, r4
 8009fe0:	4629      	mov	r1, r5
 8009fe2:	f7f6 fb11 	bl	8000608 <__aeabi_dmul>
 8009fe6:	4602      	mov	r2, r0
 8009fe8:	460b      	mov	r3, r1
 8009fea:	4630      	mov	r0, r6
 8009fec:	4639      	mov	r1, r7
 8009fee:	f7f6 f955 	bl	800029c <__adddf3>
 8009ff2:	9a07      	ldr	r2, [sp, #28]
 8009ff4:	4b37      	ldr	r3, [pc, #220]	; (800a0d4 <__ieee754_pow+0x774>)
 8009ff6:	4413      	add	r3, r2
 8009ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffc:	f7f6 f94e 	bl	800029c <__adddf3>
 800a000:	4682      	mov	sl, r0
 800a002:	9805      	ldr	r0, [sp, #20]
 800a004:	468b      	mov	fp, r1
 800a006:	f7f6 fa95 	bl	8000534 <__aeabi_i2d>
 800a00a:	9a07      	ldr	r2, [sp, #28]
 800a00c:	4b32      	ldr	r3, [pc, #200]	; (800a0d8 <__ieee754_pow+0x778>)
 800a00e:	4413      	add	r3, r2
 800a010:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a014:	4606      	mov	r6, r0
 800a016:	460f      	mov	r7, r1
 800a018:	4652      	mov	r2, sl
 800a01a:	465b      	mov	r3, fp
 800a01c:	ec51 0b18 	vmov	r0, r1, d8
 800a020:	f7f6 f93c 	bl	800029c <__adddf3>
 800a024:	4642      	mov	r2, r8
 800a026:	464b      	mov	r3, r9
 800a028:	f7f6 f938 	bl	800029c <__adddf3>
 800a02c:	4632      	mov	r2, r6
 800a02e:	463b      	mov	r3, r7
 800a030:	f7f6 f934 	bl	800029c <__adddf3>
 800a034:	2000      	movs	r0, #0
 800a036:	4632      	mov	r2, r6
 800a038:	463b      	mov	r3, r7
 800a03a:	4604      	mov	r4, r0
 800a03c:	460d      	mov	r5, r1
 800a03e:	f7f6 f92b 	bl	8000298 <__aeabi_dsub>
 800a042:	4642      	mov	r2, r8
 800a044:	464b      	mov	r3, r9
 800a046:	f7f6 f927 	bl	8000298 <__aeabi_dsub>
 800a04a:	ec53 2b18 	vmov	r2, r3, d8
 800a04e:	f7f6 f923 	bl	8000298 <__aeabi_dsub>
 800a052:	4602      	mov	r2, r0
 800a054:	460b      	mov	r3, r1
 800a056:	4650      	mov	r0, sl
 800a058:	4659      	mov	r1, fp
 800a05a:	e610      	b.n	8009c7e <__ieee754_pow+0x31e>
 800a05c:	2401      	movs	r4, #1
 800a05e:	e6a1      	b.n	8009da4 <__ieee754_pow+0x444>
 800a060:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800a0b0 <__ieee754_pow+0x750>
 800a064:	e617      	b.n	8009c96 <__ieee754_pow+0x336>
 800a066:	bf00      	nop
 800a068:	4a454eef 	.word	0x4a454eef
 800a06c:	3fca7e28 	.word	0x3fca7e28
 800a070:	93c9db65 	.word	0x93c9db65
 800a074:	3fcd864a 	.word	0x3fcd864a
 800a078:	a91d4101 	.word	0xa91d4101
 800a07c:	3fd17460 	.word	0x3fd17460
 800a080:	518f264d 	.word	0x518f264d
 800a084:	3fd55555 	.word	0x3fd55555
 800a088:	db6fabff 	.word	0xdb6fabff
 800a08c:	3fdb6db6 	.word	0x3fdb6db6
 800a090:	33333303 	.word	0x33333303
 800a094:	3fe33333 	.word	0x3fe33333
 800a098:	e0000000 	.word	0xe0000000
 800a09c:	3feec709 	.word	0x3feec709
 800a0a0:	dc3a03fd 	.word	0xdc3a03fd
 800a0a4:	3feec709 	.word	0x3feec709
 800a0a8:	145b01f5 	.word	0x145b01f5
 800a0ac:	be3e2fe0 	.word	0xbe3e2fe0
 800a0b0:	00000000 	.word	0x00000000
 800a0b4:	3ff00000 	.word	0x3ff00000
 800a0b8:	7ff00000 	.word	0x7ff00000
 800a0bc:	43400000 	.word	0x43400000
 800a0c0:	0003988e 	.word	0x0003988e
 800a0c4:	000bb679 	.word	0x000bb679
 800a0c8:	0800b548 	.word	0x0800b548
 800a0cc:	3ff00000 	.word	0x3ff00000
 800a0d0:	40080000 	.word	0x40080000
 800a0d4:	0800b568 	.word	0x0800b568
 800a0d8:	0800b558 	.word	0x0800b558
 800a0dc:	a3b3      	add	r3, pc, #716	; (adr r3, 800a3ac <__ieee754_pow+0xa4c>)
 800a0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e2:	4640      	mov	r0, r8
 800a0e4:	4649      	mov	r1, r9
 800a0e6:	f7f6 f8d9 	bl	800029c <__adddf3>
 800a0ea:	4622      	mov	r2, r4
 800a0ec:	ec41 0b1a 	vmov	d10, r0, r1
 800a0f0:	462b      	mov	r3, r5
 800a0f2:	4630      	mov	r0, r6
 800a0f4:	4639      	mov	r1, r7
 800a0f6:	f7f6 f8cf 	bl	8000298 <__aeabi_dsub>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	ec51 0b1a 	vmov	r0, r1, d10
 800a102:	f7f6 fd11 	bl	8000b28 <__aeabi_dcmpgt>
 800a106:	2800      	cmp	r0, #0
 800a108:	f47f ae04 	bne.w	8009d14 <__ieee754_pow+0x3b4>
 800a10c:	4aa2      	ldr	r2, [pc, #648]	; (800a398 <__ieee754_pow+0xa38>)
 800a10e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a112:	4293      	cmp	r3, r2
 800a114:	f340 8107 	ble.w	800a326 <__ieee754_pow+0x9c6>
 800a118:	151b      	asrs	r3, r3, #20
 800a11a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a11e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a122:	fa4a fa03 	asr.w	sl, sl, r3
 800a126:	44da      	add	sl, fp
 800a128:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a12c:	489b      	ldr	r0, [pc, #620]	; (800a39c <__ieee754_pow+0xa3c>)
 800a12e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a132:	4108      	asrs	r0, r1
 800a134:	ea00 030a 	and.w	r3, r0, sl
 800a138:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a13c:	f1c1 0114 	rsb	r1, r1, #20
 800a140:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a144:	fa4a fa01 	asr.w	sl, sl, r1
 800a148:	f1bb 0f00 	cmp.w	fp, #0
 800a14c:	f04f 0200 	mov.w	r2, #0
 800a150:	4620      	mov	r0, r4
 800a152:	4629      	mov	r1, r5
 800a154:	bfb8      	it	lt
 800a156:	f1ca 0a00 	rsblt	sl, sl, #0
 800a15a:	f7f6 f89d 	bl	8000298 <__aeabi_dsub>
 800a15e:	ec41 0b19 	vmov	d9, r0, r1
 800a162:	4642      	mov	r2, r8
 800a164:	464b      	mov	r3, r9
 800a166:	ec51 0b19 	vmov	r0, r1, d9
 800a16a:	f7f6 f897 	bl	800029c <__adddf3>
 800a16e:	a37a      	add	r3, pc, #488	; (adr r3, 800a358 <__ieee754_pow+0x9f8>)
 800a170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a174:	2000      	movs	r0, #0
 800a176:	4604      	mov	r4, r0
 800a178:	460d      	mov	r5, r1
 800a17a:	f7f6 fa45 	bl	8000608 <__aeabi_dmul>
 800a17e:	ec53 2b19 	vmov	r2, r3, d9
 800a182:	4606      	mov	r6, r0
 800a184:	460f      	mov	r7, r1
 800a186:	4620      	mov	r0, r4
 800a188:	4629      	mov	r1, r5
 800a18a:	f7f6 f885 	bl	8000298 <__aeabi_dsub>
 800a18e:	4602      	mov	r2, r0
 800a190:	460b      	mov	r3, r1
 800a192:	4640      	mov	r0, r8
 800a194:	4649      	mov	r1, r9
 800a196:	f7f6 f87f 	bl	8000298 <__aeabi_dsub>
 800a19a:	a371      	add	r3, pc, #452	; (adr r3, 800a360 <__ieee754_pow+0xa00>)
 800a19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a0:	f7f6 fa32 	bl	8000608 <__aeabi_dmul>
 800a1a4:	a370      	add	r3, pc, #448	; (adr r3, 800a368 <__ieee754_pow+0xa08>)
 800a1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1aa:	4680      	mov	r8, r0
 800a1ac:	4689      	mov	r9, r1
 800a1ae:	4620      	mov	r0, r4
 800a1b0:	4629      	mov	r1, r5
 800a1b2:	f7f6 fa29 	bl	8000608 <__aeabi_dmul>
 800a1b6:	4602      	mov	r2, r0
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	4640      	mov	r0, r8
 800a1bc:	4649      	mov	r1, r9
 800a1be:	f7f6 f86d 	bl	800029c <__adddf3>
 800a1c2:	4604      	mov	r4, r0
 800a1c4:	460d      	mov	r5, r1
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	4630      	mov	r0, r6
 800a1cc:	4639      	mov	r1, r7
 800a1ce:	f7f6 f865 	bl	800029c <__adddf3>
 800a1d2:	4632      	mov	r2, r6
 800a1d4:	463b      	mov	r3, r7
 800a1d6:	4680      	mov	r8, r0
 800a1d8:	4689      	mov	r9, r1
 800a1da:	f7f6 f85d 	bl	8000298 <__aeabi_dsub>
 800a1de:	4602      	mov	r2, r0
 800a1e0:	460b      	mov	r3, r1
 800a1e2:	4620      	mov	r0, r4
 800a1e4:	4629      	mov	r1, r5
 800a1e6:	f7f6 f857 	bl	8000298 <__aeabi_dsub>
 800a1ea:	4642      	mov	r2, r8
 800a1ec:	4606      	mov	r6, r0
 800a1ee:	460f      	mov	r7, r1
 800a1f0:	464b      	mov	r3, r9
 800a1f2:	4640      	mov	r0, r8
 800a1f4:	4649      	mov	r1, r9
 800a1f6:	f7f6 fa07 	bl	8000608 <__aeabi_dmul>
 800a1fa:	a35d      	add	r3, pc, #372	; (adr r3, 800a370 <__ieee754_pow+0xa10>)
 800a1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a200:	4604      	mov	r4, r0
 800a202:	460d      	mov	r5, r1
 800a204:	f7f6 fa00 	bl	8000608 <__aeabi_dmul>
 800a208:	a35b      	add	r3, pc, #364	; (adr r3, 800a378 <__ieee754_pow+0xa18>)
 800a20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20e:	f7f6 f843 	bl	8000298 <__aeabi_dsub>
 800a212:	4622      	mov	r2, r4
 800a214:	462b      	mov	r3, r5
 800a216:	f7f6 f9f7 	bl	8000608 <__aeabi_dmul>
 800a21a:	a359      	add	r3, pc, #356	; (adr r3, 800a380 <__ieee754_pow+0xa20>)
 800a21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a220:	f7f6 f83c 	bl	800029c <__adddf3>
 800a224:	4622      	mov	r2, r4
 800a226:	462b      	mov	r3, r5
 800a228:	f7f6 f9ee 	bl	8000608 <__aeabi_dmul>
 800a22c:	a356      	add	r3, pc, #344	; (adr r3, 800a388 <__ieee754_pow+0xa28>)
 800a22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a232:	f7f6 f831 	bl	8000298 <__aeabi_dsub>
 800a236:	4622      	mov	r2, r4
 800a238:	462b      	mov	r3, r5
 800a23a:	f7f6 f9e5 	bl	8000608 <__aeabi_dmul>
 800a23e:	a354      	add	r3, pc, #336	; (adr r3, 800a390 <__ieee754_pow+0xa30>)
 800a240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a244:	f7f6 f82a 	bl	800029c <__adddf3>
 800a248:	4622      	mov	r2, r4
 800a24a:	462b      	mov	r3, r5
 800a24c:	f7f6 f9dc 	bl	8000608 <__aeabi_dmul>
 800a250:	4602      	mov	r2, r0
 800a252:	460b      	mov	r3, r1
 800a254:	4640      	mov	r0, r8
 800a256:	4649      	mov	r1, r9
 800a258:	f7f6 f81e 	bl	8000298 <__aeabi_dsub>
 800a25c:	4604      	mov	r4, r0
 800a25e:	460d      	mov	r5, r1
 800a260:	4602      	mov	r2, r0
 800a262:	460b      	mov	r3, r1
 800a264:	4640      	mov	r0, r8
 800a266:	4649      	mov	r1, r9
 800a268:	f7f6 f9ce 	bl	8000608 <__aeabi_dmul>
 800a26c:	2200      	movs	r2, #0
 800a26e:	ec41 0b19 	vmov	d9, r0, r1
 800a272:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a276:	4620      	mov	r0, r4
 800a278:	4629      	mov	r1, r5
 800a27a:	f7f6 f80d 	bl	8000298 <__aeabi_dsub>
 800a27e:	4602      	mov	r2, r0
 800a280:	460b      	mov	r3, r1
 800a282:	ec51 0b19 	vmov	r0, r1, d9
 800a286:	f7f6 fae9 	bl	800085c <__aeabi_ddiv>
 800a28a:	4632      	mov	r2, r6
 800a28c:	4604      	mov	r4, r0
 800a28e:	460d      	mov	r5, r1
 800a290:	463b      	mov	r3, r7
 800a292:	4640      	mov	r0, r8
 800a294:	4649      	mov	r1, r9
 800a296:	f7f6 f9b7 	bl	8000608 <__aeabi_dmul>
 800a29a:	4632      	mov	r2, r6
 800a29c:	463b      	mov	r3, r7
 800a29e:	f7f5 fffd 	bl	800029c <__adddf3>
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	4620      	mov	r0, r4
 800a2a8:	4629      	mov	r1, r5
 800a2aa:	f7f5 fff5 	bl	8000298 <__aeabi_dsub>
 800a2ae:	4642      	mov	r2, r8
 800a2b0:	464b      	mov	r3, r9
 800a2b2:	f7f5 fff1 	bl	8000298 <__aeabi_dsub>
 800a2b6:	460b      	mov	r3, r1
 800a2b8:	4602      	mov	r2, r0
 800a2ba:	4939      	ldr	r1, [pc, #228]	; (800a3a0 <__ieee754_pow+0xa40>)
 800a2bc:	2000      	movs	r0, #0
 800a2be:	f7f5 ffeb 	bl	8000298 <__aeabi_dsub>
 800a2c2:	ec41 0b10 	vmov	d0, r0, r1
 800a2c6:	ee10 3a90 	vmov	r3, s1
 800a2ca:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a2ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2d2:	da2b      	bge.n	800a32c <__ieee754_pow+0x9cc>
 800a2d4:	4650      	mov	r0, sl
 800a2d6:	f000 fa53 	bl	800a780 <scalbn>
 800a2da:	ec51 0b10 	vmov	r0, r1, d0
 800a2de:	ec53 2b18 	vmov	r2, r3, d8
 800a2e2:	f7ff bbee 	b.w	8009ac2 <__ieee754_pow+0x162>
 800a2e6:	4b2f      	ldr	r3, [pc, #188]	; (800a3a4 <__ieee754_pow+0xa44>)
 800a2e8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a2ec:	429e      	cmp	r6, r3
 800a2ee:	f77f af0d 	ble.w	800a10c <__ieee754_pow+0x7ac>
 800a2f2:	4b2d      	ldr	r3, [pc, #180]	; (800a3a8 <__ieee754_pow+0xa48>)
 800a2f4:	440b      	add	r3, r1
 800a2f6:	4303      	orrs	r3, r0
 800a2f8:	d009      	beq.n	800a30e <__ieee754_pow+0x9ae>
 800a2fa:	ec51 0b18 	vmov	r0, r1, d8
 800a2fe:	2200      	movs	r2, #0
 800a300:	2300      	movs	r3, #0
 800a302:	f7f6 fbf3 	bl	8000aec <__aeabi_dcmplt>
 800a306:	3800      	subs	r0, #0
 800a308:	bf18      	it	ne
 800a30a:	2001      	movne	r0, #1
 800a30c:	e448      	b.n	8009ba0 <__ieee754_pow+0x240>
 800a30e:	4622      	mov	r2, r4
 800a310:	462b      	mov	r3, r5
 800a312:	f7f5 ffc1 	bl	8000298 <__aeabi_dsub>
 800a316:	4642      	mov	r2, r8
 800a318:	464b      	mov	r3, r9
 800a31a:	f7f6 fbfb 	bl	8000b14 <__aeabi_dcmpge>
 800a31e:	2800      	cmp	r0, #0
 800a320:	f43f aef4 	beq.w	800a10c <__ieee754_pow+0x7ac>
 800a324:	e7e9      	b.n	800a2fa <__ieee754_pow+0x99a>
 800a326:	f04f 0a00 	mov.w	sl, #0
 800a32a:	e71a      	b.n	800a162 <__ieee754_pow+0x802>
 800a32c:	ec51 0b10 	vmov	r0, r1, d0
 800a330:	4619      	mov	r1, r3
 800a332:	e7d4      	b.n	800a2de <__ieee754_pow+0x97e>
 800a334:	491a      	ldr	r1, [pc, #104]	; (800a3a0 <__ieee754_pow+0xa40>)
 800a336:	2000      	movs	r0, #0
 800a338:	f7ff bb31 	b.w	800999e <__ieee754_pow+0x3e>
 800a33c:	2000      	movs	r0, #0
 800a33e:	2100      	movs	r1, #0
 800a340:	f7ff bb2d 	b.w	800999e <__ieee754_pow+0x3e>
 800a344:	4630      	mov	r0, r6
 800a346:	4639      	mov	r1, r7
 800a348:	f7ff bb29 	b.w	800999e <__ieee754_pow+0x3e>
 800a34c:	9204      	str	r2, [sp, #16]
 800a34e:	f7ff bb7b 	b.w	8009a48 <__ieee754_pow+0xe8>
 800a352:	2300      	movs	r3, #0
 800a354:	f7ff bb65 	b.w	8009a22 <__ieee754_pow+0xc2>
 800a358:	00000000 	.word	0x00000000
 800a35c:	3fe62e43 	.word	0x3fe62e43
 800a360:	fefa39ef 	.word	0xfefa39ef
 800a364:	3fe62e42 	.word	0x3fe62e42
 800a368:	0ca86c39 	.word	0x0ca86c39
 800a36c:	be205c61 	.word	0xbe205c61
 800a370:	72bea4d0 	.word	0x72bea4d0
 800a374:	3e663769 	.word	0x3e663769
 800a378:	c5d26bf1 	.word	0xc5d26bf1
 800a37c:	3ebbbd41 	.word	0x3ebbbd41
 800a380:	af25de2c 	.word	0xaf25de2c
 800a384:	3f11566a 	.word	0x3f11566a
 800a388:	16bebd93 	.word	0x16bebd93
 800a38c:	3f66c16c 	.word	0x3f66c16c
 800a390:	5555553e 	.word	0x5555553e
 800a394:	3fc55555 	.word	0x3fc55555
 800a398:	3fe00000 	.word	0x3fe00000
 800a39c:	fff00000 	.word	0xfff00000
 800a3a0:	3ff00000 	.word	0x3ff00000
 800a3a4:	4090cbff 	.word	0x4090cbff
 800a3a8:	3f6f3400 	.word	0x3f6f3400
 800a3ac:	652b82fe 	.word	0x652b82fe
 800a3b0:	3c971547 	.word	0x3c971547

0800a3b4 <fabs>:
 800a3b4:	ec51 0b10 	vmov	r0, r1, d0
 800a3b8:	ee10 2a10 	vmov	r2, s0
 800a3bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a3c0:	ec43 2b10 	vmov	d0, r2, r3
 800a3c4:	4770      	bx	lr
	...

0800a3c8 <__kernel_cosf>:
 800a3c8:	ee10 3a10 	vmov	r3, s0
 800a3cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a3d0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800a3d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3d8:	da05      	bge.n	800a3e6 <__kernel_cosf+0x1e>
 800a3da:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a3de:	ee17 2a90 	vmov	r2, s15
 800a3e2:	2a00      	cmp	r2, #0
 800a3e4:	d03b      	beq.n	800a45e <__kernel_cosf+0x96>
 800a3e6:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a3ea:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800a464 <__kernel_cosf+0x9c>
 800a3ee:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 800a468 <__kernel_cosf+0xa0>
 800a3f2:	4a1e      	ldr	r2, [pc, #120]	; (800a46c <__kernel_cosf+0xa4>)
 800a3f4:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	eddf 7a1d 	vldr	s15, [pc, #116]	; 800a470 <__kernel_cosf+0xa8>
 800a3fe:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a402:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 800a474 <__kernel_cosf+0xac>
 800a406:	eea7 6a87 	vfma.f32	s12, s15, s14
 800a40a:	eddf 7a1b 	vldr	s15, [pc, #108]	; 800a478 <__kernel_cosf+0xb0>
 800a40e:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a412:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 800a47c <__kernel_cosf+0xb4>
 800a416:	eea7 6a87 	vfma.f32	s12, s15, s14
 800a41a:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800a41e:	ee26 6a07 	vmul.f32	s12, s12, s14
 800a422:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a426:	eee7 0a06 	vfma.f32	s1, s14, s12
 800a42a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a42e:	dc04      	bgt.n	800a43a <__kernel_cosf+0x72>
 800a430:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800a434:	ee36 0ae7 	vsub.f32	s0, s13, s15
 800a438:	4770      	bx	lr
 800a43a:	4a11      	ldr	r2, [pc, #68]	; (800a480 <__kernel_cosf+0xb8>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	bfda      	itte	le
 800a440:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800a444:	ee07 3a10 	vmovle	s14, r3
 800a448:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800a44c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a450:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800a454:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800a458:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a45c:	4770      	bx	lr
 800a45e:	eeb0 0a66 	vmov.f32	s0, s13
 800a462:	4770      	bx	lr
 800a464:	ad47d74e 	.word	0xad47d74e
 800a468:	310f74f6 	.word	0x310f74f6
 800a46c:	3e999999 	.word	0x3e999999
 800a470:	b493f27c 	.word	0xb493f27c
 800a474:	37d00d01 	.word	0x37d00d01
 800a478:	bab60b61 	.word	0xbab60b61
 800a47c:	3d2aaaab 	.word	0x3d2aaaab
 800a480:	3f480000 	.word	0x3f480000

0800a484 <__kernel_sinf>:
 800a484:	ee10 3a10 	vmov	r3, s0
 800a488:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a48c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800a490:	da04      	bge.n	800a49c <__kernel_sinf+0x18>
 800a492:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a496:	ee17 3a90 	vmov	r3, s15
 800a49a:	b35b      	cbz	r3, 800a4f4 <__kernel_sinf+0x70>
 800a49c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a4a0:	eddf 7a15 	vldr	s15, [pc, #84]	; 800a4f8 <__kernel_sinf+0x74>
 800a4a4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800a4fc <__kernel_sinf+0x78>
 800a4a8:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a4ac:	eddf 7a14 	vldr	s15, [pc, #80]	; 800a500 <__kernel_sinf+0x7c>
 800a4b0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a4b4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800a504 <__kernel_sinf+0x80>
 800a4b8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800a4bc:	eddf 7a12 	vldr	s15, [pc, #72]	; 800a508 <__kernel_sinf+0x84>
 800a4c0:	ee60 6a07 	vmul.f32	s13, s0, s14
 800a4c4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a4c8:	b930      	cbnz	r0, 800a4d8 <__kernel_sinf+0x54>
 800a4ca:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800a50c <__kernel_sinf+0x88>
 800a4ce:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a4d2:	eea6 0a26 	vfma.f32	s0, s12, s13
 800a4d6:	4770      	bx	lr
 800a4d8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800a4dc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800a4e0:	eee0 7a86 	vfma.f32	s15, s1, s12
 800a4e4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800a4e8:	eddf 7a09 	vldr	s15, [pc, #36]	; 800a510 <__kernel_sinf+0x8c>
 800a4ec:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800a4f0:	ee30 0a60 	vsub.f32	s0, s0, s1
 800a4f4:	4770      	bx	lr
 800a4f6:	bf00      	nop
 800a4f8:	2f2ec9d3 	.word	0x2f2ec9d3
 800a4fc:	b2d72f34 	.word	0xb2d72f34
 800a500:	3638ef1b 	.word	0x3638ef1b
 800a504:	b9500d01 	.word	0xb9500d01
 800a508:	3c088889 	.word	0x3c088889
 800a50c:	be2aaaab 	.word	0xbe2aaaab
 800a510:	3e2aaaab 	.word	0x3e2aaaab

0800a514 <__ieee754_rem_pio2f>:
 800a514:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a516:	ee10 6a10 	vmov	r6, s0
 800a51a:	4b86      	ldr	r3, [pc, #536]	; (800a734 <__ieee754_rem_pio2f+0x220>)
 800a51c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800a520:	429d      	cmp	r5, r3
 800a522:	b087      	sub	sp, #28
 800a524:	4604      	mov	r4, r0
 800a526:	dc05      	bgt.n	800a534 <__ieee754_rem_pio2f+0x20>
 800a528:	2300      	movs	r3, #0
 800a52a:	ed80 0a00 	vstr	s0, [r0]
 800a52e:	6043      	str	r3, [r0, #4]
 800a530:	2000      	movs	r0, #0
 800a532:	e020      	b.n	800a576 <__ieee754_rem_pio2f+0x62>
 800a534:	4b80      	ldr	r3, [pc, #512]	; (800a738 <__ieee754_rem_pio2f+0x224>)
 800a536:	429d      	cmp	r5, r3
 800a538:	dc38      	bgt.n	800a5ac <__ieee754_rem_pio2f+0x98>
 800a53a:	2e00      	cmp	r6, #0
 800a53c:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800a73c <__ieee754_rem_pio2f+0x228>
 800a540:	4b7f      	ldr	r3, [pc, #508]	; (800a740 <__ieee754_rem_pio2f+0x22c>)
 800a542:	f025 050f 	bic.w	r5, r5, #15
 800a546:	dd18      	ble.n	800a57a <__ieee754_rem_pio2f+0x66>
 800a548:	429d      	cmp	r5, r3
 800a54a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800a54e:	bf09      	itett	eq
 800a550:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800a744 <__ieee754_rem_pio2f+0x230>
 800a554:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800a748 <__ieee754_rem_pio2f+0x234>
 800a558:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800a55c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800a74c <__ieee754_rem_pio2f+0x238>
 800a560:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800a564:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a568:	edc0 6a00 	vstr	s13, [r0]
 800a56c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a570:	edc0 7a01 	vstr	s15, [r0, #4]
 800a574:	2001      	movs	r0, #1
 800a576:	b007      	add	sp, #28
 800a578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a57a:	429d      	cmp	r5, r3
 800a57c:	ee70 7a07 	vadd.f32	s15, s0, s14
 800a580:	bf09      	itett	eq
 800a582:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800a744 <__ieee754_rem_pio2f+0x230>
 800a586:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800a748 <__ieee754_rem_pio2f+0x234>
 800a58a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800a58e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800a74c <__ieee754_rem_pio2f+0x238>
 800a592:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a596:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a59a:	edc0 6a00 	vstr	s13, [r0]
 800a59e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a5a2:	edc0 7a01 	vstr	s15, [r0, #4]
 800a5a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a5aa:	e7e4      	b.n	800a576 <__ieee754_rem_pio2f+0x62>
 800a5ac:	4b68      	ldr	r3, [pc, #416]	; (800a750 <__ieee754_rem_pio2f+0x23c>)
 800a5ae:	429d      	cmp	r5, r3
 800a5b0:	dc71      	bgt.n	800a696 <__ieee754_rem_pio2f+0x182>
 800a5b2:	f000 f8db 	bl	800a76c <fabsf>
 800a5b6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800a754 <__ieee754_rem_pio2f+0x240>
 800a5ba:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a5be:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a5c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a5c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a5ca:	ee17 0a90 	vmov	r0, s15
 800a5ce:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800a73c <__ieee754_rem_pio2f+0x228>
 800a5d2:	eea7 0a67 	vfms.f32	s0, s14, s15
 800a5d6:	281f      	cmp	r0, #31
 800a5d8:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800a748 <__ieee754_rem_pio2f+0x234>
 800a5dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5e0:	eeb1 6a47 	vneg.f32	s12, s14
 800a5e4:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a5e8:	ee16 2a90 	vmov	r2, s13
 800a5ec:	dc1c      	bgt.n	800a628 <__ieee754_rem_pio2f+0x114>
 800a5ee:	495a      	ldr	r1, [pc, #360]	; (800a758 <__ieee754_rem_pio2f+0x244>)
 800a5f0:	1e47      	subs	r7, r0, #1
 800a5f2:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800a5f6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800a5fa:	428b      	cmp	r3, r1
 800a5fc:	d014      	beq.n	800a628 <__ieee754_rem_pio2f+0x114>
 800a5fe:	6022      	str	r2, [r4, #0]
 800a600:	ed94 7a00 	vldr	s14, [r4]
 800a604:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a608:	2e00      	cmp	r6, #0
 800a60a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a60e:	ed84 0a01 	vstr	s0, [r4, #4]
 800a612:	dab0      	bge.n	800a576 <__ieee754_rem_pio2f+0x62>
 800a614:	eeb1 7a47 	vneg.f32	s14, s14
 800a618:	eeb1 0a40 	vneg.f32	s0, s0
 800a61c:	ed84 7a00 	vstr	s14, [r4]
 800a620:	ed84 0a01 	vstr	s0, [r4, #4]
 800a624:	4240      	negs	r0, r0
 800a626:	e7a6      	b.n	800a576 <__ieee754_rem_pio2f+0x62>
 800a628:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800a62c:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 800a630:	2908      	cmp	r1, #8
 800a632:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800a636:	dde2      	ble.n	800a5fe <__ieee754_rem_pio2f+0xea>
 800a638:	eddf 5a42 	vldr	s11, [pc, #264]	; 800a744 <__ieee754_rem_pio2f+0x230>
 800a63c:	eef0 6a40 	vmov.f32	s13, s0
 800a640:	eee6 6a25 	vfma.f32	s13, s12, s11
 800a644:	ee70 7a66 	vsub.f32	s15, s0, s13
 800a648:	eee6 7a25 	vfma.f32	s15, s12, s11
 800a64c:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a74c <__ieee754_rem_pio2f+0x238>
 800a650:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800a654:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800a658:	ee15 2a90 	vmov	r2, s11
 800a65c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800a660:	1a5b      	subs	r3, r3, r1
 800a662:	2b19      	cmp	r3, #25
 800a664:	dc04      	bgt.n	800a670 <__ieee754_rem_pio2f+0x15c>
 800a666:	edc4 5a00 	vstr	s11, [r4]
 800a66a:	eeb0 0a66 	vmov.f32	s0, s13
 800a66e:	e7c7      	b.n	800a600 <__ieee754_rem_pio2f+0xec>
 800a670:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800a75c <__ieee754_rem_pio2f+0x248>
 800a674:	eeb0 0a66 	vmov.f32	s0, s13
 800a678:	eea6 0a25 	vfma.f32	s0, s12, s11
 800a67c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800a680:	eddf 6a37 	vldr	s13, [pc, #220]	; 800a760 <__ieee754_rem_pio2f+0x24c>
 800a684:	eee6 7a25 	vfma.f32	s15, s12, s11
 800a688:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800a68c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a690:	ed84 7a00 	vstr	s14, [r4]
 800a694:	e7b4      	b.n	800a600 <__ieee754_rem_pio2f+0xec>
 800a696:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800a69a:	db06      	blt.n	800a6aa <__ieee754_rem_pio2f+0x196>
 800a69c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a6a0:	edc0 7a01 	vstr	s15, [r0, #4]
 800a6a4:	edc0 7a00 	vstr	s15, [r0]
 800a6a8:	e742      	b.n	800a530 <__ieee754_rem_pio2f+0x1c>
 800a6aa:	15ea      	asrs	r2, r5, #23
 800a6ac:	3a86      	subs	r2, #134	; 0x86
 800a6ae:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800a6b2:	ee07 3a90 	vmov	s15, r3
 800a6b6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a6ba:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800a764 <__ieee754_rem_pio2f+0x250>
 800a6be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a6c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a6c6:	ed8d 7a03 	vstr	s14, [sp, #12]
 800a6ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a6ce:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a6d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a6d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a6da:	ed8d 7a04 	vstr	s14, [sp, #16]
 800a6de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a6e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a6e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6ea:	edcd 7a05 	vstr	s15, [sp, #20]
 800a6ee:	d11e      	bne.n	800a72e <__ieee754_rem_pio2f+0x21a>
 800a6f0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800a6f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6f8:	bf14      	ite	ne
 800a6fa:	2302      	movne	r3, #2
 800a6fc:	2301      	moveq	r3, #1
 800a6fe:	491a      	ldr	r1, [pc, #104]	; (800a768 <__ieee754_rem_pio2f+0x254>)
 800a700:	9101      	str	r1, [sp, #4]
 800a702:	2102      	movs	r1, #2
 800a704:	9100      	str	r1, [sp, #0]
 800a706:	a803      	add	r0, sp, #12
 800a708:	4621      	mov	r1, r4
 800a70a:	f000 f9c1 	bl	800aa90 <__kernel_rem_pio2f>
 800a70e:	2e00      	cmp	r6, #0
 800a710:	f6bf af31 	bge.w	800a576 <__ieee754_rem_pio2f+0x62>
 800a714:	edd4 7a00 	vldr	s15, [r4]
 800a718:	eef1 7a67 	vneg.f32	s15, s15
 800a71c:	edc4 7a00 	vstr	s15, [r4]
 800a720:	edd4 7a01 	vldr	s15, [r4, #4]
 800a724:	eef1 7a67 	vneg.f32	s15, s15
 800a728:	edc4 7a01 	vstr	s15, [r4, #4]
 800a72c:	e77a      	b.n	800a624 <__ieee754_rem_pio2f+0x110>
 800a72e:	2303      	movs	r3, #3
 800a730:	e7e5      	b.n	800a6fe <__ieee754_rem_pio2f+0x1ea>
 800a732:	bf00      	nop
 800a734:	3f490fd8 	.word	0x3f490fd8
 800a738:	4016cbe3 	.word	0x4016cbe3
 800a73c:	3fc90f80 	.word	0x3fc90f80
 800a740:	3fc90fd0 	.word	0x3fc90fd0
 800a744:	37354400 	.word	0x37354400
 800a748:	37354443 	.word	0x37354443
 800a74c:	2e85a308 	.word	0x2e85a308
 800a750:	43490f80 	.word	0x43490f80
 800a754:	3f22f984 	.word	0x3f22f984
 800a758:	0800b578 	.word	0x0800b578
 800a75c:	2e85a300 	.word	0x2e85a300
 800a760:	248d3132 	.word	0x248d3132
 800a764:	43800000 	.word	0x43800000
 800a768:	0800b5f8 	.word	0x0800b5f8

0800a76c <fabsf>:
 800a76c:	ee10 3a10 	vmov	r3, s0
 800a770:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a774:	ee00 3a10 	vmov	s0, r3
 800a778:	4770      	bx	lr
 800a77a:	0000      	movs	r0, r0
 800a77c:	0000      	movs	r0, r0
	...

0800a780 <scalbn>:
 800a780:	b570      	push	{r4, r5, r6, lr}
 800a782:	ec55 4b10 	vmov	r4, r5, d0
 800a786:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a78a:	4606      	mov	r6, r0
 800a78c:	462b      	mov	r3, r5
 800a78e:	b999      	cbnz	r1, 800a7b8 <scalbn+0x38>
 800a790:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a794:	4323      	orrs	r3, r4
 800a796:	d03f      	beq.n	800a818 <scalbn+0x98>
 800a798:	4b35      	ldr	r3, [pc, #212]	; (800a870 <scalbn+0xf0>)
 800a79a:	4629      	mov	r1, r5
 800a79c:	ee10 0a10 	vmov	r0, s0
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	f7f5 ff31 	bl	8000608 <__aeabi_dmul>
 800a7a6:	4b33      	ldr	r3, [pc, #204]	; (800a874 <scalbn+0xf4>)
 800a7a8:	429e      	cmp	r6, r3
 800a7aa:	4604      	mov	r4, r0
 800a7ac:	460d      	mov	r5, r1
 800a7ae:	da10      	bge.n	800a7d2 <scalbn+0x52>
 800a7b0:	a327      	add	r3, pc, #156	; (adr r3, 800a850 <scalbn+0xd0>)
 800a7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b6:	e01f      	b.n	800a7f8 <scalbn+0x78>
 800a7b8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a7bc:	4291      	cmp	r1, r2
 800a7be:	d10c      	bne.n	800a7da <scalbn+0x5a>
 800a7c0:	ee10 2a10 	vmov	r2, s0
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	4629      	mov	r1, r5
 800a7c8:	f7f5 fd68 	bl	800029c <__adddf3>
 800a7cc:	4604      	mov	r4, r0
 800a7ce:	460d      	mov	r5, r1
 800a7d0:	e022      	b.n	800a818 <scalbn+0x98>
 800a7d2:	460b      	mov	r3, r1
 800a7d4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a7d8:	3936      	subs	r1, #54	; 0x36
 800a7da:	f24c 3250 	movw	r2, #50000	; 0xc350
 800a7de:	4296      	cmp	r6, r2
 800a7e0:	dd0d      	ble.n	800a7fe <scalbn+0x7e>
 800a7e2:	2d00      	cmp	r5, #0
 800a7e4:	a11c      	add	r1, pc, #112	; (adr r1, 800a858 <scalbn+0xd8>)
 800a7e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7ea:	da02      	bge.n	800a7f2 <scalbn+0x72>
 800a7ec:	a11c      	add	r1, pc, #112	; (adr r1, 800a860 <scalbn+0xe0>)
 800a7ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7f2:	a319      	add	r3, pc, #100	; (adr r3, 800a858 <scalbn+0xd8>)
 800a7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f8:	f7f5 ff06 	bl	8000608 <__aeabi_dmul>
 800a7fc:	e7e6      	b.n	800a7cc <scalbn+0x4c>
 800a7fe:	1872      	adds	r2, r6, r1
 800a800:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a804:	428a      	cmp	r2, r1
 800a806:	dcec      	bgt.n	800a7e2 <scalbn+0x62>
 800a808:	2a00      	cmp	r2, #0
 800a80a:	dd08      	ble.n	800a81e <scalbn+0x9e>
 800a80c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a810:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a814:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a818:	ec45 4b10 	vmov	d0, r4, r5
 800a81c:	bd70      	pop	{r4, r5, r6, pc}
 800a81e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a822:	da08      	bge.n	800a836 <scalbn+0xb6>
 800a824:	2d00      	cmp	r5, #0
 800a826:	a10a      	add	r1, pc, #40	; (adr r1, 800a850 <scalbn+0xd0>)
 800a828:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a82c:	dac0      	bge.n	800a7b0 <scalbn+0x30>
 800a82e:	a10e      	add	r1, pc, #56	; (adr r1, 800a868 <scalbn+0xe8>)
 800a830:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a834:	e7bc      	b.n	800a7b0 <scalbn+0x30>
 800a836:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a83a:	3236      	adds	r2, #54	; 0x36
 800a83c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a840:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a844:	4620      	mov	r0, r4
 800a846:	4b0c      	ldr	r3, [pc, #48]	; (800a878 <scalbn+0xf8>)
 800a848:	2200      	movs	r2, #0
 800a84a:	e7d5      	b.n	800a7f8 <scalbn+0x78>
 800a84c:	f3af 8000 	nop.w
 800a850:	c2f8f359 	.word	0xc2f8f359
 800a854:	01a56e1f 	.word	0x01a56e1f
 800a858:	8800759c 	.word	0x8800759c
 800a85c:	7e37e43c 	.word	0x7e37e43c
 800a860:	8800759c 	.word	0x8800759c
 800a864:	fe37e43c 	.word	0xfe37e43c
 800a868:	c2f8f359 	.word	0xc2f8f359
 800a86c:	81a56e1f 	.word	0x81a56e1f
 800a870:	43500000 	.word	0x43500000
 800a874:	ffff3cb0 	.word	0xffff3cb0
 800a878:	3c900000 	.word	0x3c900000

0800a87c <with_errno>:
 800a87c:	b570      	push	{r4, r5, r6, lr}
 800a87e:	4604      	mov	r4, r0
 800a880:	460d      	mov	r5, r1
 800a882:	4616      	mov	r6, r2
 800a884:	f7fb fbc4 	bl	8006010 <__errno>
 800a888:	4629      	mov	r1, r5
 800a88a:	6006      	str	r6, [r0, #0]
 800a88c:	4620      	mov	r0, r4
 800a88e:	bd70      	pop	{r4, r5, r6, pc}

0800a890 <xflow>:
 800a890:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a892:	4614      	mov	r4, r2
 800a894:	461d      	mov	r5, r3
 800a896:	b108      	cbz	r0, 800a89c <xflow+0xc>
 800a898:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a89c:	e9cd 2300 	strd	r2, r3, [sp]
 800a8a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8a4:	4620      	mov	r0, r4
 800a8a6:	4629      	mov	r1, r5
 800a8a8:	f7f5 feae 	bl	8000608 <__aeabi_dmul>
 800a8ac:	2222      	movs	r2, #34	; 0x22
 800a8ae:	b003      	add	sp, #12
 800a8b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8b4:	f7ff bfe2 	b.w	800a87c <with_errno>

0800a8b8 <__math_uflow>:
 800a8b8:	b508      	push	{r3, lr}
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a8c0:	f7ff ffe6 	bl	800a890 <xflow>
 800a8c4:	ec41 0b10 	vmov	d0, r0, r1
 800a8c8:	bd08      	pop	{r3, pc}

0800a8ca <__math_oflow>:
 800a8ca:	b508      	push	{r3, lr}
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a8d2:	f7ff ffdd 	bl	800a890 <xflow>
 800a8d6:	ec41 0b10 	vmov	d0, r0, r1
 800a8da:	bd08      	pop	{r3, pc}

0800a8dc <__ieee754_sqrt>:
 800a8dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e0:	ec55 4b10 	vmov	r4, r5, d0
 800a8e4:	4e67      	ldr	r6, [pc, #412]	; (800aa84 <__ieee754_sqrt+0x1a8>)
 800a8e6:	43ae      	bics	r6, r5
 800a8e8:	ee10 0a10 	vmov	r0, s0
 800a8ec:	ee10 2a10 	vmov	r2, s0
 800a8f0:	4629      	mov	r1, r5
 800a8f2:	462b      	mov	r3, r5
 800a8f4:	d10d      	bne.n	800a912 <__ieee754_sqrt+0x36>
 800a8f6:	f7f5 fe87 	bl	8000608 <__aeabi_dmul>
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	4620      	mov	r0, r4
 800a900:	4629      	mov	r1, r5
 800a902:	f7f5 fccb 	bl	800029c <__adddf3>
 800a906:	4604      	mov	r4, r0
 800a908:	460d      	mov	r5, r1
 800a90a:	ec45 4b10 	vmov	d0, r4, r5
 800a90e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a912:	2d00      	cmp	r5, #0
 800a914:	dc0b      	bgt.n	800a92e <__ieee754_sqrt+0x52>
 800a916:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a91a:	4326      	orrs	r6, r4
 800a91c:	d0f5      	beq.n	800a90a <__ieee754_sqrt+0x2e>
 800a91e:	b135      	cbz	r5, 800a92e <__ieee754_sqrt+0x52>
 800a920:	f7f5 fcba 	bl	8000298 <__aeabi_dsub>
 800a924:	4602      	mov	r2, r0
 800a926:	460b      	mov	r3, r1
 800a928:	f7f5 ff98 	bl	800085c <__aeabi_ddiv>
 800a92c:	e7eb      	b.n	800a906 <__ieee754_sqrt+0x2a>
 800a92e:	1509      	asrs	r1, r1, #20
 800a930:	f000 808d 	beq.w	800aa4e <__ieee754_sqrt+0x172>
 800a934:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a938:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800a93c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a940:	07c9      	lsls	r1, r1, #31
 800a942:	bf5c      	itt	pl
 800a944:	005b      	lslpl	r3, r3, #1
 800a946:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800a94a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a94e:	bf58      	it	pl
 800a950:	0052      	lslpl	r2, r2, #1
 800a952:	2500      	movs	r5, #0
 800a954:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a958:	1076      	asrs	r6, r6, #1
 800a95a:	0052      	lsls	r2, r2, #1
 800a95c:	f04f 0e16 	mov.w	lr, #22
 800a960:	46ac      	mov	ip, r5
 800a962:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a966:	eb0c 0001 	add.w	r0, ip, r1
 800a96a:	4298      	cmp	r0, r3
 800a96c:	bfde      	ittt	le
 800a96e:	1a1b      	suble	r3, r3, r0
 800a970:	eb00 0c01 	addle.w	ip, r0, r1
 800a974:	186d      	addle	r5, r5, r1
 800a976:	005b      	lsls	r3, r3, #1
 800a978:	f1be 0e01 	subs.w	lr, lr, #1
 800a97c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a980:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a984:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a988:	d1ed      	bne.n	800a966 <__ieee754_sqrt+0x8a>
 800a98a:	4674      	mov	r4, lr
 800a98c:	2720      	movs	r7, #32
 800a98e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800a992:	4563      	cmp	r3, ip
 800a994:	eb01 000e 	add.w	r0, r1, lr
 800a998:	dc02      	bgt.n	800a9a0 <__ieee754_sqrt+0xc4>
 800a99a:	d113      	bne.n	800a9c4 <__ieee754_sqrt+0xe8>
 800a99c:	4290      	cmp	r0, r2
 800a99e:	d811      	bhi.n	800a9c4 <__ieee754_sqrt+0xe8>
 800a9a0:	2800      	cmp	r0, #0
 800a9a2:	eb00 0e01 	add.w	lr, r0, r1
 800a9a6:	da57      	bge.n	800aa58 <__ieee754_sqrt+0x17c>
 800a9a8:	f1be 0f00 	cmp.w	lr, #0
 800a9ac:	db54      	blt.n	800aa58 <__ieee754_sqrt+0x17c>
 800a9ae:	f10c 0801 	add.w	r8, ip, #1
 800a9b2:	eba3 030c 	sub.w	r3, r3, ip
 800a9b6:	4290      	cmp	r0, r2
 800a9b8:	bf88      	it	hi
 800a9ba:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a9be:	1a12      	subs	r2, r2, r0
 800a9c0:	440c      	add	r4, r1
 800a9c2:	46c4      	mov	ip, r8
 800a9c4:	005b      	lsls	r3, r3, #1
 800a9c6:	3f01      	subs	r7, #1
 800a9c8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a9cc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a9d0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a9d4:	d1dd      	bne.n	800a992 <__ieee754_sqrt+0xb6>
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	d01b      	beq.n	800aa12 <__ieee754_sqrt+0x136>
 800a9da:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800aa88 <__ieee754_sqrt+0x1ac>
 800a9de:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800aa8c <__ieee754_sqrt+0x1b0>
 800a9e2:	e9da 0100 	ldrd	r0, r1, [sl]
 800a9e6:	e9db 2300 	ldrd	r2, r3, [fp]
 800a9ea:	f7f5 fc55 	bl	8000298 <__aeabi_dsub>
 800a9ee:	e9da 8900 	ldrd	r8, r9, [sl]
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	4640      	mov	r0, r8
 800a9f8:	4649      	mov	r1, r9
 800a9fa:	f7f6 f881 	bl	8000b00 <__aeabi_dcmple>
 800a9fe:	b140      	cbz	r0, 800aa12 <__ieee754_sqrt+0x136>
 800aa00:	f1b4 3fff 	cmp.w	r4, #4294967295
 800aa04:	e9da 0100 	ldrd	r0, r1, [sl]
 800aa08:	e9db 2300 	ldrd	r2, r3, [fp]
 800aa0c:	d126      	bne.n	800aa5c <__ieee754_sqrt+0x180>
 800aa0e:	3501      	adds	r5, #1
 800aa10:	463c      	mov	r4, r7
 800aa12:	106a      	asrs	r2, r5, #1
 800aa14:	0863      	lsrs	r3, r4, #1
 800aa16:	07e9      	lsls	r1, r5, #31
 800aa18:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800aa1c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800aa20:	bf48      	it	mi
 800aa22:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800aa26:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800aa2a:	461c      	mov	r4, r3
 800aa2c:	e76d      	b.n	800a90a <__ieee754_sqrt+0x2e>
 800aa2e:	0ad3      	lsrs	r3, r2, #11
 800aa30:	3815      	subs	r0, #21
 800aa32:	0552      	lsls	r2, r2, #21
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d0fa      	beq.n	800aa2e <__ieee754_sqrt+0x152>
 800aa38:	02dc      	lsls	r4, r3, #11
 800aa3a:	d50a      	bpl.n	800aa52 <__ieee754_sqrt+0x176>
 800aa3c:	f1c1 0420 	rsb	r4, r1, #32
 800aa40:	fa22 f404 	lsr.w	r4, r2, r4
 800aa44:	1e4d      	subs	r5, r1, #1
 800aa46:	408a      	lsls	r2, r1
 800aa48:	4323      	orrs	r3, r4
 800aa4a:	1b41      	subs	r1, r0, r5
 800aa4c:	e772      	b.n	800a934 <__ieee754_sqrt+0x58>
 800aa4e:	4608      	mov	r0, r1
 800aa50:	e7f0      	b.n	800aa34 <__ieee754_sqrt+0x158>
 800aa52:	005b      	lsls	r3, r3, #1
 800aa54:	3101      	adds	r1, #1
 800aa56:	e7ef      	b.n	800aa38 <__ieee754_sqrt+0x15c>
 800aa58:	46e0      	mov	r8, ip
 800aa5a:	e7aa      	b.n	800a9b2 <__ieee754_sqrt+0xd6>
 800aa5c:	f7f5 fc1e 	bl	800029c <__adddf3>
 800aa60:	e9da 8900 	ldrd	r8, r9, [sl]
 800aa64:	4602      	mov	r2, r0
 800aa66:	460b      	mov	r3, r1
 800aa68:	4640      	mov	r0, r8
 800aa6a:	4649      	mov	r1, r9
 800aa6c:	f7f6 f83e 	bl	8000aec <__aeabi_dcmplt>
 800aa70:	b120      	cbz	r0, 800aa7c <__ieee754_sqrt+0x1a0>
 800aa72:	1ca0      	adds	r0, r4, #2
 800aa74:	bf08      	it	eq
 800aa76:	3501      	addeq	r5, #1
 800aa78:	3402      	adds	r4, #2
 800aa7a:	e7ca      	b.n	800aa12 <__ieee754_sqrt+0x136>
 800aa7c:	3401      	adds	r4, #1
 800aa7e:	f024 0401 	bic.w	r4, r4, #1
 800aa82:	e7c6      	b.n	800aa12 <__ieee754_sqrt+0x136>
 800aa84:	7ff00000 	.word	0x7ff00000
 800aa88:	200001d8 	.word	0x200001d8
 800aa8c:	200001e0 	.word	0x200001e0

0800aa90 <__kernel_rem_pio2f>:
 800aa90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa94:	ed2d 8b04 	vpush	{d8-d9}
 800aa98:	b0d9      	sub	sp, #356	; 0x164
 800aa9a:	4688      	mov	r8, r1
 800aa9c:	9002      	str	r0, [sp, #8]
 800aa9e:	49b8      	ldr	r1, [pc, #736]	; (800ad80 <__kernel_rem_pio2f+0x2f0>)
 800aaa0:	9866      	ldr	r0, [sp, #408]	; 0x198
 800aaa2:	9301      	str	r3, [sp, #4]
 800aaa4:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800aaa8:	9901      	ldr	r1, [sp, #4]
 800aaaa:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 800aaac:	f101 3bff 	add.w	fp, r1, #4294967295
 800aab0:	1d11      	adds	r1, r2, #4
 800aab2:	db25      	blt.n	800ab00 <__kernel_rem_pio2f+0x70>
 800aab4:	1ed0      	subs	r0, r2, #3
 800aab6:	bf48      	it	mi
 800aab8:	1d10      	addmi	r0, r2, #4
 800aaba:	10c0      	asrs	r0, r0, #3
 800aabc:	1c45      	adds	r5, r0, #1
 800aabe:	00e9      	lsls	r1, r5, #3
 800aac0:	eba0 070b 	sub.w	r7, r0, fp
 800aac4:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 800ad90 <__kernel_rem_pio2f+0x300>
 800aac8:	9103      	str	r1, [sp, #12]
 800aaca:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800aace:	eb0a 0c0b 	add.w	ip, sl, fp
 800aad2:	ae1c      	add	r6, sp, #112	; 0x70
 800aad4:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 800aad8:	2400      	movs	r4, #0
 800aada:	4564      	cmp	r4, ip
 800aadc:	dd12      	ble.n	800ab04 <__kernel_rem_pio2f+0x74>
 800aade:	9901      	ldr	r1, [sp, #4]
 800aae0:	ac1c      	add	r4, sp, #112	; 0x70
 800aae2:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800aae6:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800aaea:	f04f 0c00 	mov.w	ip, #0
 800aaee:	45d4      	cmp	ip, sl
 800aaf0:	dc27      	bgt.n	800ab42 <__kernel_rem_pio2f+0xb2>
 800aaf2:	f8dd e008 	ldr.w	lr, [sp, #8]
 800aaf6:	eddf 7aa6 	vldr	s15, [pc, #664]	; 800ad90 <__kernel_rem_pio2f+0x300>
 800aafa:	4627      	mov	r7, r4
 800aafc:	2600      	movs	r6, #0
 800aafe:	e016      	b.n	800ab2e <__kernel_rem_pio2f+0x9e>
 800ab00:	2000      	movs	r0, #0
 800ab02:	e7db      	b.n	800aabc <__kernel_rem_pio2f+0x2c>
 800ab04:	42e7      	cmn	r7, r4
 800ab06:	bf5d      	ittte	pl
 800ab08:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 800ab0c:	ee07 1a90 	vmovpl	s15, r1
 800ab10:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800ab14:	eef0 7a47 	vmovmi.f32	s15, s14
 800ab18:	ece6 7a01 	vstmia	r6!, {s15}
 800ab1c:	3401      	adds	r4, #1
 800ab1e:	e7dc      	b.n	800aada <__kernel_rem_pio2f+0x4a>
 800ab20:	ecfe 6a01 	vldmia	lr!, {s13}
 800ab24:	ed97 7a00 	vldr	s14, [r7]
 800ab28:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ab2c:	3601      	adds	r6, #1
 800ab2e:	455e      	cmp	r6, fp
 800ab30:	f1a7 0704 	sub.w	r7, r7, #4
 800ab34:	ddf4      	ble.n	800ab20 <__kernel_rem_pio2f+0x90>
 800ab36:	ece9 7a01 	vstmia	r9!, {s15}
 800ab3a:	f10c 0c01 	add.w	ip, ip, #1
 800ab3e:	3404      	adds	r4, #4
 800ab40:	e7d5      	b.n	800aaee <__kernel_rem_pio2f+0x5e>
 800ab42:	a908      	add	r1, sp, #32
 800ab44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ab48:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800ab4c:	eddf 8a8f 	vldr	s17, [pc, #572]	; 800ad8c <__kernel_rem_pio2f+0x2fc>
 800ab50:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 800ad88 <__kernel_rem_pio2f+0x2f8>
 800ab54:	9105      	str	r1, [sp, #20]
 800ab56:	9304      	str	r3, [sp, #16]
 800ab58:	4656      	mov	r6, sl
 800ab5a:	00b3      	lsls	r3, r6, #2
 800ab5c:	9306      	str	r3, [sp, #24]
 800ab5e:	ab58      	add	r3, sp, #352	; 0x160
 800ab60:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800ab64:	ac08      	add	r4, sp, #32
 800ab66:	ab44      	add	r3, sp, #272	; 0x110
 800ab68:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800ab6c:	46a4      	mov	ip, r4
 800ab6e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800ab72:	4637      	mov	r7, r6
 800ab74:	2f00      	cmp	r7, #0
 800ab76:	f1a0 0004 	sub.w	r0, r0, #4
 800ab7a:	dc4a      	bgt.n	800ac12 <__kernel_rem_pio2f+0x182>
 800ab7c:	4628      	mov	r0, r5
 800ab7e:	9207      	str	r2, [sp, #28]
 800ab80:	f000 f9f8 	bl	800af74 <scalbnf>
 800ab84:	eeb0 8a40 	vmov.f32	s16, s0
 800ab88:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800ab8c:	ee28 0a00 	vmul.f32	s0, s16, s0
 800ab90:	f000 fa56 	bl	800b040 <floorf>
 800ab94:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800ab98:	eea0 8a67 	vfms.f32	s16, s0, s15
 800ab9c:	2d00      	cmp	r5, #0
 800ab9e:	9a07      	ldr	r2, [sp, #28]
 800aba0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800aba4:	ee17 9a90 	vmov	r9, s15
 800aba8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800abac:	ee38 8a67 	vsub.f32	s16, s16, s15
 800abb0:	dd41      	ble.n	800ac36 <__kernel_rem_pio2f+0x1a6>
 800abb2:	f106 3cff 	add.w	ip, r6, #4294967295
 800abb6:	ab08      	add	r3, sp, #32
 800abb8:	f1c5 0e08 	rsb	lr, r5, #8
 800abbc:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800abc0:	fa47 f00e 	asr.w	r0, r7, lr
 800abc4:	4481      	add	r9, r0
 800abc6:	fa00 f00e 	lsl.w	r0, r0, lr
 800abca:	1a3f      	subs	r7, r7, r0
 800abcc:	f1c5 0007 	rsb	r0, r5, #7
 800abd0:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800abd4:	4107      	asrs	r7, r0
 800abd6:	2f00      	cmp	r7, #0
 800abd8:	dd3c      	ble.n	800ac54 <__kernel_rem_pio2f+0x1c4>
 800abda:	f04f 0e00 	mov.w	lr, #0
 800abde:	f109 0901 	add.w	r9, r9, #1
 800abe2:	4671      	mov	r1, lr
 800abe4:	4576      	cmp	r6, lr
 800abe6:	dc67      	bgt.n	800acb8 <__kernel_rem_pio2f+0x228>
 800abe8:	2d00      	cmp	r5, #0
 800abea:	dd03      	ble.n	800abf4 <__kernel_rem_pio2f+0x164>
 800abec:	2d01      	cmp	r5, #1
 800abee:	d074      	beq.n	800acda <__kernel_rem_pio2f+0x24a>
 800abf0:	2d02      	cmp	r5, #2
 800abf2:	d07b      	beq.n	800acec <__kernel_rem_pio2f+0x25c>
 800abf4:	2f02      	cmp	r7, #2
 800abf6:	d12d      	bne.n	800ac54 <__kernel_rem_pio2f+0x1c4>
 800abf8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800abfc:	ee30 8a48 	vsub.f32	s16, s0, s16
 800ac00:	b341      	cbz	r1, 800ac54 <__kernel_rem_pio2f+0x1c4>
 800ac02:	4628      	mov	r0, r5
 800ac04:	9207      	str	r2, [sp, #28]
 800ac06:	f000 f9b5 	bl	800af74 <scalbnf>
 800ac0a:	9a07      	ldr	r2, [sp, #28]
 800ac0c:	ee38 8a40 	vsub.f32	s16, s16, s0
 800ac10:	e020      	b.n	800ac54 <__kernel_rem_pio2f+0x1c4>
 800ac12:	ee60 7a28 	vmul.f32	s15, s0, s17
 800ac16:	3f01      	subs	r7, #1
 800ac18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ac1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac20:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800ac24:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ac28:	ecac 0a01 	vstmia	ip!, {s0}
 800ac2c:	ed90 0a00 	vldr	s0, [r0]
 800ac30:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ac34:	e79e      	b.n	800ab74 <__kernel_rem_pio2f+0xe4>
 800ac36:	d105      	bne.n	800ac44 <__kernel_rem_pio2f+0x1b4>
 800ac38:	1e70      	subs	r0, r6, #1
 800ac3a:	ab08      	add	r3, sp, #32
 800ac3c:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800ac40:	11ff      	asrs	r7, r7, #7
 800ac42:	e7c8      	b.n	800abd6 <__kernel_rem_pio2f+0x146>
 800ac44:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ac48:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ac4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac50:	da30      	bge.n	800acb4 <__kernel_rem_pio2f+0x224>
 800ac52:	2700      	movs	r7, #0
 800ac54:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ac58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac5c:	f040 809a 	bne.w	800ad94 <__kernel_rem_pio2f+0x304>
 800ac60:	1e74      	subs	r4, r6, #1
 800ac62:	46a4      	mov	ip, r4
 800ac64:	2100      	movs	r1, #0
 800ac66:	45d4      	cmp	ip, sl
 800ac68:	da47      	bge.n	800acfa <__kernel_rem_pio2f+0x26a>
 800ac6a:	2900      	cmp	r1, #0
 800ac6c:	d063      	beq.n	800ad36 <__kernel_rem_pio2f+0x2a6>
 800ac6e:	ab08      	add	r3, sp, #32
 800ac70:	3d08      	subs	r5, #8
 800ac72:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d07f      	beq.n	800ad7a <__kernel_rem_pio2f+0x2ea>
 800ac7a:	4628      	mov	r0, r5
 800ac7c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ac80:	f000 f978 	bl	800af74 <scalbnf>
 800ac84:	1c63      	adds	r3, r4, #1
 800ac86:	aa44      	add	r2, sp, #272	; 0x110
 800ac88:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800ad8c <__kernel_rem_pio2f+0x2fc>
 800ac8c:	0099      	lsls	r1, r3, #2
 800ac8e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ac92:	4623      	mov	r3, r4
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	f280 80ad 	bge.w	800adf4 <__kernel_rem_pio2f+0x364>
 800ac9a:	4623      	mov	r3, r4
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	f2c0 80cb 	blt.w	800ae38 <__kernel_rem_pio2f+0x3a8>
 800aca2:	aa44      	add	r2, sp, #272	; 0x110
 800aca4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800aca8:	4e36      	ldr	r6, [pc, #216]	; (800ad84 <__kernel_rem_pio2f+0x2f4>)
 800acaa:	eddf 7a39 	vldr	s15, [pc, #228]	; 800ad90 <__kernel_rem_pio2f+0x300>
 800acae:	2000      	movs	r0, #0
 800acb0:	1ae2      	subs	r2, r4, r3
 800acb2:	e0b6      	b.n	800ae22 <__kernel_rem_pio2f+0x392>
 800acb4:	2702      	movs	r7, #2
 800acb6:	e790      	b.n	800abda <__kernel_rem_pio2f+0x14a>
 800acb8:	6820      	ldr	r0, [r4, #0]
 800acba:	b949      	cbnz	r1, 800acd0 <__kernel_rem_pio2f+0x240>
 800acbc:	b118      	cbz	r0, 800acc6 <__kernel_rem_pio2f+0x236>
 800acbe:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800acc2:	6020      	str	r0, [r4, #0]
 800acc4:	2001      	movs	r0, #1
 800acc6:	f10e 0e01 	add.w	lr, lr, #1
 800acca:	3404      	adds	r4, #4
 800accc:	4601      	mov	r1, r0
 800acce:	e789      	b.n	800abe4 <__kernel_rem_pio2f+0x154>
 800acd0:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800acd4:	6020      	str	r0, [r4, #0]
 800acd6:	4608      	mov	r0, r1
 800acd8:	e7f5      	b.n	800acc6 <__kernel_rem_pio2f+0x236>
 800acda:	1e74      	subs	r4, r6, #1
 800acdc:	ab08      	add	r3, sp, #32
 800acde:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ace2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800ace6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800acea:	e783      	b.n	800abf4 <__kernel_rem_pio2f+0x164>
 800acec:	1e74      	subs	r4, r6, #1
 800acee:	ab08      	add	r3, sp, #32
 800acf0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800acf4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800acf8:	e7f5      	b.n	800ace6 <__kernel_rem_pio2f+0x256>
 800acfa:	ab08      	add	r3, sp, #32
 800acfc:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 800ad00:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ad04:	4301      	orrs	r1, r0
 800ad06:	e7ae      	b.n	800ac66 <__kernel_rem_pio2f+0x1d6>
 800ad08:	3001      	adds	r0, #1
 800ad0a:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 800ad0e:	2f00      	cmp	r7, #0
 800ad10:	d0fa      	beq.n	800ad08 <__kernel_rem_pio2f+0x278>
 800ad12:	9b06      	ldr	r3, [sp, #24]
 800ad14:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800ad18:	eb0d 0403 	add.w	r4, sp, r3
 800ad1c:	9b01      	ldr	r3, [sp, #4]
 800ad1e:	18f7      	adds	r7, r6, r3
 800ad20:	ab1c      	add	r3, sp, #112	; 0x70
 800ad22:	f106 0c01 	add.w	ip, r6, #1
 800ad26:	3c4c      	subs	r4, #76	; 0x4c
 800ad28:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ad2c:	4430      	add	r0, r6
 800ad2e:	4560      	cmp	r0, ip
 800ad30:	da04      	bge.n	800ad3c <__kernel_rem_pio2f+0x2ac>
 800ad32:	4606      	mov	r6, r0
 800ad34:	e711      	b.n	800ab5a <__kernel_rem_pio2f+0xca>
 800ad36:	9c05      	ldr	r4, [sp, #20]
 800ad38:	2001      	movs	r0, #1
 800ad3a:	e7e6      	b.n	800ad0a <__kernel_rem_pio2f+0x27a>
 800ad3c:	9b04      	ldr	r3, [sp, #16]
 800ad3e:	f8dd e008 	ldr.w	lr, [sp, #8]
 800ad42:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800ad46:	9306      	str	r3, [sp, #24]
 800ad48:	ee07 3a90 	vmov	s15, r3
 800ad4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ad50:	2600      	movs	r6, #0
 800ad52:	ece7 7a01 	vstmia	r7!, {s15}
 800ad56:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800ad90 <__kernel_rem_pio2f+0x300>
 800ad5a:	46b9      	mov	r9, r7
 800ad5c:	455e      	cmp	r6, fp
 800ad5e:	dd04      	ble.n	800ad6a <__kernel_rem_pio2f+0x2da>
 800ad60:	ece4 7a01 	vstmia	r4!, {s15}
 800ad64:	f10c 0c01 	add.w	ip, ip, #1
 800ad68:	e7e1      	b.n	800ad2e <__kernel_rem_pio2f+0x29e>
 800ad6a:	ecfe 6a01 	vldmia	lr!, {s13}
 800ad6e:	ed39 7a01 	vldmdb	r9!, {s14}
 800ad72:	3601      	adds	r6, #1
 800ad74:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ad78:	e7f0      	b.n	800ad5c <__kernel_rem_pio2f+0x2cc>
 800ad7a:	3c01      	subs	r4, #1
 800ad7c:	e777      	b.n	800ac6e <__kernel_rem_pio2f+0x1de>
 800ad7e:	bf00      	nop
 800ad80:	0800b93c 	.word	0x0800b93c
 800ad84:	0800b910 	.word	0x0800b910
 800ad88:	43800000 	.word	0x43800000
 800ad8c:	3b800000 	.word	0x3b800000
 800ad90:	00000000 	.word	0x00000000
 800ad94:	9b03      	ldr	r3, [sp, #12]
 800ad96:	eeb0 0a48 	vmov.f32	s0, s16
 800ad9a:	1a98      	subs	r0, r3, r2
 800ad9c:	f000 f8ea 	bl	800af74 <scalbnf>
 800ada0:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800ad88 <__kernel_rem_pio2f+0x2f8>
 800ada4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800ada8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adac:	db19      	blt.n	800ade2 <__kernel_rem_pio2f+0x352>
 800adae:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800ad8c <__kernel_rem_pio2f+0x2fc>
 800adb2:	ee60 7a27 	vmul.f32	s15, s0, s15
 800adb6:	aa08      	add	r2, sp, #32
 800adb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800adbc:	1c74      	adds	r4, r6, #1
 800adbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800adc2:	3508      	adds	r5, #8
 800adc4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800adc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800adcc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800add0:	ee10 3a10 	vmov	r3, s0
 800add4:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800add8:	ee17 3a90 	vmov	r3, s15
 800addc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ade0:	e74b      	b.n	800ac7a <__kernel_rem_pio2f+0x1ea>
 800ade2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ade6:	aa08      	add	r2, sp, #32
 800ade8:	ee10 3a10 	vmov	r3, s0
 800adec:	4634      	mov	r4, r6
 800adee:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800adf2:	e742      	b.n	800ac7a <__kernel_rem_pio2f+0x1ea>
 800adf4:	a808      	add	r0, sp, #32
 800adf6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800adfa:	9001      	str	r0, [sp, #4]
 800adfc:	ee07 0a90 	vmov	s15, r0
 800ae00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae04:	3b01      	subs	r3, #1
 800ae06:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ae0a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ae0e:	ed62 7a01 	vstmdb	r2!, {s15}
 800ae12:	e73f      	b.n	800ac94 <__kernel_rem_pio2f+0x204>
 800ae14:	ecf6 6a01 	vldmia	r6!, {s13}
 800ae18:	ecb5 7a01 	vldmia	r5!, {s14}
 800ae1c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ae20:	3001      	adds	r0, #1
 800ae22:	4550      	cmp	r0, sl
 800ae24:	dc01      	bgt.n	800ae2a <__kernel_rem_pio2f+0x39a>
 800ae26:	4290      	cmp	r0, r2
 800ae28:	ddf4      	ble.n	800ae14 <__kernel_rem_pio2f+0x384>
 800ae2a:	a858      	add	r0, sp, #352	; 0x160
 800ae2c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ae30:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 800ae34:	3b01      	subs	r3, #1
 800ae36:	e731      	b.n	800ac9c <__kernel_rem_pio2f+0x20c>
 800ae38:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800ae3a:	2b02      	cmp	r3, #2
 800ae3c:	dc09      	bgt.n	800ae52 <__kernel_rem_pio2f+0x3c2>
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	dc2b      	bgt.n	800ae9a <__kernel_rem_pio2f+0x40a>
 800ae42:	d044      	beq.n	800aece <__kernel_rem_pio2f+0x43e>
 800ae44:	f009 0007 	and.w	r0, r9, #7
 800ae48:	b059      	add	sp, #356	; 0x164
 800ae4a:	ecbd 8b04 	vpop	{d8-d9}
 800ae4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae52:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800ae54:	2b03      	cmp	r3, #3
 800ae56:	d1f5      	bne.n	800ae44 <__kernel_rem_pio2f+0x3b4>
 800ae58:	aa30      	add	r2, sp, #192	; 0xc0
 800ae5a:	1f0b      	subs	r3, r1, #4
 800ae5c:	4413      	add	r3, r2
 800ae5e:	461a      	mov	r2, r3
 800ae60:	4620      	mov	r0, r4
 800ae62:	2800      	cmp	r0, #0
 800ae64:	f1a2 0204 	sub.w	r2, r2, #4
 800ae68:	dc52      	bgt.n	800af10 <__kernel_rem_pio2f+0x480>
 800ae6a:	4622      	mov	r2, r4
 800ae6c:	2a01      	cmp	r2, #1
 800ae6e:	f1a3 0304 	sub.w	r3, r3, #4
 800ae72:	dc5d      	bgt.n	800af30 <__kernel_rem_pio2f+0x4a0>
 800ae74:	ab30      	add	r3, sp, #192	; 0xc0
 800ae76:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800ad90 <__kernel_rem_pio2f+0x300>
 800ae7a:	440b      	add	r3, r1
 800ae7c:	2c01      	cmp	r4, #1
 800ae7e:	dc67      	bgt.n	800af50 <__kernel_rem_pio2f+0x4c0>
 800ae80:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800ae84:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800ae88:	2f00      	cmp	r7, #0
 800ae8a:	d167      	bne.n	800af5c <__kernel_rem_pio2f+0x4cc>
 800ae8c:	edc8 6a00 	vstr	s13, [r8]
 800ae90:	ed88 7a01 	vstr	s14, [r8, #4]
 800ae94:	edc8 7a02 	vstr	s15, [r8, #8]
 800ae98:	e7d4      	b.n	800ae44 <__kernel_rem_pio2f+0x3b4>
 800ae9a:	ab30      	add	r3, sp, #192	; 0xc0
 800ae9c:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 800ad90 <__kernel_rem_pio2f+0x300>
 800aea0:	440b      	add	r3, r1
 800aea2:	4622      	mov	r2, r4
 800aea4:	2a00      	cmp	r2, #0
 800aea6:	da24      	bge.n	800aef2 <__kernel_rem_pio2f+0x462>
 800aea8:	b34f      	cbz	r7, 800aefe <__kernel_rem_pio2f+0x46e>
 800aeaa:	eef1 7a47 	vneg.f32	s15, s14
 800aeae:	edc8 7a00 	vstr	s15, [r8]
 800aeb2:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800aeb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aeba:	aa31      	add	r2, sp, #196	; 0xc4
 800aebc:	2301      	movs	r3, #1
 800aebe:	429c      	cmp	r4, r3
 800aec0:	da20      	bge.n	800af04 <__kernel_rem_pio2f+0x474>
 800aec2:	b10f      	cbz	r7, 800aec8 <__kernel_rem_pio2f+0x438>
 800aec4:	eef1 7a67 	vneg.f32	s15, s15
 800aec8:	edc8 7a01 	vstr	s15, [r8, #4]
 800aecc:	e7ba      	b.n	800ae44 <__kernel_rem_pio2f+0x3b4>
 800aece:	ab30      	add	r3, sp, #192	; 0xc0
 800aed0:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 800ad90 <__kernel_rem_pio2f+0x300>
 800aed4:	440b      	add	r3, r1
 800aed6:	2c00      	cmp	r4, #0
 800aed8:	da05      	bge.n	800aee6 <__kernel_rem_pio2f+0x456>
 800aeda:	b10f      	cbz	r7, 800aee0 <__kernel_rem_pio2f+0x450>
 800aedc:	eef1 7a67 	vneg.f32	s15, s15
 800aee0:	edc8 7a00 	vstr	s15, [r8]
 800aee4:	e7ae      	b.n	800ae44 <__kernel_rem_pio2f+0x3b4>
 800aee6:	ed33 7a01 	vldmdb	r3!, {s14}
 800aeea:	3c01      	subs	r4, #1
 800aeec:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aef0:	e7f1      	b.n	800aed6 <__kernel_rem_pio2f+0x446>
 800aef2:	ed73 7a01 	vldmdb	r3!, {s15}
 800aef6:	3a01      	subs	r2, #1
 800aef8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800aefc:	e7d2      	b.n	800aea4 <__kernel_rem_pio2f+0x414>
 800aefe:	eef0 7a47 	vmov.f32	s15, s14
 800af02:	e7d4      	b.n	800aeae <__kernel_rem_pio2f+0x41e>
 800af04:	ecb2 7a01 	vldmia	r2!, {s14}
 800af08:	3301      	adds	r3, #1
 800af0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800af0e:	e7d6      	b.n	800aebe <__kernel_rem_pio2f+0x42e>
 800af10:	edd2 7a00 	vldr	s15, [r2]
 800af14:	edd2 6a01 	vldr	s13, [r2, #4]
 800af18:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800af1c:	3801      	subs	r0, #1
 800af1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800af22:	ed82 7a00 	vstr	s14, [r2]
 800af26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af2a:	edc2 7a01 	vstr	s15, [r2, #4]
 800af2e:	e798      	b.n	800ae62 <__kernel_rem_pio2f+0x3d2>
 800af30:	edd3 7a00 	vldr	s15, [r3]
 800af34:	edd3 6a01 	vldr	s13, [r3, #4]
 800af38:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800af3c:	3a01      	subs	r2, #1
 800af3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800af42:	ed83 7a00 	vstr	s14, [r3]
 800af46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af4a:	edc3 7a01 	vstr	s15, [r3, #4]
 800af4e:	e78d      	b.n	800ae6c <__kernel_rem_pio2f+0x3dc>
 800af50:	ed33 7a01 	vldmdb	r3!, {s14}
 800af54:	3c01      	subs	r4, #1
 800af56:	ee77 7a87 	vadd.f32	s15, s15, s14
 800af5a:	e78f      	b.n	800ae7c <__kernel_rem_pio2f+0x3ec>
 800af5c:	eef1 6a66 	vneg.f32	s13, s13
 800af60:	eeb1 7a47 	vneg.f32	s14, s14
 800af64:	edc8 6a00 	vstr	s13, [r8]
 800af68:	ed88 7a01 	vstr	s14, [r8, #4]
 800af6c:	eef1 7a67 	vneg.f32	s15, s15
 800af70:	e790      	b.n	800ae94 <__kernel_rem_pio2f+0x404>
 800af72:	bf00      	nop

0800af74 <scalbnf>:
 800af74:	ee10 3a10 	vmov	r3, s0
 800af78:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800af7c:	d02b      	beq.n	800afd6 <scalbnf+0x62>
 800af7e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800af82:	d302      	bcc.n	800af8a <scalbnf+0x16>
 800af84:	ee30 0a00 	vadd.f32	s0, s0, s0
 800af88:	4770      	bx	lr
 800af8a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800af8e:	d123      	bne.n	800afd8 <scalbnf+0x64>
 800af90:	4b24      	ldr	r3, [pc, #144]	; (800b024 <scalbnf+0xb0>)
 800af92:	eddf 7a25 	vldr	s15, [pc, #148]	; 800b028 <scalbnf+0xb4>
 800af96:	4298      	cmp	r0, r3
 800af98:	ee20 0a27 	vmul.f32	s0, s0, s15
 800af9c:	db17      	blt.n	800afce <scalbnf+0x5a>
 800af9e:	ee10 3a10 	vmov	r3, s0
 800afa2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800afa6:	3a19      	subs	r2, #25
 800afa8:	f24c 3150 	movw	r1, #50000	; 0xc350
 800afac:	4288      	cmp	r0, r1
 800afae:	dd15      	ble.n	800afdc <scalbnf+0x68>
 800afb0:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800b02c <scalbnf+0xb8>
 800afb4:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800b030 <scalbnf+0xbc>
 800afb8:	ee10 3a10 	vmov	r3, s0
 800afbc:	eeb0 7a67 	vmov.f32	s14, s15
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	bfb8      	it	lt
 800afc4:	eef0 7a66 	vmovlt.f32	s15, s13
 800afc8:	ee27 0a87 	vmul.f32	s0, s15, s14
 800afcc:	4770      	bx	lr
 800afce:	eddf 7a19 	vldr	s15, [pc, #100]	; 800b034 <scalbnf+0xc0>
 800afd2:	ee27 0a80 	vmul.f32	s0, s15, s0
 800afd6:	4770      	bx	lr
 800afd8:	0dd2      	lsrs	r2, r2, #23
 800afda:	e7e5      	b.n	800afa8 <scalbnf+0x34>
 800afdc:	4410      	add	r0, r2
 800afde:	28fe      	cmp	r0, #254	; 0xfe
 800afe0:	dce6      	bgt.n	800afb0 <scalbnf+0x3c>
 800afe2:	2800      	cmp	r0, #0
 800afe4:	dd06      	ble.n	800aff4 <scalbnf+0x80>
 800afe6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800afea:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800afee:	ee00 3a10 	vmov	s0, r3
 800aff2:	4770      	bx	lr
 800aff4:	f110 0f16 	cmn.w	r0, #22
 800aff8:	da09      	bge.n	800b00e <scalbnf+0x9a>
 800affa:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800b034 <scalbnf+0xc0>
 800affe:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800b038 <scalbnf+0xc4>
 800b002:	ee10 3a10 	vmov	r3, s0
 800b006:	eeb0 7a67 	vmov.f32	s14, s15
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	e7d9      	b.n	800afc2 <scalbnf+0x4e>
 800b00e:	3019      	adds	r0, #25
 800b010:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b014:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b018:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800b03c <scalbnf+0xc8>
 800b01c:	ee07 3a90 	vmov	s15, r3
 800b020:	e7d7      	b.n	800afd2 <scalbnf+0x5e>
 800b022:	bf00      	nop
 800b024:	ffff3cb0 	.word	0xffff3cb0
 800b028:	4c000000 	.word	0x4c000000
 800b02c:	7149f2ca 	.word	0x7149f2ca
 800b030:	f149f2ca 	.word	0xf149f2ca
 800b034:	0da24260 	.word	0x0da24260
 800b038:	8da24260 	.word	0x8da24260
 800b03c:	33000000 	.word	0x33000000

0800b040 <floorf>:
 800b040:	ee10 3a10 	vmov	r3, s0
 800b044:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b048:	3a7f      	subs	r2, #127	; 0x7f
 800b04a:	2a16      	cmp	r2, #22
 800b04c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b050:	dc2a      	bgt.n	800b0a8 <floorf+0x68>
 800b052:	2a00      	cmp	r2, #0
 800b054:	da11      	bge.n	800b07a <floorf+0x3a>
 800b056:	eddf 7a18 	vldr	s15, [pc, #96]	; 800b0b8 <floorf+0x78>
 800b05a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b05e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b066:	dd05      	ble.n	800b074 <floorf+0x34>
 800b068:	2b00      	cmp	r3, #0
 800b06a:	da23      	bge.n	800b0b4 <floorf+0x74>
 800b06c:	4a13      	ldr	r2, [pc, #76]	; (800b0bc <floorf+0x7c>)
 800b06e:	2900      	cmp	r1, #0
 800b070:	bf18      	it	ne
 800b072:	4613      	movne	r3, r2
 800b074:	ee00 3a10 	vmov	s0, r3
 800b078:	4770      	bx	lr
 800b07a:	4911      	ldr	r1, [pc, #68]	; (800b0c0 <floorf+0x80>)
 800b07c:	4111      	asrs	r1, r2
 800b07e:	420b      	tst	r3, r1
 800b080:	d0fa      	beq.n	800b078 <floorf+0x38>
 800b082:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800b0b8 <floorf+0x78>
 800b086:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b08a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b08e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b092:	ddef      	ble.n	800b074 <floorf+0x34>
 800b094:	2b00      	cmp	r3, #0
 800b096:	bfbe      	ittt	lt
 800b098:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800b09c:	fa40 f202 	asrlt.w	r2, r0, r2
 800b0a0:	189b      	addlt	r3, r3, r2
 800b0a2:	ea23 0301 	bic.w	r3, r3, r1
 800b0a6:	e7e5      	b.n	800b074 <floorf+0x34>
 800b0a8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b0ac:	d3e4      	bcc.n	800b078 <floorf+0x38>
 800b0ae:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b0b2:	4770      	bx	lr
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	e7dd      	b.n	800b074 <floorf+0x34>
 800b0b8:	7149f2ca 	.word	0x7149f2ca
 800b0bc:	bf800000 	.word	0xbf800000
 800b0c0:	007fffff 	.word	0x007fffff

0800b0c4 <_init>:
 800b0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0c6:	bf00      	nop
 800b0c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0ca:	bc08      	pop	{r3}
 800b0cc:	469e      	mov	lr, r3
 800b0ce:	4770      	bx	lr

0800b0d0 <_fini>:
 800b0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0d2:	bf00      	nop
 800b0d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0d6:	bc08      	pop	{r3}
 800b0d8:	469e      	mov	lr, r3
 800b0da:	4770      	bx	lr
